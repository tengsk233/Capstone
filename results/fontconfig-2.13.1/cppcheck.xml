<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.90"/>
    <errors>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/0001-cache-If-nsec-is-zero-don-t-use-it-for-comparisons.patch/src/fccache.c" line="396" column="10"/>
            <symbol>fd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/0001-cache-If-nsec-is-zero-don-t-use-it-for-comparisons.patch/src/fccache.c" line="845" column="15"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_offset&apos; can be reduced." verbose="The scope of the variable &apos;last_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/0001-cache-If-nsec-is-zero-don-t-use-it-for-comparisons.patch/src/fccache.c" line="890" column="27"/>
            <symbol>last_offset</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;epoch&apos; can be reduced." verbose="The scope of the variable &apos;epoch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/0001-cache-If-nsec-is-zero-don-t-use-it-for-comparisons.patch/src/fccache.c" line="1077" column="24"/>
            <symbol>epoch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;target_dir&apos; can be reduced." verbose="The scope of the variable &apos;target_dir&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/0001-cache-If-nsec-is-zero-don-t-use-it-for-comparisons.patch/src/fccache.c" line="1476" column="17"/>
            <symbol>target_dir</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;fd&apos; is assigned a value that is never used." verbose="Variable &apos;fd&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/0001-cache-If-nsec-is-zero-don-t-use-it-for-comparisons.patch/src/fccache.c" line="396" column="13"/>
            <symbol>fd</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sysroot&apos; is assigned a value that is never used." verbose="Variable &apos;sysroot&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/0001-cache-If-nsec-is-zero-don-t-use-it-for-comparisons.patch/src/fccache.c" line="54" column="28"/>
            <symbol>sysroot</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: target" verbose="Unused variable: target" cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/0001-cache-If-nsec-is-zero-don-t-use-it-for-comparisons.patch/src/fccache.c" line="55" column="14"/>
            <symbol>target</symbol>
        </error>
        <error id="invalidscanf" severity="warning" msg="sscanf() without field width limits can crash with huge input data." verbose="sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" cwe="119">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/05_lcdfilterlegacy.patch/src/fcname.c" line="339" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c1&apos; can be reduced." verbose="The scope of the variable &apos;c1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/05_lcdfilterlegacy.patch/src/fcname.c" line="247" column="17"/>
            <symbol>c1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/do_not_remove_uuid.patch/src/fcdir.c" line="137" column="9"/>
            <symbol>len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;file&apos; can be reduced." verbose="The scope of the variable &apos;file&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="214" column="18"/>
            <symbol>file</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cache&apos; can be reduced." verbose="The scope of the variable &apos;cache&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="446" column="18"/>
            <symbol>cache</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;str&apos; can be reduced." verbose="The scope of the variable &apos;str&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="980" column="18"/>
            <symbol>str</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dir&apos; can be reduced." verbose="The scope of the variable &apos;dir&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="2189" column="24"/>
            <symbol>dir</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subdir&apos; can be reduced." verbose="The scope of the variable &apos;subdir&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="2284" column="14"/>
            <symbol>subdir</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;m&apos; shadows outer variable" verbose="Local variable &apos;m&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="1000" column="13" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="979" column="15" info="Shadowed declaration"/>
            <symbol>m</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;l&apos; shadows outer variable" verbose="Local variable &apos;l&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="1588" column="17" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="1564" column="22" info="Shadowed declaration"/>
            <symbol>l</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;v&apos; shadows outer variable" verbose="Local variable &apos;v&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="1590" column="14" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="1559" column="13" info="Shadowed declaration"/>
            <symbol>v</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;e&apos; shadows outer variable" verbose="Local variable &apos;e&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="1597" column="17" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="1568" column="36" info="Shadowed declaration"/>
            <symbol>e</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;osize&apos; is assigned a value that is never used." verbose="Variable &apos;osize&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="1982" column="7"/>
            <symbol>osize</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;R_OK;_WIN32&apos; since the value of &apos;R_OK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;R_OK;_WIN32&apos; since the value of &apos;R_OK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="1986" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dirs&apos; can be reduced." verbose="The scope of the variable &apos;dirs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cache/fc-cache.c" line="291" column="15"/>
            <symbol>dirs</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;sysroot&apos; is always false" verbose="Condition &apos;sysroot&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cache/fc-cache.c" line="349" column="9" info="Condition &apos;sysroot&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cache/fc-cache.c" line="299" column="28" info="Assignment &apos;sysroot=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;folds&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;folds&apos; nulled but not freed upon failure" cwe="401">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-case/fc-case.c" line="68" column="2"/>
            <symbol>folds</symbol>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;foldChars&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;foldChars&apos; nulled but not freed upon failure" cwe="401">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-case/fc-case.c" line="119" column="2"/>
            <symbol>foldChars</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;digit&apos; can be reduced." verbose="The scope of the variable &apos;digit&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cat/fc-cat.c" line="115" column="27"/>
            <symbol>digit</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;verbose&apos; is always false" verbose="Condition &apos;verbose&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cat/fc-cat.c" line="381" column="6" info="Condition &apos;verbose&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cat/fc-cat.c" line="269" column="20" info="Assignment &apos;verbose=0&apos;, assigned value is 0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cat/fc-cat.c" line="100" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cat/fc-cat.c" line="104" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cat/fc-cat.c" line="128" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cat/fc-cat.c" line="146" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cat/fc-cat.c" line="150" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cat/fc-cat.c" line="219" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cat/fc-cat.c" line="223" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_IO_putc_unlocked;putc_unlocked&apos; since the value of &apos;putc_unlocked&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-cat/fc-cat.c" line="227" column="0"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." verbose="%x in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-lang/fc-lang.c" line="174" column="10"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 2) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." verbose="%x in format string (no. 2) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-lang/fc-lang.c" line="174" column="10"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." verbose="%x in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-lang/fc-lang.c" line="179" column="10"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 2) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." verbose="%x in format string (no. 2) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-lang/fc-lang.c" line="179" column="10"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." verbose="%x in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-lang/fc-lang.c" line="184" column="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;f&apos; can be reduced." verbose="The scope of the variable &apos;f&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-lang/fc-lang.c" line="269" column="11"/>
            <symbol>f</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;quiet&apos; is always false" verbose="Condition &apos;quiet&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="173" column="9" info="Condition &apos;quiet&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="111" column="19" info="Assignment &apos;quiet=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!verbose&apos; is always true" verbose="Condition &apos;!verbose&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="175" column="9" info="Condition &apos;!verbose&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="109" column="21" info="Assignment &apos;verbose=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!format&apos; is always true" verbose="Condition &apos;!format&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="177" column="9" info="Condition &apos;!format&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="112" column="29" info="Assignment &apos;format=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!quiet&apos; is always true" verbose="Condition &apos;!quiet&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="185" column="9" info="Condition &apos;!quiet&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="111" column="19" info="Assignment &apos;quiet=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;verbose&apos; is always false" verbose="Condition &apos;verbose&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="191" column="10" info="Condition &apos;verbose&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="109" column="21" info="Assignment &apos;verbose=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;quiet&apos; is always false" verbose="Condition &apos;quiet&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="221" column="12" info="Condition &apos;quiet&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="111" column="19" info="Assignment &apos;quiet=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;&amp;&amp;&apos; because &apos;!verbose&apos; and &apos;!brief&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="175" column="18"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="110" column="19" info="&apos;brief&apos; is assigned value &apos;0&apos; here."/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="109" column="21" info="&apos;verbose&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;verbose&apos; and &apos;brief&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="191" column="18"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="110" column="19" info="&apos;brief&apos; is assigned value &apos;0&apos; here."/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-list/fc-list.c" line="109" column="21" info="&apos;verbose&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;sort&apos; is always false" verbose="Condition &apos;sort&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="189" column="9" info="Condition &apos;sort&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="115" column="18" info="Assignment &apos;sort=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!format&apos; is always true" verbose="Condition &apos;!format&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="220" column="9" info="Condition &apos;!format&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="116" column="29" info="Assignment &apos;format=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;verbose&apos; is always false" verbose="Condition &apos;verbose&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="238" column="10" info="Condition &apos;verbose&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="113" column="21" info="Assignment &apos;verbose=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;sort&apos; and &apos;all&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="189" column="14"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="115" column="27" info="&apos;all&apos; is assigned value &apos;0&apos; here."/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="115" column="18" info="&apos;sort&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;verbose&apos; and &apos;brief&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="238" column="18"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="114" column="19" info="&apos;brief&apos; is assigned value &apos;0&apos; here."/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="113" column="21" info="&apos;verbose&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;verbose&apos; can be reduced." verbose="The scope of the variable &apos;verbose&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="113" column="11"/>
            <symbol>verbose</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;brief&apos; can be reduced." verbose="The scope of the variable &apos;brief&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-match/fc-match.c" line="114" column="11"/>
            <symbol>brief</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;do_config&apos; is always false" verbose="Condition &apos;do_config&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-pattern/fc-pattern.c" line="168" column="9" info="Condition &apos;do_config&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-pattern/fc-pattern.c" line="107" column="22" info="Assignment &apos;do_config=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;do_default&apos; is always false" verbose="Condition &apos;do_default&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-pattern/fc-pattern.c" line="170" column="9" info="Condition &apos;do_default&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-pattern/fc-pattern.c" line="107" column="38" info="Assignment &apos;do_default=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;format&apos; is always false" verbose="Condition &apos;format&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-pattern/fc-pattern.c" line="181" column="9" info="Condition &apos;format&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-pattern/fc-pattern.c" line="108" column="27" info="Assignment &apos;format=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;brief&apos; is always false" verbose="Condition &apos;brief&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-query/fc-query.c" line="169" column="6" info="Condition &apos;brief&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-query/fc-query.c" line="111" column="25" info="Assignment &apos;brief=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;brief&apos; is always false" verbose="Condition &apos;brief&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-scan/fc-scan.c" line="172" column="6" info="Condition &apos;brief&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-scan/fc-scan.c" line="107" column="25" info="Assignment &apos;brief=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fcs&apos; can be reduced." verbose="The scope of the variable &apos;fcs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-validate/fc-validate.c" line="179" column="17"/>
            <symbol>fcs</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fcs_sub&apos; can be reduced." verbose="The scope of the variable &apos;fcs_sub&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-validate/fc-validate.c" line="179" column="23"/>
            <symbol>fcs_sub</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!lang&apos; is always true" verbose="Condition &apos;!lang&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-validate/fc-validate.c" line="159" column="9" info="Condition &apos;!lang&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-validate/fc-validate.c" line="112" column="25" info="Assignment &apos;lang=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!index_set&apos; is always true" verbose="Condition &apos;!index_set&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-validate/fc-validate.c" line="183" column="7" info="Condition &apos;!index_set&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-validate/fc-validate.c" line="110" column="22" info="Assignment &apos;index_set=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;index_set == 0&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-validate/fc-validate.c" line="240" column="21"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/fc-validate/fc-validate.c" line="110" column="22" info="&apos;index_set&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcarch.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcarch.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FC_NO_MT;_MSC_VER;__MINGW32__;MemoryBarrier&apos; since the value of &apos;MemoryBarrier&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FC_NO_MT;_MSC_VER;__MINGW32__;MemoryBarrier&apos; since the value of &apos;MemoryBarrier&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcatomic.h" line="59" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcatomic.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcatomic.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="396" column="10"/>
            <symbol>fd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="849" column="15"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_offset&apos; can be reduced." verbose="The scope of the variable &apos;last_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="894" column="27"/>
            <symbol>last_offset</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;epoch&apos; can be reduced." verbose="The scope of the variable &apos;epoch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="1081" column="24"/>
            <symbol>epoch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;target_dir&apos; can be reduced." verbose="The scope of the variable &apos;target_dir&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="1480" column="17"/>
            <symbol>target_dir</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="61" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="162" column="52"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="164" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="184" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="310" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="347" column="71"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="349" column="62"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="405" column="38"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="429" column="71"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="431" column="62"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="813" column="57"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="1312" column="47"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="1357" column="61"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="1453" column="46"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="1511" column="46"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="1564" column="71"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="1566" column="62"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="1940" column="59"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="1997" column="48"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;fd&apos; is assigned a value that is never used." verbose="Variable &apos;fd&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccache.c" line="396" column="13"/>
            <symbol>fd</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;file&apos; can be reduced." verbose="The scope of the variable &apos;file&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="214" column="18"/>
            <symbol>file</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cache&apos; can be reduced." verbose="The scope of the variable &apos;cache&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="446" column="18"/>
            <symbol>cache</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;str&apos; can be reduced." verbose="The scope of the variable &apos;str&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="980" column="18"/>
            <symbol>str</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dir&apos; can be reduced." verbose="The scope of the variable &apos;dir&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="2189" column="24"/>
            <symbol>dir</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subdir&apos; can be reduced." verbose="The scope of the variable &apos;subdir&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="2284" column="14"/>
            <symbol>subdir</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="429" column="45"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="2238" column="41"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="2254" column="51"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcConfigCompareValue&apos; argument 1 names different: declaration &apos;m&apos; definition &apos;left_o&apos;." verbose="Function &apos;FcConfigCompareValue&apos; argument 1 names different: declaration &apos;m&apos; definition &apos;left_o&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="770" column="38"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="687" column="38"/>
            <symbol>FcConfigCompareValue</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcConfigCompareValue&apos; argument 3 names different: declaration &apos;v&apos; definition &apos;right_o&apos;." verbose="Function &apos;FcConfigCompareValue&apos; argument 3 names different: declaration &apos;v&apos; definition &apos;right_o&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="772" column="24"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="689" column="24"/>
            <symbol>FcConfigCompareValue</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;m&apos; shadows outer variable" verbose="Local variable &apos;m&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="1000" column="13" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="979" column="15" info="Shadowed declaration"/>
            <symbol>m</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;l&apos; shadows outer variable" verbose="Local variable &apos;l&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="1588" column="17" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="1564" column="22" info="Shadowed declaration"/>
            <symbol>l</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;v&apos; shadows outer variable" verbose="Local variable &apos;v&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="1590" column="14" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="1559" column="13" info="Shadowed declaration"/>
            <symbol>v</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;e&apos; shadows outer variable" verbose="Local variable &apos;e&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="1597" column="17" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="1568" column="36" info="Shadowed declaration"/>
            <symbol>e</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;osize&apos; is assigned a value that is never used." verbose="Variable &apos;osize&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccfg.c" line="1982" column="7"/>
            <symbol>osize</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="0" column="0"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1246" column="10" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1244" column="10" info="First condition"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: leaves" verbose="Memory leak: leaves" cwe="401">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="194" column="6"/>
            <symbol>leaves</symbol>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;numbers&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;numbers&apos; nulled but not freed upon failure" cwe="401">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="185" column="2"/>
            <symbol>numbers</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="69" column="9"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1143" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;leaves&apos; can be reduced." verbose="The scope of the variable &apos;leaves&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1341" column="15"/>
            <symbol>leaves</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;leaves_serialized&apos; can be reduced." verbose="The scope of the variable &apos;leaves_serialized&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1341" column="24"/>
            <symbol>leaves_serialized</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;numbers_serialized&apos; can be reduced." verbose="The scope of the variable &apos;numbers_serialized&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1342" column="25"/>
            <symbol>numbers_serialized</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;leaf&apos; can be reduced." verbose="The scope of the variable &apos;leaf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1343" column="17"/>
            <symbol>leaf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;leaf_serialized&apos; can be reduced." verbose="The scope of the variable &apos;leaf_serialized&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1343" column="24"/>
            <symbol>leaf_serialized</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1344" column="10"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1154" column="10" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1143" column="11" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;alloced*sizeof(*leaves)&apos; to function malloc is always 64" verbose="Argument &apos;alloced*sizeof(*leaves)&apos; to function malloc is always 64" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="165" column="27" info="Argument &apos;alloced*sizeof(*leaves)&apos; to function malloc is always 64"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="164" column="32" info="Assignment &apos;alloced=8&apos;, assigned value is 8"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="sizeofDivisionMemfunc" severity="warning" msg="Division by result of sizeof(). malloc() expects a size in bytes, did you intend to multiply instead?" verbose="Division by result of sizeof(). malloc() expects a size in bytes, did you intend to multiply instead?" cwe="682">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="1061" column="87"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;i&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;i&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="983" column="10" info="i is overwritten"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="979" column="13" info="i is initialized"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ci&apos; shadows outer variable" verbose="Local variable &apos;ci&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="956" column="16" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="905" column="21" info="Shadowed declaration"/>
            <symbol>ci</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="979" column="11" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="907" column="14" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 40 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccompat.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccompat.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;statebuf&apos; can be reduced." verbose="The scope of the variable &apos;statebuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccompat.c" line="174" column="17"/>
            <symbol>statebuf</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdbg.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcPatternPrint2&apos; argument 1 names different: declaration &apos;p1&apos; definition &apos;pp1&apos;." verbose="Function &apos;FcPatternPrint2&apos; argument 1 names different: declaration &apos;p1&apos; definition &apos;pp1&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdbg.c" line="216" column="37"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdbg.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="865" column="29"/>
            <symbol>FcPatternPrint2</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcPatternPrint2&apos; argument 2 names different: declaration &apos;p2&apos; definition &apos;pp2&apos;." verbose="Function &apos;FcPatternPrint2&apos; argument 2 names different: declaration &apos;p2&apos; definition &apos;pp2&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdbg.c" line="217" column="23"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdbg.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="865" column="44"/>
            <symbol>FcPatternPrint2</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcOpPrint&apos; argument 1 names different: declaration &apos;op&apos; definition &apos;op_&apos;." verbose="Function &apos;FcOpPrint&apos; argument 1 names different: declaration &apos;op&apos; definition &apos;op_&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdbg.c" line="294" column="17"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdbg.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="847" column="17"/>
            <symbol>FcOpPrint</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdbg.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdefault.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;p&apos; is always false" verbose="Condition &apos;p&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdefault.c" line="184" column="6" info="Condition &apos;p&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdefault.c" line="182" column="12" info="Assignment &apos;p=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!prgname&apos; is always true" verbose="Condition &apos;!prgname&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdefault.c" line="195" column="6" info="Condition &apos;!prgname&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdefault.c" line="117" column="9" info="Assuming that condition &apos;!prgname&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;p&apos; is always false" verbose="Condition &apos;p&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdefault.c" line="198" column="6" info="Condition &apos;p&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdefault.c" line="182" column="12" info="Assignment &apos;p=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pixelsize&apos; can be reduced." verbose="The scope of the variable &apos;pixelsize&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdefault.c" line="244" column="30"/>
            <symbol>pixelsize</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdefault.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdir.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdir.c" line="137" column="9"/>
            <symbol>len</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdir.c" line="297" column="38"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdir.c" line="367" column="38"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcdir.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcformat.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcformat.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="957" column="9"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;decode&apos; can be reduced." verbose="The scope of the variable &apos;decode&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="2291" column="31"/>
            <symbol>decode</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;p&apos; shadows outer variable" verbose="Local variable &apos;p&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="1421" column="21" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="1250" column="21" info="Shadowed declaration"/>
            <symbol>p</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;n&apos; shadows outer variable" verbose="Local variable &apos;n&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="1666" column="10" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="1250" column="24" info="Shadowed declaration"/>
            <symbol>n</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfs.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sfont&apos; can be reduced." verbose="The scope of the variable &apos;sfont&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfs.c" line="58" column="10"/>
            <symbol>sfont</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p_serialize&apos; can be reduced." verbose="The scope of the variable &apos;p_serialize&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfs.c" line="99" column="16"/>
            <symbol>p_serialize</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfs.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fchash.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev&apos; can be reduced." verbose="The scope of the variable &apos;prev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fchash.c" line="102" column="45"/>
            <symbol>prev</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fchash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcinit.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcinit.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;extra&apos; can be reduced." verbose="The scope of the variable &apos;extra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="671" column="12"/>
            <symbol>extra</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;extra&apos; can be reduced." verbose="The scope of the variable &apos;extra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="692" column="18"/>
            <symbol>extra</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;id&apos; can be reduced." verbose="The scope of the variable &apos;id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="758" column="10"/>
            <symbol>id</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;extra&apos; can be reduced." verbose="The scope of the variable &apos;extra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="942" column="12"/>
            <symbol>extra</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;extra&apos; can be reduced." verbose="The scope of the variable &apos;extra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="1000" column="15"/>
            <symbol>extra</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;extra&apos; can be reduced." verbose="The scope of the variable &apos;extra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="1060" column="12"/>
            <symbol>extra</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcLangSetPromote&apos; argument 2 names different: declaration &apos;buf&apos; definition &apos;vbuf&apos;." verbose="Function &apos;FcLangSetPromote&apos; argument 2 names different: declaration &apos;buf&apos; definition &apos;vbuf&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="756" column="64"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="985" column="64"/>
            <symbol>FcLangSetPromote</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="155" column="15" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="97" column="14" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;j&apos; shadows outer variable" verbose="Local variable &apos;j&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="155" column="18" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="97" column="17" info="Shadowed declaration"/>
            <symbol>j</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclist.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclist.c" line="45" column="10"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclist.c" line="93" column="9"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e1&apos; can be reduced." verbose="The scope of the variable &apos;e1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclist.c" line="188" column="22"/>
            <symbol>e1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e2&apos; can be reduced." verbose="The scope of the variable &apos;e2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclist.c" line="188" column="27"/>
            <symbol>e2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e&apos; can be reduced." verbose="The scope of the variable &apos;e&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclist.c" line="300" column="22"/>
            <symbol>e</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclist.c" line="359" column="21"/>
            <symbol>i</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclist.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatch.c" line="0" column="0"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatch.c" line="241" column="2"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;s&apos; shadows outer variable" verbose="Local variable &apos;s&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatch.c" line="796" column="17" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatch.c" line="731" column="20" info="Shadowed declaration"/>
            <symbol>s</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p&apos; shadows outer argument" verbose="Local variable &apos;p&apos; shadows outer argument" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatch.c" line="797" column="12" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatch.c" line="726" column="17" info="Shadowed declaration"/>
            <symbol>p</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;f&apos; shadows outer variable" verbose="Local variable &apos;f&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatch.c" line="798" column="13" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatch.c" line="730" column="14" info="Shadowed declaration"/>
            <symbol>f</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatch.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatrix.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatrix.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcname.c" line="0" column="0"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="sscanf() without field width limits can crash with huge input data." verbose="sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\012\012Sample program that can crash:\012\012#include &lt;stdio.h&gt;\012int main()\012{\012    char c[5];\012    scanf(&quot;%s&quot;, c);\012    return 0;\012}\012\012Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.\012Source: http://linux.die.net/man/3/scanf\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" cwe="119">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcname.c" line="340" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c1&apos; can be reduced." verbose="The scope of the variable &apos;c1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcname.c" line="248" column="17"/>
            <symbol>c1</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcname.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcobjs.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcobjs.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last&apos; can be reduced." verbose="The scope of the variable &apos;last&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="196" column="25"/>
            <symbol>last</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e&apos; can be reduced." verbose="The scope of the variable &apos;e&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="522" column="21"/>
            <symbol>e</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ea&apos; can be reduced." verbose="The scope of the variable &apos;ea&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="619" column="22"/>
            <symbol>ea</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;eb&apos; can be reduced." verbose="The scope of the variable &apos;eb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="619" column="27"/>
            <symbol>eb</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;values_serialized&apos; can be reduced." verbose="The scope of the variable &apos;values_serialized&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1481" column="22"/>
            <symbol>values_serialized</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcPatternCacheRewriteFile&apos; argument 1 names different: declaration &apos;pat&apos; definition &apos;p&apos;." verbose="Function &apos;FcPatternCacheRewriteFile&apos; argument 1 names different: declaration &apos;pat&apos; definition &apos;p&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="386" column="45"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="1166" column="45"/>
            <symbol>FcPatternCacheRewriteFile</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcPatternObjectGetInteger&apos; argument 3 names different: declaration &apos;n&apos; definition &apos;id&apos;." verbose="Function &apos;FcPatternObjectGetInteger&apos; argument 3 names different: declaration &apos;n&apos; definition &apos;id&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1006" column="69"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="1127" column="69"/>
            <symbol>FcPatternObjectGetInteger</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcPatternObjectGetDouble&apos; argument 3 names different: declaration &apos;n&apos; definition &apos;id&apos;." verbose="Function &apos;FcPatternObjectGetDouble&apos; argument 3 names different: declaration &apos;n&apos; definition &apos;id&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1035" column="68"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="1130" column="68"/>
            <symbol>FcPatternObjectGetDouble</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcPatternObjectGetString&apos; argument 3 names different: declaration &apos;n&apos; definition &apos;id&apos;." verbose="Function &apos;FcPatternObjectGetString&apos; argument 3 names different: declaration &apos;n&apos; definition &apos;id&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1063" column="68"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="1133" column="68"/>
            <symbol>FcPatternObjectGetString</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcPatternObjectGetBool&apos; argument 3 names different: declaration &apos;n&apos; definition &apos;id&apos;." verbose="Function &apos;FcPatternObjectGetBool&apos; argument 3 names different: declaration &apos;n&apos; definition &apos;id&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1101" column="66"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="1142" column="66"/>
            <symbol>FcPatternObjectGetBool</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcValueListSerializeAlloc&apos; argument 2 names different: declaration &apos;pat&apos; definition &apos;vl&apos;." verbose="Function &apos;FcValueListSerializeAlloc&apos; argument 2 names different: declaration &apos;pat&apos; definition &apos;vl&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1519" column="71"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="1178" column="71"/>
            <symbol>FcValueListSerializeAlloc</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;FcValueListSerialize&apos; argument 2 names different: declaration &apos;pat&apos; definition &apos;vl&apos;." verbose="Function &apos;FcValueListSerialize&apos; argument 2 names different: declaration &apos;pat&apos; definition &apos;vl&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1551" column="66"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="1181" column="66"/>
            <symbol>FcValueListSerialize</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcptrlist.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcptrlist.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcrange.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcrange.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcserialize.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcserialize.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 37 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstat.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;p&apos; is always false" verbose="Condition &apos;p&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstat.c" line="406" column="9" info="Condition &apos;p&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstat.c" line="357" column="21" info="Assignment &apos;p=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;sizeof(struct dirent*)*lsize&apos; to function malloc is always 1024" verbose="Argument &apos;sizeof(struct dirent*)*lsize&apos; to function malloc is always 1024" cwe="570">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstat.c" line="205" column="65" info="Argument &apos;sizeof(struct dirent*)*lsize&apos; to function malloc is always 1024"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstat.c" line="199" column="20" info="Assignment &apos;lsize=128&apos;, assigned value is 128"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstat.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="0" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="701" column="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cur&apos; can be reduced." verbose="The scope of the variable &apos;cur&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="459" column="22"/>
            <symbol>cur</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;clen&apos; can be reduced." verbose="The scope of the variable &apos;clen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="627" column="10"/>
            <symbol>clen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;clen&apos; can be reduced." verbose="The scope of the variable &apos;clen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="724" column="10"/>
            <symbol>clen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="1255" column="12"/>
            <symbol>len</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="1132" column="35"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="701" column="44"/>
            <symbol>len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcweight.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcweight.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcxml.c" line="0" column="0"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcxml.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;r&apos; is assigned a value that is never used." verbose="Variable &apos;r&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcxml.c" line="1901" column="8"/>
            <symbol>r</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/ftglue.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ftglue_stream_frame_enter&apos; argument 2 names different: declaration &apos;size&apos; definition &apos;count&apos;." verbose="Function &apos;ftglue_stream_frame_enter&apos; argument 2 names different: declaration &apos;size&apos; definition &apos;count&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/ftglue.c" line="102" column="40"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/ftglue.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/ftglue.h" line="99" column="40"/>
            <symbol>ftglue_stream_frame_enter</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ftglue_face_goto_table&apos; argument 2 names different: declaration &apos;tag&apos; definition &apos;the_tag&apos;." verbose="Function &apos;ftglue_face_goto_table&apos; argument 2 names different: declaration &apos;tag&apos; definition &apos;the_tag&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/ftglue.c" line="168" column="36"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/ftglue.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/ftglue.h" line="106" column="36"/>
            <symbol>ftglue_face_goto_table</symbol>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/src/ftglue.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: fontname" verbose="Unused variable: fontname" cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-bz106632.c" line="172" column="49"/>
            <symbol>fontname</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-bz131804.c" line="130" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;iter&apos; shadows outer variable" verbose="Local variable &apos;iter&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="189" column="17" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="139" column="19" info="Shadowed declaration"/>
            <symbol>iter</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;_FcConfig::configDirs&apos; is never used." verbose="struct member &apos;_FcConfig::configDirs&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="31" column="15"/>
            <symbol>_FcConfig::configDirs</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;_FcConfig::fontDirs&apos; is never used." verbose="struct member &apos;_FcConfig::fontDirs&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="32" column="15"/>
            <symbol>_FcConfig::fontDirs</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;_FcConfig::cacheDirs&apos; is never used." verbose="struct member &apos;_FcConfig::cacheDirs&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="33" column="15"/>
            <symbol>_FcConfig::cacheDirs</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;_FcConfig::configFiles&apos; is never used." verbose="struct member &apos;_FcConfig::configFiles&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="34" column="15"/>
            <symbol>_FcConfig::configFiles</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;_FcConfig::subst&apos; is never used." verbose="struct member &apos;_FcConfig::subst&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="35" column="11"/>
            <symbol>_FcConfig::subst</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;_FcConfig::maxObjects&apos; is never used." verbose="struct member &apos;_FcConfig::maxObjects&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="36" column="10"/>
            <symbol>_FcConfig::maxObjects</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;_FcConfig::acceptGlobs&apos; is never used." verbose="struct member &apos;_FcConfig::acceptGlobs&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="37" column="15"/>
            <symbol>_FcConfig::acceptGlobs</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;_FcConfig::rejectGlobs&apos; is never used." verbose="struct member &apos;_FcConfig::rejectGlobs&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="38" column="15"/>
            <symbol>_FcConfig::rejectGlobs</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;_FcConfig::acceptPatterns&apos; is never used." verbose="struct member &apos;_FcConfig::acceptPatterns&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="39" column="16"/>
            <symbol>_FcConfig::acceptPatterns</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;_FcConfig::rejectPatterns&apos; is never used." verbose="struct member &apos;_FcConfig::rejectPatterns&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="40" column="16"/>
            <symbol>_FcConfig::rejectPatterns</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: scenario" verbose="Unused variable: scenario" cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-conf.c" line="244" column="25"/>
            <symbol>scenario</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" line="0" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="701" column="40"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!home&apos; is always true" verbose="Condition &apos;!home&apos; is always true" cwe="571">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="953" column="6" info="Condition &apos;!home&apos; is always true"/>
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="950" column="31" info="Assignment &apos;home=FcConfigHome()&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev&apos; can be reduced." verbose="The scope of the variable &apos;prev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fchash.c" line="102" column="45"/>
            <symbol>prev</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cur&apos; can be reduced." verbose="The scope of the variable &apos;cur&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="459" column="22"/>
            <symbol>cur</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;clen&apos; can be reduced." verbose="The scope of the variable &apos;clen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="627" column="10"/>
            <symbol>clen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;clen&apos; can be reduced." verbose="The scope of the variable &apos;clen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="724" column="10"/>
            <symbol>clen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="1255" column="12"/>
            <symbol>len</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="1132" column="35"/>
        </error>
        <error id="divideSizeof" severity="warning" msg="Division of result of sizeof() on pointer type." verbose="Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to." cwe="682" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcint.h" line="292" column="72"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file0="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="701" column="44"/>
            <symbol>len</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: uuid" verbose="Unused variable: uuid" cwe="563">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/test/test-hash.c" line="90" column="12"/>
            <symbol>uuid</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;DllMain&apos; is never used." verbose="The function &apos;DllMain&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="1901" column="0"/>
            <symbol>DllMain</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcAtomicOrigFile&apos; is never used." verbose="The function &apos;FcAtomicOrigFile&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcatomic.c" line="189" column="0"/>
            <symbol>FcAtomicOrigFile</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcBlanksAdd&apos; is never used." verbose="The function &apos;FcBlanksAdd&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="655" column="0"/>
            <symbol>FcBlanksAdd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcBlanksCreate&apos; is never used." verbose="The function &apos;FcBlanksCreate&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="642" column="0"/>
            <symbol>FcBlanksCreate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcBlanksDestroy&apos; is never used." verbose="The function &apos;FcBlanksDestroy&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="649" column="0"/>
            <symbol>FcBlanksDestroy</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcBlanksIsMember&apos; is never used." verbose="The function &apos;FcBlanksIsMember&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="662" column="0"/>
            <symbol>FcBlanksIsMember</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcCharSetCoverage&apos; is never used." verbose="The function &apos;FcCharSetCoverage&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="814" column="0"/>
            <symbol>FcCharSetCoverage</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcCharSetIntersect&apos; is never used." verbose="The function &apos;FcCharSetIntersect&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="490" column="0"/>
            <symbol>FcCharSetIntersect</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcCharSetIntersectCount&apos; is never used." verbose="The function &apos;FcCharSetIntersectCount&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="614" column="0"/>
            <symbol>FcCharSetIntersectCount</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcCharSetNew&apos; is never used." verbose="The function &apos;FcCharSetNew&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccharset.c" line="61" column="0"/>
            <symbol>FcCharSetNew</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcConfigAddBlank&apos; is never used." verbose="The function &apos;FcConfigAddBlank&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="676" column="0"/>
            <symbol>FcConfigAddBlank</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcConfigAddConfigFile&apos; is never used." verbose="The function &apos;FcConfigAddConfigFile&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="585" column="0"/>
            <symbol>FcConfigAddConfigFile</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcConfigAddRule&apos; is never used." verbose="The function &apos;FcConfigAddRule&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="725" column="0"/>
            <symbol>FcConfigAddRule</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcConfigAppFontClear&apos; is never used." verbose="The function &apos;FcConfigAppFontClear&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="2368" column="0"/>
            <symbol>FcConfigAppFontClear</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcConfigGetBlanks&apos; is never used." verbose="The function &apos;FcConfigGetBlanks&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="669" column="0"/>
            <symbol>FcConfigGetBlanks</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcConfigGetCache&apos; is never used." verbose="The function &apos;FcConfigGetCache&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="612" column="0"/>
            <symbol>FcConfigGetCache</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcConfigGetConfigDirs&apos; is never used." verbose="The function &apos;FcConfigGetConfigDirs&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="535" column="0"/>
            <symbol>FcConfigGetConfigDirs</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcConfigGetConfigFiles&apos; is never used." verbose="The function &apos;FcConfigGetConfigFiles&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="600" column="0"/>
            <symbol>FcConfigGetConfigFiles</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcConfigGetRescanInverval&apos; is never used." verbose="The function &apos;FcConfigGetRescanInverval&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="713" column="0"/>
            <symbol>FcConfigGetRescanInverval</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcConfigSetRescanInverval&apos; is never used." verbose="The function &apos;FcConfigSetRescanInverval&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/path_max.patch/src/fccfg.c" line="719" column="0"/>
            <symbol>FcConfigSetRescanInverval</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcDirCacheRescan&apos; is never used." verbose="The function &apos;FcDirCacheRescan&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/do_not_remove_uuid.patch/src/fcdir.c" line="350" column="0"/>
            <symbol>FcDirCacheRescan</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcDirSave&apos; is never used." verbose="The function &apos;FcDirSave&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/do_not_remove_uuid.patch/src/fcdir.c" line="436" column="0"/>
            <symbol>FcDirSave</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcFontSetMatch&apos; is never used." verbose="The function &apos;FcFontSetMatch&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatch.c" line="841" column="0"/>
            <symbol>FcFontSetMatch</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcFreeTypeCharIndex&apos; is never used." verbose="The function &apos;FcFreeTypeCharIndex&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="2289" column="0"/>
            <symbol>FcFreeTypeCharIndex</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcFreeTypeCharSetAndSpacing&apos; is never used." verbose="The function &apos;FcFreeTypeCharSetAndSpacing&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="2513" column="0"/>
            <symbol>FcFreeTypeCharSetAndSpacing</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcFreeTypeQuery&apos; is never used." verbose="The function &apos;FcFreeTypeQuery&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="2126" column="0"/>
            <symbol>FcFreeTypeQuery</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcFreeTypeQueryFace&apos; is never used." verbose="The function &apos;FcFreeTypeQueryFace&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="2117" column="0"/>
            <symbol>FcFreeTypeQueryFace</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcGetLangs&apos; is never used." verbose="The function &apos;FcGetLangs&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclang.c" line="456" column="0"/>
            <symbol>FcGetLangs</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcGetVersion&apos; is never used." verbose="The function &apos;FcGetVersion&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcinit.c" line="68" column="0"/>
            <symbol>FcGetVersion</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcMakeTempfile&apos; is never used." verbose="The function &apos;FcMakeTempfile&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fccompat.c" line="136" column="0"/>
            <symbol>FcMakeTempfile</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcMatrixRotate&apos; is never used." verbose="The function &apos;FcMatrixRotate&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatrix.c" line="76" column="0"/>
            <symbol>FcMatrixRotate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcMatrixScale&apos; is never used." verbose="The function &apos;FcMatrixScale&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatrix.c" line="92" column="0"/>
            <symbol>FcMatrixScale</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcMatrixShear&apos; is never used." verbose="The function &apos;FcMatrixShear&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcmatrix.c" line="104" column="0"/>
            <symbol>FcMatrixShear</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcNameRegisterConstants&apos; is never used." verbose="The function &apos;FcNameRegisterConstants&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/05_lcdfilterlegacy.patch/src/fcname.c" line="206" column="0"/>
            <symbol>FcNameRegisterConstants</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcNameRegisterObjectTypes&apos; is never used." verbose="The function &apos;FcNameRegisterObjectTypes&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/05_lcdfilterlegacy.patch/src/fcname.c" line="48" column="0"/>
            <symbol>FcNameRegisterObjectTypes</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcNameUnregisterConstants&apos; is never used." verbose="The function &apos;FcNameUnregisterConstants&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/05_lcdfilterlegacy.patch/src/fcname.c" line="213" column="0"/>
            <symbol>FcNameUnregisterConstants</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcNameUnregisterObjectTypes&apos; is never used." verbose="The function &apos;FcNameUnregisterObjectTypes&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/.pc/05_lcdfilterlegacy.patch/src/fcname.c" line="55" column="0"/>
            <symbol>FcNameUnregisterObjectTypes</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcObjectSetVaBuild&apos; is never used." verbose="The function &apos;FcObjectSetVaBuild&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fclist.c" line="106" column="0"/>
            <symbol>FcObjectSetVaBuild</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternAddFTFace&apos; is never used." verbose="The function &apos;FcPatternAddFTFace&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="927" column="0"/>
            <symbol>FcPatternAddFTFace</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternAddMatrix&apos; is never used." verbose="The function &apos;FcPatternAddMatrix&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="890" column="0"/>
            <symbol>FcPatternAddMatrix</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternAddWeak&apos; is never used." verbose="The function &apos;FcPatternAddWeak&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="773" column="0"/>
            <symbol>FcPatternAddWeak</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternBuild&apos; is never used." verbose="The function &apos;FcPatternBuild&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1245" column="0"/>
            <symbol>FcPatternBuild</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternEqualSubset&apos; is never used." verbose="The function &apos;FcPatternEqualSubset&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="617" column="0"/>
            <symbol>FcPatternEqualSubset</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternGetBool&apos; is never used." verbose="The function &apos;FcPatternGetBool&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1116" column="0"/>
            <symbol>FcPatternGetBool</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternGetDouble&apos; is never used." verbose="The function &apos;FcPatternGetDouble&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1057" column="0"/>
            <symbol>FcPatternGetDouble</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternGetFTFace&apos; is never used." verbose="The function &apos;FcPatternGetFTFace&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1137" column="0"/>
            <symbol>FcPatternGetFTFace</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternGetInteger&apos; is never used." verbose="The function &apos;FcPatternGetInteger&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1028" column="0"/>
            <symbol>FcPatternGetInteger</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternGetMatrix&apos; is never used." verbose="The function &apos;FcPatternGetMatrix&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1085" column="0"/>
            <symbol>FcPatternGetMatrix</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternGetRange&apos; is never used." verbose="The function &apos;FcPatternGetRange&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1186" column="0"/>
            <symbol>FcPatternGetRange</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternGetWithBinding&apos; is never used." verbose="The function &apos;FcPatternGetWithBinding&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="994" column="0"/>
            <symbol>FcPatternGetWithBinding</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternHash&apos; is never used." verbose="The function &apos;FcPatternHash&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="601" column="0"/>
            <symbol>FcPatternHash</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternRemove&apos; is never used." verbose="The function &apos;FcPatternRemove&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="809" column="0"/>
            <symbol>FcPatternRemove</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcPatternVaBuild&apos; is never used." verbose="The function &apos;FcPatternVaBuild&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcpat.c" line="1236" column="0"/>
            <symbol>FcPatternVaBuild</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcStrContainsIgnoreCase&apos; is never used." verbose="The function &apos;FcStrContainsIgnoreCase&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="346" column="0"/>
            <symbol>FcStrContainsIgnoreCase</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcStrListFirst&apos; is never used." verbose="The function &apos;FcStrListFirst&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="1360" column="0"/>
            <symbol>FcStrListFirst</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcStringIsConst&apos; is never used." verbose="The function &apos;FcStringIsConst&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcfreetype.c" line="977" column="0"/>
            <symbol>FcStringIsConst</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;FcUtf8Len&apos; is never used." verbose="The function &apos;FcUtf8Len&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/fontconfig-2.13.1/src/fcstr.c" line="621" column="0"/>
            <symbol>FcUtf8Len</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
