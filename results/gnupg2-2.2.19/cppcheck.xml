<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.90"/>
    <errors>
        <error id="syntaxError" severity="error" msg="syntax error: &lt;)" verbose="syntax error: &lt;)">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/block-ptrace-on-secret-daemons/Avoid-simple-memory-dumps-via-ptrace.patch/agent/gpg-agent.c" line="2999" column="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/block-ptrace-on-secret-daemons/Avoid-simple-memory-dumps-via-ptrace.patch/scd/scdaemon.c" line="837" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;saved_errno&apos; can be reduced." verbose="The scope of the variable &apos;saved_errno&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/block-ptrace-on-secret-daemons/Avoid-simple-memory-dumps-via-ptrace.patch/scd/scdaemon.c" line="1264" column="7"/>
            <symbol>saved_errno</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;err&apos; is always false" verbose="Condition &apos;err&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="892" column="7" info="Condition &apos;err&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="887" column="9" info="Assignment &apos;err=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tail&apos; can be reduced." verbose="The scope of the variable &apos;tail&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="1336" column="16"/>
            <symbol>tail</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp&apos; can be reduced." verbose="The scope of the variable &apos;pp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="1337" column="23"/>
            <symbol>pp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="2507" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nwritten&apos; can be reduced." verbose="The scope of the variable &apos;nwritten&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="3103" column="7"/>
            <symbol>nwritten</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;cookie_write&apos; argument 2 names different: declaration &apos;buffer&apos; definition &apos;buffer_arg&apos;." verbose="Function &apos;cookie_write&apos; argument 2 names different: declaration &apos;buffer&apos; definition &apos;buffer_arg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="3230" column="41"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="171" column="48"/>
            <symbol>cookie_write</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="2944" column="11"/>
            <symbol>err</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ASSUAN_SOCK_TOR&apos; since the value of &apos;ASSUAN_SOCK_TOR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ASSUAN_SOCK_TOR&apos; since the value of &apos;ASSUAN_SOCK_TOR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="2928" column="0"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="1963" column="11" info="err is overwritten"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="1953" column="13" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;simple_cookie_write&apos; argument 2 names different: declaration &apos;buffer&apos; definition &apos;buffer_arg&apos;." verbose="Function &apos;simple_cookie_write&apos; argument 2 names different: declaration &apos;buffer&apos; definition &apos;buffer_arg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="3305" column="48"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="177" column="55"/>
            <symbol>simple_cookie_write</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Anonymous0::rc&apos; is never used." verbose="struct member &apos;Anonymous0::rc&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="250" column="9"/>
            <symbol>Anonymous0::rc</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Anonymous0::status&apos; is never used." verbose="struct member &apos;Anonymous0::status&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="251" column="18"/>
            <symbol>Anonymous0::status</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: &lt;)" verbose="syntax error: &lt;)">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-automatically-checking-upstream-swdb.patch/dirmngr/dirmngr.c" line="2235" column="48"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: &lt;)" verbose="syntax error: &lt;)">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/dirmngr.c" line="2238" column="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/ks-engine-hkp.c" line="724" column="18"/>
            <symbol>hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi2&apos; can be reduced." verbose="The scope of the variable &apos;hi2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/ks-engine-hkp.c" line="753" column="18"/>
            <symbol>hi2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx2&apos; can be reduced." verbose="The scope of the variable &apos;idx2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/ks-engine-hkp.c" line="754" column="12"/>
            <symbol>idx2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx3&apos; can be reduced." verbose="The scope of the variable &apos;idx3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/ks-engine-hkp.c" line="754" column="18"/>
            <symbol>idx3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/ks-engine-hkp.c" line="754" column="24"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/ks-engine-hkp.c" line="830" column="14"/>
            <symbol>hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/ks-engine-hkp.c" line="1103" column="14"/>
            <symbol>hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/ks-engine-hkp.c" line="1130" column="14"/>
            <symbol>hi</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/ks-engine-hkp.c" line="458" column="19"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-hkp-Avoid-potential-race-condition-when-some.patch/dirmngr/ks-engine-hkp.c" line="727" column="18"/>
            <symbol>hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi2&apos; can be reduced." verbose="The scope of the variable &apos;hi2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-hkp-Avoid-potential-race-condition-when-some.patch/dirmngr/ks-engine-hkp.c" line="756" column="18"/>
            <symbol>hi2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx2&apos; can be reduced." verbose="The scope of the variable &apos;idx2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-hkp-Avoid-potential-race-condition-when-some.patch/dirmngr/ks-engine-hkp.c" line="757" column="12"/>
            <symbol>idx2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx3&apos; can be reduced." verbose="The scope of the variable &apos;idx3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-hkp-Avoid-potential-race-condition-when-some.patch/dirmngr/ks-engine-hkp.c" line="757" column="18"/>
            <symbol>idx3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-hkp-Avoid-potential-race-condition-when-some.patch/dirmngr/ks-engine-hkp.c" line="757" column="24"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-hkp-Avoid-potential-race-condition-when-some.patch/dirmngr/ks-engine-hkp.c" line="833" column="14"/>
            <symbol>hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-hkp-Avoid-potential-race-condition-when-some.patch/dirmngr/ks-engine-hkp.c" line="1106" column="14"/>
            <symbol>hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-hkp-Avoid-potential-race-condition-when-some.patch/dirmngr/ks-engine-hkp.c" line="1133" column="14"/>
            <symbol>hi</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-hkp-Avoid-potential-race-condition-when-some.patch/dirmngr/ks-engine-hkp.c" line="461" column="19"/>
            <symbol>err</symbol>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." verbose="%u in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-Fix-output-of-with-secret-if-a-pattern-is-given.patch/g10/keylist.c" line="301" column="3"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 3) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." verbose="%u in format string (no. 3) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-Fix-output-of-with-secret-if-a-pattern-is-given.patch/g10/keylist.c" line="864" column="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-Fix-output-of-with-secret-if-a-pattern-is-given.patch/g10/keylist.c" line="651" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hash&apos; can be reduced." verbose="The scope of the variable &apos;hash&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-Fix-output-of-with-secret-if-a-pattern-is-given.patch/g10/keylist.c" line="996" column="28"/>
            <symbol>hash</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hashbuf&apos; can be reduced." verbose="The scope of the variable &apos;hashbuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-Fix-output-of-with-secret-if-a-pattern-is-given.patch/g10/keylist.c" line="997" column="20"/>
            <symbol>hashbuf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-Fix-output-of-with-secret-if-a-pattern-is-given.patch/g10/keylist.c" line="1895" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-Fix-output-of-with-secret-if-a-pattern-is-given.patch/g10/keylist.c" line="1896" column="10"/>
            <symbol>i</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-Fix-output-of-with-secret-if-a-pattern-is-given.patch/g10/keylist.c" line="651" column="10"/>
            <symbol>rc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;any&apos; is assigned a value that is never used." verbose="Variable &apos;any&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-Fix-output-of-with-secret-if-a-pattern-is-given.patch/g10/keylist.c" line="1331" column="10"/>
            <symbol>any</symbol>
        </error>
        <error id="noValidConfiguration" severity="information" msg="This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." verbose="This file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:\012&apos;&apos; : [/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/agent/command.c:63] #error MAX_DIGEST_LEN shorter than keygrip\012BUILD_WITH_SCDAEMON : [/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/agent/command.c:63] #error MAX_DIGEST_LEN shorter than keygrip">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/agent/command.c" line="0" column="0"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="205" column="23"/>
            <symbol>i</symbol>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." verbose="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="4234" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="179" column="37"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="356" column="34"/>
            <symbol>val</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;answer&apos; can be reduced." verbose="The scope of the variable &apos;answer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="2416" column="9"/>
            <symbol>answer</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="3036" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="3080" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="3081" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="3780" column="20"/>
            <symbol>s2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s3&apos; can be reduced." verbose="The scope of the variable &apos;s3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="3780" column="25"/>
            <symbol>s3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="3781" column="10"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="3782" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;abs_date&apos; is assigned a value that is never used." verbose="Variable &apos;abs_date&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="2554" column="16"/>
            <symbol>abs_date</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;algo&apos; is assigned a value that is never used." verbose="Variable &apos;algo&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keygen.c" line="5280" column="12"/>
            <symbol>algo</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keyid.c" line="254" column="18"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keyid.c" line="420" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dp&apos; can be reduced." verbose="The scope of the variable &apos;dp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keyid.c" line="514" column="19"/>
            <symbol>dp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tp&apos; can be reduced." verbose="The scope of the variable &apos;tp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keyid.c" line="623" column="14"/>
            <symbol>tp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keyid.c" line="830" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keyid.c" line="830" column="10"/>
            <symbol>j</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: &lt;)" verbose="syntax error: &lt;)">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Allow-threads-to-interrupt-main-select-loop-wi.patch/agent/gpg-agent.c" line="3021" column="67"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_PRCTL;PR_SET_DUMPABLE&apos; since the value of &apos;PR_SET_DUMPABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_PRCTL;PR_SET_DUMPABLE&apos; since the value of &apos;PR_SET_DUMPABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Allow-threads-to-interrupt-main-select-loop-wi.patch/agent/gpg-agent.c" line="1021" column="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: &lt;)" verbose="syntax error: &lt;)">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-scheduled-checks-on-socket-when-inotify-.patch/agent/gpg-agent.c" line="3062" column="67"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_PRCTL;PR_SET_DUMPABLE&apos; since the value of &apos;PR_SET_DUMPABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_PRCTL;PR_SET_DUMPABLE&apos; since the value of &apos;PR_SET_DUMPABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-scheduled-checks-on-socket-when-inotify-.patch/agent/gpg-agent.c" line="1024" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="135" column="7"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="455" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="660" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="661" column="19"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pin&apos; can be reduced." verbose="The scope of the variable &apos;pin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="725" column="9"/>
            <symbol>pin</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pinlen&apos; can be reduced." verbose="The scope of the variable &apos;pinlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="726" column="10"/>
            <symbol>pinlen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="912" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;keyword&apos; can be reduced." verbose="The scope of the variable &apos;keyword&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="1248" column="8"/>
            <symbol>keyword</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="1249" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: &lt;)" verbose="syntax error: &lt;)">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/gpg-agent.c" line="3037" column="67"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_PRCTL;PR_SET_DUMPABLE&apos; since the value of &apos;PR_SET_DUMPABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_PRCTL;PR_SET_DUMPABLE&apos; since the value of &apos;PR_SET_DUMPABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/gpg-agent.c" line="1024" column="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: &lt;)" verbose="syntax error: &lt;)">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Create-framework-of-scheduled-timers.patch/agent/gpg-agent.c" line="3007" column="48"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_PRCTL;PR_SET_DUMPABLE&apos; since the value of &apos;PR_SET_DUMPABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_PRCTL;PR_SET_DUMPABLE&apos; since the value of &apos;PR_SET_DUMPABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Create-framework-of-scheduled-timers.patch/agent/gpg-agent.c" line="1021" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-drop-import-clean-from-default-keyserver-import-optio.patch/g10/gpg.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-drop-import-clean-from-default-keyserver-import-optio.patch/g10/gpg.c" line="1134" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tok&apos; can be reduced." verbose="The scope of the variable &apos;tok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-drop-import-clean-from-default-keyserver-import-optio.patch/g10/gpg.c" line="1898" column="9"/>
            <symbol>tok</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!checkonly&apos; is always true" verbose="Condition &apos;!checkonly&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-drop-import-clean-from-default-keyserver-import-optio.patch/g10/gpg.c" line="1584" column="6" info="Condition &apos;!checkonly&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-drop-import-clean-from-default-keyserver-import-optio.patch/g10/gpg.c" line="1463" column="33" info="Assignment &apos;checkonly=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;homedir&apos; is always false" verbose="Condition &apos;homedir&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-drop-import-clean-from-default-keyserver-import-optio.patch/g10/gpg.c" line="1639" column="6" info="Condition &apos;homedir&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-drop-import-clean-from-default-keyserver-import-optio.patch/g10/gpg.c" line="1463" column="15" info="Assignment &apos;homedir=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/import-merge-without-userid/gpg-accept-subkeys-with-a-good-revocation-but-no-self-sig.patch/g10/import.c" line="459" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/import-merge-without-userid/gpg-allow-import-of-previously-known-keys-even-without-UI.patch/g10/import.c" line="459" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" line="943" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;print_reported_error&apos; argument 2 names different: declaration &apos;skip_if_ec&apos; definition &apos;ignore_ec&apos;." verbose="Function &apos;print_reported_error&apos; argument 2 names different: declaration &apos;skip_if_ec&apos; definition &apos;ignore_ec&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" line="384" column="55"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/main.h" line="97" column="60"/>
            <symbol>print_reported_error</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;pubkey_nbits&apos; argument 2 names different: declaration &apos;pkey&apos; definition &apos;key&apos;." verbose="Function &apos;pubkey_nbits&apos; argument 2 names different: declaration &apos;pkey&apos; definition &apos;key&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" line="1645" column="37"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/main.h" line="185" column="50"/>
            <symbol>pubkey_nbits</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;mpi_print&apos; argument 1 names different: declaration &apos;stream&apos; definition &apos;fp&apos;." verbose="Function &apos;mpi_print&apos; argument 1 names different: declaration &apos;stream&apos; definition &apos;fp&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" line="1700" column="22"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/main.h" line="186" column="26"/>
            <symbol>mpi_print</symbol>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="204" column="23"/>
            <symbol>i</symbol>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." verbose="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="4233" column="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="178" column="37"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="355" column="34"/>
            <symbol>val</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;answer&apos; can be reduced." verbose="The scope of the variable &apos;answer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="2415" column="9"/>
            <symbol>answer</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="3035" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="3079" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="3080" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="3779" column="20"/>
            <symbol>s2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s3&apos; can be reduced." verbose="The scope of the variable &apos;s3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="3779" column="25"/>
            <symbol>s3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="3780" column="10"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="3781" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;abs_date&apos; is assigned a value that is never used." verbose="Variable &apos;abs_date&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="2553" column="16"/>
            <symbol>abs_date</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;algo&apos; is assigned a value that is never used." verbose="Variable &apos;algo&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Prefer-SHA-512-and-SHA-384-in-personal-digest.patch/g10/keygen.c" line="5279" column="12"/>
            <symbol>algo</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cache.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;key&apos; can be reduced." verbose="The scope of the variable &apos;key&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cache.c" line="104" column="9"/>
            <symbol>key</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="0" column="0"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &apos;EXPR &gt;= &apos;0&apos;&apos;, the comparison &apos;EXPR&apos; is always true." verbose="Redundant condition: If &apos;EXPR &gt;= &apos;0&apos;&apos;, the comparison &apos;EXPR&apos; is always true." cwe="398" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="755" column="13"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!rc&apos; is always true" verbose="Condition &apos;!rc&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="672" column="12" info="Condition &apos;!rc&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="667" column="7" info="Assuming that condition &apos;rc&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="101" column="7"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="144" column="7"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tokens&apos; can be reduced." verbose="The scope of the variable &apos;tokens&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="245" column="10"/>
            <symbol>tokens</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="246" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="702" column="11"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pin&apos; can be reduced." verbose="The scope of the variable &apos;pin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="826" column="9"/>
            <symbol>pin</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;percent&apos; can be reduced." verbose="The scope of the variable &apos;percent&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="828" column="7"/>
            <symbol>percent</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;numbuf&apos; can be reduced." verbose="The scope of the variable &apos;numbuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="829" column="8"/>
            <symbol>numbuf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;src&apos; can be reduced." verbose="The scope of the variable &apos;src&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="942" column="9"/>
            <symbol>src</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;saveflag&apos; can be reduced." verbose="The scope of the variable &apos;saveflag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="973" column="7"/>
            <symbol>saveflag</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;agent_askpin&apos; argument 4 names different: declaration &apos;inital_errtext&apos; definition &apos;initial_errtext&apos;." verbose="Function &apos;agent_askpin&apos; argument 4 names different: declaration &apos;inital_errtext&apos; definition &apos;initial_errtext&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="964" column="27"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/agent.h" line="444" column="39"/>
            <symbol>agent_askpin</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;agent_get_confirmation&apos; argument 4 names different: declaration &apos;notokay&apos; definition &apos;notok&apos;." verbose="Function &apos;agent_get_confirmation&apos; argument 4 names different: declaration &apos;notokay&apos; definition &apos;notok&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="1331" column="37"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/agent.h" line="452" column="20"/>
            <symbol>agent_get_confirmation</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ASSUAN_NO_LOGGING&apos; since the value of &apos;ASSUAN_NO_LOGGING&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ASSUAN_NO_LOGGING&apos; since the value of &apos;ASSUAN_NO_LOGGING&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="402" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="528" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="529" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="530" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="531" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="532" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="533" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="534" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="536" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="537" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-scd.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-scd.c" line="135" column="7"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-scd.c" line="457" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-scd.c" line="662" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-scd.c" line="663" column="19"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pin&apos; can be reduced." verbose="The scope of the variable &apos;pin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-scd.c" line="727" column="9"/>
            <symbol>pin</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pinlen&apos; can be reduced." verbose="The scope of the variable &apos;pinlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-scd.c" line="728" column="10"/>
            <symbol>pinlen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-scd.c" line="914" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;keyword&apos; can be reduced." verbose="The scope of the variable &apos;keyword&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-scd.c" line="1250" column="8"/>
            <symbol>keyword</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-scd.c" line="1251" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="0" column="0"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &apos;!&apos; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="1296" column="47"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;err&apos; is always false" verbose="Condition &apos;err&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="3563" column="7" info="Condition &apos;err&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="3558" column="7" info="Assuming that condition &apos;err&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bytes_to_read&apos; can be reduced." verbose="The scope of the variable &apos;bytes_to_read&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="543" column="10"/>
            <symbol>bytes_to_read</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="544" column="7"/>
            <symbol>ret</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="803" column="7"/>
            <symbol>ret</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="922" column="13"/>
            <symbol>n</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ssh_signature_encoder_rsa&apos; argument 3 names different: declaration &apos;signature&apos; definition &apos;s_signature&apos;." verbose="Function &apos;ssh_signature_encoder_rsa&apos; argument 3 names different: declaration &apos;signature&apos; definition &apos;s_signature&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="1373" column="40"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="257" column="59"/>
            <symbol>ssh_signature_encoder_rsa</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ssh_signature_encoder_dsa&apos; argument 3 names different: declaration &apos;signature&apos; definition &apos;s_signature&apos;." verbose="Function &apos;ssh_signature_encoder_dsa&apos; argument 3 names different: declaration &apos;signature&apos; definition &apos;s_signature&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="1450" column="40"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="260" column="59"/>
            <symbol>ssh_signature_encoder_dsa</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ssh_signature_encoder_ecdsa&apos; argument 2 names different: declaration &apos;signature_blob&apos; definition &apos;stream&apos;." verbose="Function &apos;ssh_signature_encoder_ecdsa&apos; argument 2 names different: declaration &apos;signature_blob&apos; definition &apos;stream&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="1546" column="40"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="262" column="59"/>
            <symbol>ssh_signature_encoder_ecdsa</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ssh_signature_encoder_ecdsa&apos; argument 3 names different: declaration &apos;signature&apos; definition &apos;s_signature&apos;." verbose="Function &apos;ssh_signature_encoder_ecdsa&apos; argument 3 names different: declaration &apos;signature&apos; definition &apos;s_signature&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="1546" column="60"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="263" column="61"/>
            <symbol>ssh_signature_encoder_ecdsa</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ssh_signature_encoder_eddsa&apos; argument 2 names different: declaration &apos;signature_blob&apos; definition &apos;stream&apos;." verbose="Function &apos;ssh_signature_encoder_eddsa&apos; argument 2 names different: declaration &apos;signature_blob&apos; definition &apos;stream&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="1636" column="40"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="265" column="59"/>
            <symbol>ssh_signature_encoder_eddsa</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ssh_signature_encoder_eddsa&apos; argument 3 names different: declaration &apos;signature&apos; definition &apos;s_signature&apos;." verbose="Function &apos;ssh_signature_encoder_eddsa&apos; argument 3 names different: declaration &apos;signature&apos; definition &apos;s_signature&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="1636" column="60"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="266" column="61"/>
            <symbol>ssh_signature_encoder_eddsa</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ssh_key_extract_comment&apos; argument 2 names different: declaration &apos;comment&apos; definition &apos;r_comment&apos;." verbose="Function &apos;ssh_key_extract_comment&apos; argument 2 names different: declaration &apos;comment&apos; definition &apos;r_comment&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="2967" column="50"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="267" column="69"/>
            <symbol>ssh_key_extract_comment</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;if(vlprev)&apos; is redundant or there is possible null pointer dereference: vl." verbose="Either the condition &apos;if(vlprev)&apos; is redundant or there is possible null pointer dereference: vl." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command.c" line="2689" column="56" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command.c" line="2689" column="47" info="Assignment from &apos;vl&apos;"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command.c" line="2695" column="10" info="Assuming that condition &apos;if(vlprev)&apos; is not redundant"/>
            <symbol>vl</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cmd&apos; can be reduced." verbose="The scope of the variable &apos;cmd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command.c" line="2866" column="13"/>
            <symbol>cmd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cmdopt&apos; can be reduced." verbose="The scope of the variable &apos;cmdopt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command.c" line="2866" column="19"/>
            <symbol>cmdopt</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command.c" line="2959" column="26"/>
            <symbol>value</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command.c" line="3289" column="10"/>
            <symbol>rc</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command.c" line="1205" column="39"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cvt-openpgp.c" line="0" column="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: passphrase" verbose="Possible null pointer dereference: passphrase" cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cvt-openpgp.c" line="966" column="23" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cvt-openpgp.c" line="1037" column="50" info="Calling function &apos;convert_from_openpgp_main&apos;, 7th argument &apos;NULL&apos; value is 0"/>
            <symbol>passphrase</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buffer&apos; can be reduced." verbose="The scope of the variable &apos;buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cvt-openpgp.c" line="583" column="22"/>
            <symbol>buffer</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cvt-openpgp.c" line="1329" column="10"/>
            <symbol>j</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;extract_private_key&apos; argument 6 names different: declaration &apos;r_format&apos; definition &apos;r_elems&apos;." verbose="Function &apos;extract_private_key&apos; argument 6 names different: declaration &apos;r_format&apos; definition &apos;r_elems&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cvt-openpgp.c" line="1195" column="35"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cvt-openpgp.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/agent.h" line="612" column="35"/>
            <symbol>extract_private_key</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;extract_private_key&apos; argument 7 names different: declaration &apos;mpi_array&apos; definition &apos;array&apos;." verbose="Function &apos;extract_private_key&apos; argument 7 names different: declaration &apos;mpi_array&apos; definition &apos;array&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cvt-openpgp.c" line="1196" column="34"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cvt-openpgp.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/agent.h" line="613" column="34"/>
            <symbol>extract_private_key</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/divert-scd.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/findkey.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;now&apos; can be reduced." verbose="The scope of the variable &apos;now&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/findkey.c" line="267" column="19"/>
            <symbol>now</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmptime&apos; can be reduced." verbose="The scope of the variable &apos;tmptime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/findkey.c" line="267" column="38"/>
            <symbol>tmptime</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;special&apos; can be reduced." verbose="The scope of the variable &apos;special&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/findkey.c" line="355" column="7"/>
            <symbol>special</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/findkey.c" line="950" column="18"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/findkey.c" line="1109" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/findkey.c" line="1420" column="18"/>
            <symbol>n</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/genkey.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hexgrip&apos; can be reduced." verbose="The scope of the variable &apos;hexgrip&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/genkey.c" line="537" column="9"/>
            <symbol>hexgrip</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;agent_genkey&apos; argument 4 names different: declaration &apos;keyparmlen&apos; definition &apos;keyparamlen&apos;." verbose="Function &apos;agent_genkey&apos; argument 4 names different: declaration &apos;keyparmlen&apos; definition &apos;keyparamlen&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/genkey.c" line="447" column="44"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/genkey.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/agent.h" line="492" column="48"/>
            <symbol>agent_genkey</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/genkey.c" line="97" column="19"/>
            <symbol>err</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c" line="0" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter" verbose="failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c" line="251" column="0"/>
        </error>
        <error id="noValidConfiguration" severity="information" msg="This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." verbose="This file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:\012&apos;&apos; : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012DOTLOCK_EXT_SYM_PREFIX : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012ENABLE_NLS : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012ENABLE_NLS;USE_SIMPLE_GETTEXT : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012ENABLE_NLS;gettext_noop : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012GPGRT_HAVE_MACRO_FUNCTION : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012GPG_ERR_SOURCE_DEFAULT : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/agent.h:25] #error GPG_ERR_SOURCE_DEFAULT already defined\012HAVE_BROKEN_TTYNAME;HAVE_TTYNAME : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_INTTYPES_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_LOCALE_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_PRCTL : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_PRCTL;PR_SET_DUMPABLE : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_SIGNAL_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_SIGPROCMASK : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32CE_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32CE_SYSTEM;HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32CE_SYSTEM;__MINGW32__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32_SYSTEM;HAVE_WINSOCK2_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012PF_UNIX : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012SIZEOF_UNSIGNED_INT=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012SIZEOF_UNSIGNED_LONG=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012SIZEOF_UNSIGNED_SHORT=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012USE_SIMPLE_GETTEXT : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012__MINGW32__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012__riscos__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c:251] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/gpg-agent.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/learncard.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/pkdecrypt.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/pksign.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/pksign.c" line="46" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/preset-passphrase.c" line="0" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/preset-passphrase.c" line="73" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/protect-tool.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/protect-tool.c" line="492" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;agent_askpin&apos; argument 4 names different: declaration &apos;inital_errtext&apos; definition &apos;initial_errtext&apos;." verbose="Function &apos;agent_askpin&apos; argument 4 names different: declaration &apos;inital_errtext&apos; definition &apos;initial_errtext&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/protect-tool.c" line="763" column="27"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/protect-tool.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/agent.h" line="444" column="39"/>
            <symbol>agent_askpin</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/protect-tool.c" line="106" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/protect-tool.c" line="115" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/protect.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sha1hash2&apos; can be reduced." verbose="The scope of the variable &apos;sha1hash2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/protect.c" line="1084" column="31"/>
            <symbol>sha1hash2</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;CLOCK_THREAD_CPUTIME_ID&apos; since the value of &apos;CLOCK_THREAD_CPUTIME_ID&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;CLOCK_THREAD_CPUTIME_ID&apos; since the value of &apos;CLOCK_THREAD_CPUTIME_ID&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/protect.c" line="118" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/t-protect.c" line="0" column="0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/t-protect.c" line="201" column="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/t-protect.c" line="43" column="7"/>
            <symbol>ret</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/trans.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/trustlist.c" line="0" column="0"/>
        </error>
        <error id="identicalConditionAfterEarlyExit" severity="warning" msg="Identical condition &apos;is_disabled&apos;, second condition is always false" verbose="Identical condition &apos;is_disabled&apos;, second condition is always false" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/trustlist.c" line="738" column="59" info="Testing identical condition &apos;is_disabled&apos;"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/trustlist.c" line="639" column="7" info="If condition &apos;is_disabled&apos; is true, the function will return/exit"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/trustlist.c" line="84" column="7"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ti&apos; can be reduced." verbose="The scope of the variable &apos;ti&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/trustlist.c" line="491" column="16"/>
            <symbol>ti</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;key&apos; can be reduced." verbose="The scope of the variable &apos;key&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/trustlist.c" line="492" column="8"/>
            <symbol>key</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/trustlist.c" line="494" column="10"/>
            <symbol>len</symbol>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &apos;EXPR == &apos; &apos;&apos;, the comparison &apos;EXPR&apos; is always true." verbose="Redundant condition: If &apos;EXPR == &apos; &apos;&apos;, the comparison &apos;EXPR&apos; is always true." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="665" column="19"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &apos;EXPR == &apos; &apos;&apos;, the comparison &apos;EXPR&apos; is always true." verbose="Redundant condition: If &apos;EXPR == &apos; &apos;&apos;, the comparison &apos;EXPR&apos; is always true." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="697" column="23"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!keys&apos; is redundant or there is possible null pointer dereference: keys." verbose="Either the condition &apos;!keys&apos; is redundant or there is possible null pointer dereference: keys." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="761" column="8" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="762" column="11" info="Assuming that condition &apos;!keys&apos; is not redundant"/>
            <symbol>keys</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="465" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: is_user" verbose="Unused variable: is_user" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="986" column="7"/>
            <symbol>is_user</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_ptr&apos; can be reduced." verbose="The scope of the variable &apos;arg_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="304" column="11"/>
            <symbol>arg_ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="305" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="695" column="25"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1300" column="8"/>
            <symbol>tmp</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1029" column="47"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1037" column="62"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1303" column="24"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1308" column="25"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1310" column="30"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1313" column="27"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1331" column="42"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1344" column="46"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1350" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1353" column="36"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1362" column="41"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1367" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1372" column="47"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1380" column="35"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1390" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1397" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1402" column="37"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1406" column="33"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1411" column="40"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1413" column="41"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1421" column="48"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1423" column="49"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1430" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1434" column="32"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1438" column="56"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1442" column="28"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1443" column="25"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1456" column="33"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1458" column="34"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1459" column="44"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1463" column="31"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1466" column="29"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1469" column="29"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1472" column="23"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1475" column="23"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1479" column="25"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1492" column="40"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1498" column="25"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1500" column="30"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1509" column="29"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1511" column="34"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="1513" column="42"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;alias_def_s::value&apos; is never used." verbose="struct member &apos;alias_def_s::value&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.c" line="265" column="17"/>
            <symbol>alias_def_s::value</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/asshelp.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/asshelp.c" line="179" column="32"/>
            <symbol>value</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;argv&apos; can be reduced." verbose="The scope of the variable &apos;argv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/asshelp.c" line="379" column="15"/>
            <symbol>argv</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;1dotlock_create&apos; is assigned a value that is never used." verbose="Variable &apos;1dotlock_create&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/asshelp.c" line="284" column="9"/>
            <symbol>1dotlock_create</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/asshelp2.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;n_good&apos; is always true" verbose="Condition &apos;n_good&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.c" line="1020" column="12" info="Condition &apos;n_good&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.c" line="1018" column="29" info="Assuming that condition &apos;!n_good&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.c" line="147" column="7"/>
            <symbol>idx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_ptr&apos; can be reduced." verbose="The scope of the variable &apos;arg_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.c" line="449" column="11"/>
            <symbol>arg_ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_ptr&apos; can be reduced." verbose="The scope of the variable &apos;arg_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.c" line="551" column="11"/>
            <symbol>arg_ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.c" line="637" column="18"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.c" line="700" column="7"/>
            <symbol>idx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;algo&apos; can be reduced." verbose="The scope of the variable &apos;algo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.c" line="755" column="7"/>
            <symbol>algo</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;audit_print_result&apos; argument 2 names different: declaration &apos;stream&apos; definition &apos;out&apos;." verbose="Function &apos;audit_print_result&apos; argument 2 names different: declaration &apos;stream&apos; definition &apos;out&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.c" line="1163" column="48"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/audit.h" line="221" column="53"/>
            <symbol>audit_print_result</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/b64dec.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/b64enc.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/call-gpg.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ccparray.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ccparray_get&apos; argument 2 names different: declaration &apos;r_nelems&apos; definition &apos;r_count&apos;." verbose="Function &apos;ccparray_get&apos; argument 2 names different: declaration &apos;r_nelems&apos; definition &apos;r_count&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ccparray.c" line="127" column="40"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ccparray.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ccparray.h" line="48" column="53"/>
            <symbol>ccparray_get</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/compliance.c" line="0" column="0"/>
        </error>
        <error id="duplicateBranch" severity="style" msg="Found duplicate branches for &apos;if&apos; and &apos;else&apos;." verbose="Finding the same code in an &apos;if&apos; and related &apos;else&apos; branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/compliance.c" line="491" column="8"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/compliance.c" line="515" column="3"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/convert.c" line="0" column="0"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;s&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;s&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/convert.c" line="208" column="9" info="s is overwritten"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/convert.c" line="201" column="17" info="s is initialized"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/convert.c" line="202" column="7"/>
            <symbol>idx</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/dotlock.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;lastpid == -1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/dotlock.c" line="1121" column="15"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/dotlock.c" line="1012" column="18" info="&apos;lastpid&apos; is assigned value &apos;-1&apos; here."/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DIRSEP_C;EXTSEP_S&apos; since the value of &apos;DIRSEP_C&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DIRSEP_C;EXTSEP_S&apos; since the value of &apos;DIRSEP_C&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/dotlock.c" line="663" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DIRSEP_C;EXTSEP_S&apos; since the value of &apos;EXTSEP_S&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DIRSEP_C;EXTSEP_S&apos; since the value of &apos;EXTSEP_S&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/dotlock.c" line="665" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DIRSEP_C;EXTSEP_S&apos; since the value of &apos;EXTSEP_S&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DIRSEP_C;EXTSEP_S&apos; since the value of &apos;EXTSEP_S&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/dotlock.c" line="759" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 37 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;max_fds == -1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="171" column="15"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="99" column="18" info="&apos;max_fds&apos; is assigned value &apos;-1&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="193" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;except_start&apos; can be reduced." verbose="The scope of the variable &apos;except_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="193" column="14"/>
            <symbol>except_start</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="282" column="10"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="839" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gnupg_spawn_process&apos; argument 3 names different: declaration &apos;execpt&apos; definition &apos;except&apos;." verbose="Function &apos;gnupg_spawn_process&apos; argument 3 names different: declaration &apos;execpt&apos; definition &apos;except&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="421" column="27"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp.h" line="123" column="27"/>
            <symbol>gnupg_spawn_process</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: narray" verbose="Unused variable: narray" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="235" column="10"/>
            <symbol>narray</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: fd" verbose="Unused variable: fd" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="236" column="7"/>
            <symbol>fd</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: max_fd" verbose="Unused variable: max_fd" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="236" column="11"/>
            <symbol>max_fd</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: idx" verbose="Unused variable: idx" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="236" column="19"/>
            <symbol>idx</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rl" verbose="Unused variable: rl" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="101" column="17"/>
            <symbol>rl</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_GETRLIMIT;RLIMIT_NOFILE&apos; since the value of &apos;RLIMIT_NOFILE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_GETRLIMIT;RLIMIT_NOFILE&apos; since the value of &apos;RLIMIT_NOFILE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="141" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_GETRLIMIT;RLIMIT_OFILE&apos; since the value of &apos;RLIMIT_OFILE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_GETRLIMIT;RLIMIT_OFILE&apos; since the value of &apos;RLIMIT_OFILE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="146" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="117" column="17"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-posix.c" line="118" column="9"/>
            <symbol>x</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;max_fds == -1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" line="114" column="15"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" line="107" column="18" info="&apos;max_fds&apos; is assigned value &apos;-1&apos; here."/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gnupg_spawn_process&apos; argument 3 names different: declaration &apos;execpt&apos; definition &apos;except&apos;." verbose="Function &apos;gnupg_spawn_process&apos; argument 3 names different: declaration &apos;execpt&apos; definition &apos;except&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" line="402" column="27"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp.h" line="123" column="27"/>
            <symbol>gnupg_spawn_process</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: narray" verbose="Unused variable: narray" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" line="143" column="10"/>
            <symbol>narray</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: fd" verbose="Unused variable: fd" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" line="144" column="7"/>
            <symbol>fd</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: max_fd" verbose="Unused variable: max_fd" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" line="144" column="11"/>
            <symbol>max_fd</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: idx" verbose="Unused variable: idx" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" line="144" column="19"/>
            <symbol>idx</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;inpipe[0]&apos; is assigned a value that is never used." verbose="Variable &apos;inpipe[0]&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" line="463" column="21"/>
            <symbol>inpipe[0]</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;outpipe[0]&apos; is assigned a value that is never used." verbose="Variable &apos;outpipe[0]&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" line="487" column="22"/>
            <symbol>outpipe[0]</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;errpipe[0]&apos; is assigned a value that is never used." verbose="Variable &apos;errpipe[0]&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32.c" line="517" column="22"/>
            <symbol>errpipe[0]</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32ce.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &apos;max_fds == -1&apos; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32ce.c" line="264" column="15"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32ce.c" line="257" column="18" info="&apos;max_fds&apos; is assigned value &apos;-1&apos; here."/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gnupg_spawn_process&apos; argument 3 names different: declaration &apos;execpt&apos; definition &apos;except&apos;." verbose="Function &apos;gnupg_spawn_process&apos; argument 3 names different: declaration &apos;execpt&apos; definition &apos;except&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32ce.c" line="518" column="27"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32ce.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp.h" line="123" column="27"/>
            <symbol>gnupg_spawn_process</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gnupg_wait_process&apos; argument 4 names different: declaration &apos;r_exitcode&apos; definition &apos;exitcode&apos;." verbose="Function &apos;gnupg_wait_process&apos; argument 4 names different: declaration &apos;r_exitcode&apos; definition &apos;exitcode&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32ce.c" line="743" column="68"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32ce.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp.h" line="169" column="38"/>
            <symbol>gnupg_wait_process</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: narray" verbose="Unused variable: narray" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32ce.c" line="290" column="10"/>
            <symbol>narray</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: fd" verbose="Unused variable: fd" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32ce.c" line="291" column="7"/>
            <symbol>fd</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: max_fd" verbose="Unused variable: max_fd" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32ce.c" line="291" column="11"/>
            <symbol>max_fd</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: idx" verbose="Unused variable: idx" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exechelp-w32ce.c" line="291" column="19"/>
            <symbol>idx</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exectool.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/exectool.c" line="73" column="7"/>
            <symbol>c</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/get-passphrase.c" line="0" column="0"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Anonymous2::pinentry_user_data&apos; is never used." verbose="struct member &apos;Anonymous2::pinentry_user_data&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/get-passphrase.c" line="54" column="15"/>
            <symbol>Anonymous2::pinentry_user_data</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" line="0" column="0"/>
        </error>
        <error id="asctimeCalled" severity="style" msg="Obsolete function &apos;asctime&apos; called. It is recommended to use &apos;strftime&apos; instead." verbose="Obsolete function &apos;asctime&apos; called. It is recommended to use &apos;strftime&apos; instead." cwe="477">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" line="717" column="20"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &apos;EXPR == &apos; &apos;&apos;, the comparison &apos;EXPR&apos; is always true." verbose="Redundant condition: If &apos;EXPR == &apos; &apos;&apos;, the comparison &apos;EXPR&apos; is always true." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" line="498" column="21"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;newtime==(time_t)-1&apos; is always false" verbose="Condition &apos;newtime==(time_t)-1&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" line="136" column="26" info="Condition &apos;newtime==(time_t)-1&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" line="128" column="16" info="Assuming that condition &apos;newtime==(time_t)-1&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tp&apos; can be reduced." verbose="The scope of the variable &apos;tp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" line="634" column="14"/>
            <symbol>tp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tp&apos; can be reduced." verbose="The scope of the variable &apos;tp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" line="658" column="14"/>
            <symbol>tp</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;strtimevalue&apos; argument 1 names different: declaration &apos;stamp&apos; definition &apos;value&apos;." verbose="Function &apos;strtimevalue&apos; argument 1 names different: declaration &apos;stamp&apos; definition &apos;value&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" line="565" column="19"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.h" line="58" column="31"/>
            <symbol>strtimevalue</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dump_isotime&apos; argument 1 names different: declaration &apos;atime&apos; definition &apos;t&apos;." verbose="Function &apos;dump_isotime&apos; argument 1 names different: declaration &apos;atime&apos; definition &apos;t&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" line="887" column="37"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.h" line="66" column="42"/>
            <symbol>dump_isotime</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gpgrlhelp.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/helpfile.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/helpfile.c" line="165" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/helpfile.c" line="166" column="23"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/helpfile.c" line="239" column="22"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/helpfile.c" line="240" column="11"/>
            <symbol>count</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/homedir.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/homedir.c" line="182" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/homedir.c" line="306" column="27"/>
            <symbol>p</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GNUPG_DEFAULT_AGENT&apos; since the value of &apos;GNUPG_DEFAULT_AGENT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GNUPG_DEFAULT_AGENT&apos; since the value of &apos;GNUPG_DEFAULT_AGENT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/homedir.c" line="1081" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GNUPG_DEFAULT_DIRMNGR&apos; since the value of &apos;GNUPG_DEFAULT_DIRMNGR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GNUPG_DEFAULT_DIRMNGR&apos; since the value of &apos;GNUPG_DEFAULT_DIRMNGR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/homedir.c" line="1102" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GNUPG_DEFAULT_DIRMNGR_LDAP&apos; since the value of &apos;GNUPG_DEFAULT_DIRMNGR_LDAP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GNUPG_DEFAULT_DIRMNGR_LDAP&apos; since the value of &apos;GNUPG_DEFAULT_DIRMNGR_LDAP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/homedir.c" line="1116" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GNUPG_DEFAULT_PINENTRY&apos; since the value of &apos;GNUPG_DEFAULT_PINENTRY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GNUPG_DEFAULT_PINENTRY&apos; since the value of &apos;GNUPG_DEFAULT_PINENTRY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/homedir.c" line="1088" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GNUPG_DEFAULT_PROTECT_TOOL&apos; since the value of &apos;GNUPG_DEFAULT_PROTECT_TOOL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GNUPG_DEFAULT_PROTECT_TOOL&apos; since the value of &apos;GNUPG_DEFAULT_PROTECT_TOOL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/homedir.c" line="1109" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/i18n.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/init.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;needed&apos; can be reduced." verbose="The scope of the variable &apos;needed&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="788" column="10"/>
            <symbol>needed</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;blen&apos; can be reduced." verbose="The scope of the variable &apos;blen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="916" column="11"/>
            <symbol>blen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="916" column="17"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;desc&apos; can be reduced." verbose="The scope of the variable &apos;desc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1130" column="12"/>
            <symbol>desc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1164" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;desc&apos; can be reduced." verbose="The scope of the variable &apos;desc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1255" column="8"/>
            <symbol>desc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;desc&apos; can be reduced." verbose="The scope of the variable &apos;desc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1666" column="8"/>
            <symbol>desc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1762" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="2105" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nread&apos; can be reduced." verbose="The scope of the variable &apos;nread&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="2217" column="10"/>
            <symbol>nread</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="2220" column="7"/>
            <symbol>err</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;iobuf_close&apos; argument 1 names different: declaration &apos;iobuf&apos; definition &apos;a&apos;." verbose="Function &apos;iobuf_close&apos; argument 1 names different: declaration &apos;iobuf&apos; definition &apos;a&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1122" column="22"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.h" line="345" column="26"/>
            <symbol>iobuf_close</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;iobuf_cancel&apos; argument 1 names different: declaration &apos;iobuf&apos; definition &apos;a&apos;." verbose="Function &apos;iobuf_cancel&apos; argument 1 names different: declaration &apos;iobuf&apos; definition &apos;a&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1162" column="23"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.h" line="351" column="27"/>
            <symbol>iobuf_cancel</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;iobuf_read&apos; argument 2 names different: declaration &apos;buf&apos; definition &apos;buffer&apos;." verbose="Function &apos;iobuf_read&apos; argument 2 names different: declaration &apos;buf&apos; definition &apos;buffer&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1988" column="30"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.h" line="486" column="34"/>
            <symbol>iobuf_read</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;iobuf_write&apos; argument 2 names different: declaration &apos;buf&apos; definition &apos;buffer&apos;." verbose="Function &apos;iobuf_write&apos; argument 2 names different: declaration &apos;buf&apos; definition &apos;buffer&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="2124" column="37"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.h" line="531" column="41"/>
            <symbol>iobuf_write</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;size&apos; is always true" verbose="Condition &apos;size&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="528" column="12" info="Condition &apos;size&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="519" column="11" info="Assuming that condition &apos;size&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="735" column="8"/>
            <symbol>n</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ksba-io-support.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ksba-io-support.c" line="390" column="7"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;radbuf&apos; can be reduced." verbose="The scope of the variable &apos;radbuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ksba-io-support.c" line="498" column="18"/>
            <symbol>radbuf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ksba-io-support.c" line="499" column="7"/>
            <symbol>c</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c&apos; is assigned a value that is never used." verbose="Variable &apos;c&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ksba-io-support.c" line="390" column="9"/>
            <symbol>c</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/logging.c" line="0" column="0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: (struct sockaddr_un*)0" verbose="Null pointer dereference: (struct sockaddr_un*)0" cwe="476" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/logging.c" line="266" column="29" info="Null pointer dereference"/>
            <symbol>(struct sockaddr_un*)0</symbol>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: (struct sockaddr_un*)0" verbose="Null pointer dereference: (struct sockaddr_un*)0" cwe="476" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/logging.c" line="278" column="29" info="Null pointer dereference"/>
            <symbol>(struct sockaddr_un*)0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nwritten&apos; can be reduced." verbose="The scope of the variable &apos;nwritten&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/logging.c" line="157" column="7"/>
            <symbol>nwritten</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;AF_INET6;HAVE_INET_PTON;INET6_ADDRSTRLEN;PF_INET&apos; since the value of &apos;AF_INET6&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;AF_INET6;HAVE_INET_PTON;INET6_ADDRSTRLEN;PF_INET&apos; since the value of &apos;AF_INET6&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/logging.c" line="307" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;AF_INET6;HAVE_INET_PTON;INET6_ADDRSTRLEN;PF_INET&apos; since the value of &apos;PF_INET&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;AF_INET6;HAVE_INET_PTON;INET6_ADDRSTRLEN;PF_INET&apos; since the value of &apos;PF_INET&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/logging.c" line="244" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mapstrings.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mbox-util.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mbox-util.c" line="183" column="10"/>
            <symbol>len</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;is_valid_mailbox_mem&apos; argument 1 names different: declaration &apos;buffer&apos; definition &apos;name_arg&apos;." verbose="Function &apos;is_valid_mailbox_mem&apos; argument 1 names different: declaration &apos;buffer&apos; definition &apos;name_arg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mbox-util.c" line="151" column="35"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mbox-util.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mbox-util.h" line="24" column="39"/>
            <symbol>is_valid_mailbox_mem</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;is_valid_mailbox_mem&apos; argument 2 names different: declaration &apos;length&apos; definition &apos;namelen&apos;." verbose="Function &apos;is_valid_mailbox_mem&apos; argument 2 names different: declaration &apos;length&apos; definition &apos;namelen&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mbox-util.c" line="151" column="52"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mbox-util.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mbox-util.h" line="24" column="54"/>
            <symbol>is_valid_mailbox_mem</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/membuf.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" line="336" column="7"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lenbytes&apos; can be reduced." verbose="The scope of the variable &apos;lenbytes&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" line="337" column="7"/>
            <symbol>lenbytes</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;print_utf8_buffer3&apos; argument 1 names different: declaration &apos;fp&apos; definition &apos;stream&apos;." verbose="Function &apos;print_utf8_buffer3&apos; argument 1 names different: declaration &apos;fp&apos; definition &apos;stream&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" line="207" column="31"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/util.h" line="306" column="36"/>
            <symbol>print_utf8_buffer3</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;print_utf8_buffer2&apos; argument 1 names different: declaration &apos;fp&apos; definition &apos;stream&apos;." verbose="Function &apos;print_utf8_buffer2&apos; argument 1 names different: declaration &apos;fp&apos; definition &apos;stream&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" line="215" column="31"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/util.h" line="308" column="36"/>
            <symbol>print_utf8_buffer2</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;print_utf8_buffer&apos; argument 1 names different: declaration &apos;fp&apos; definition &apos;stream&apos;." verbose="Function &apos;print_utf8_buffer&apos; argument 1 names different: declaration &apos;fp&apos; definition &apos;stream&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" line="226" column="30"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/util.h" line="309" column="35"/>
            <symbol>print_utf8_buffer</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;try_make_printable_string&apos; argument 1 names different: declaration &apos;p&apos; definition &apos;p_arg&apos;." verbose="Function &apos;try_make_printable_string&apos; argument 1 names different: declaration &apos;p&apos; definition &apos;p_arg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" line="265" column="40"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/util.h" line="313" column="46"/>
            <symbol>try_make_printable_string</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mischelp.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;zone&apos; is always false" verbose="Condition &apos;zone&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mischelp.c" line="187" column="6" info="Condition &apos;zone&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mischelp.c" line="183" column="8" info="Assignment &apos;zone=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mkdir_p.c" line="0" column="0"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;space*sizeof(char*)&apos; to function gcry_malloc is always 8" verbose="Argument &apos;space*sizeof(char*)&apos; to function gcry_malloc is always 8" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mkdir_p.c" line="154" column="10" info="Argument &apos;space*sizeof(char*)&apos; to function gcry_malloc is always 8"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mkdir_p.c" line="151" column="15" info="Assignment &apos;space=1&apos;, assigned value is 1"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/name-value.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;nvc_delete&apos; argument 2 names different: declaration &apos;pke&apos; definition &apos;entry&apos;." verbose="Function &apos;nvc_delete&apos; argument 2 names different: declaration &apos;pke&apos; definition &apos;entry&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/name-value.c" line="502" column="29"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/name-value.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/name-value.h" line="89" column="34"/>
            <symbol>nvc_delete</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/openpgp-oid.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/openpgp-oid.c" line="112" column="23"/>
            <symbol>val</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/openpgp-oid.c" line="344" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;openpgp_oid_to_curve&apos; argument 1 names different: declaration &apos;oid&apos; definition &apos;oidstr&apos;." verbose="Function &apos;openpgp_oid_to_curve&apos; argument 1 names different: declaration &apos;oid&apos; definition &apos;oidstr&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/openpgp-oid.c" line="382" column="35"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/openpgp-oid.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/util.h" line="230" column="47"/>
            <symbol>openpgp_oid_to_curve</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;openpgp_enum_curves&apos; argument 1 names different: declaration &apos;idxp&apos; definition &apos;iterp&apos;." verbose="Function &apos;openpgp_enum_curves&apos; argument 1 names different: declaration &apos;idxp&apos; definition &apos;iterp&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/openpgp-oid.c" line="417" column="27"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/openpgp-oid.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/util.h" line="231" column="39"/>
            <symbol>openpgp_enum_curves</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/percent.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/percent.c" line="148" column="18"/>
            <symbol>n</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/recsel.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/recsel.c" line="515" column="15"/>
            <symbol>value</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;recsel_parse_expr&apos; argument 2 names different: declaration &apos;expr&apos; definition &apos;expression&apos;." verbose="Function &apos;recsel_parse_expr&apos; argument 2 names different: declaration &apos;expr&apos; definition &apos;expression&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/recsel.c" line="197" column="57"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/recsel.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/recsel.h" line="35" column="69"/>
            <symbol>recsel_parse_expr</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/server-help.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/server-help.c" line="93" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/session-env.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_depth2&apos; can be reduced." verbose="The scope of the variable &apos;last_depth2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" line="432" column="27"/>
            <symbol>last_depth2</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;cmp_simple_canon_sexp&apos; argument 1 names different: declaration &apos;a&apos; definition &apos;a_orig&apos;." verbose="Function &apos;cmp_simple_canon_sexp&apos; argument 1 names different: declaration &apos;a&apos; definition &apos;a_orig&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" line="232" column="45"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/util.h" line="185" column="49"/>
            <symbol>cmp_simple_canon_sexp</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;cmp_simple_canon_sexp&apos; argument 2 names different: declaration &apos;b&apos; definition &apos;b_orig&apos;." verbose="Function &apos;cmp_simple_canon_sexp&apos; argument 2 names different: declaration &apos;b&apos; definition &apos;b_orig&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" line="233" column="45"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/util.h" line="185" column="73"/>
            <symbol>cmp_simple_canon_sexp</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;make_canon_sexp_from_rsa_pk&apos; argument 1 names different: declaration &apos;m&apos; definition &apos;m_arg&apos;." verbose="Function &apos;make_canon_sexp_from_rsa_pk&apos; argument 1 names different: declaration &apos;m&apos; definition &apos;m_arg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" line="363" column="42"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/util.h" line="189" column="57"/>
            <symbol>make_canon_sexp_from_rsa_pk</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;make_canon_sexp_from_rsa_pk&apos; argument 3 names different: declaration &apos;e&apos; definition &apos;e_arg&apos;." verbose="Function &apos;make_canon_sexp_from_rsa_pk&apos; argument 3 names different: declaration &apos;e&apos; definition &apos;e_arg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" line="364" column="42"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/util.h" line="190" column="57"/>
            <symbol>make_canon_sexp_from_rsa_pk</symbol>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;rsa_n_len&apos; is not assigned a value." verbose="Variable &apos;rsa_n_len&apos; is not assigned a value." cwe="665">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" line="435" column="10"/>
            <symbol>rsa_n_len</symbol>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;rsa_e_len&apos; is not assigned a value." verbose="Variable &apos;rsa_e_len&apos; is not assigned a value." cwe="665">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" line="435" column="21"/>
            <symbol>rsa_e_len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/signal.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/simple-pwquery.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;pw==NULL&apos; is always true" verbose="Condition &apos;pw==NULL&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/simple-pwquery.c" line="444" column="16" info="Condition &apos;pw==NULL&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/simple-pwquery.c" line="374" column="14" info="Assignment &apos;pw=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/simple-pwquery.c" line="128" column="10"/>
            <symbol>rc</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SETLOCALE;LC_CTYPE&apos; since the value of &apos;LC_CTYPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SETLOCALE;LC_CTYPE&apos; since the value of &apos;LC_CTYPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/simple-pwquery.c" line="161" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SETLOCALE;LC_CTYPE&apos; since the value of &apos;LC_CTYPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SETLOCALE;LC_CTYPE&apos; since the value of &apos;LC_CTYPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/simple-pwquery.c" line="170" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SETLOCALE;LC_CTYPE&apos; since the value of &apos;LC_CTYPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SETLOCALE;LC_CTYPE&apos; since the value of &apos;LC_CTYPE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/simple-pwquery.c" line="175" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SETLOCALE;LC_MESSAGES&apos; since the value of &apos;LC_MESSAGES&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SETLOCALE;LC_MESSAGES&apos; since the value of &apos;LC_MESSAGES&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/simple-pwquery.c" line="183" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SETLOCALE;LC_MESSAGES&apos; since the value of &apos;LC_MESSAGES&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SETLOCALE;LC_MESSAGES&apos; since the value of &apos;LC_MESSAGES&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/simple-pwquery.c" line="192" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SETLOCALE;LC_MESSAGES&apos; since the value of &apos;LC_MESSAGES&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SETLOCALE;LC_MESSAGES&apos; since the value of &apos;LC_MESSAGES&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/simple-pwquery.c" line="197" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ssh-utils.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ssh-utils.c" line="46" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/status.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;get_status_string&apos; argument 1 names different: declaration &apos;code&apos; definition &apos;no&apos;." verbose="Function &apos;get_status_string&apos; argument 1 names different: declaration &apos;code&apos; definition &apos;no&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/status.c" line="40" column="25"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/status.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/status.h" line="165" column="36"/>
            <symbol>get_status_string</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!home&apos; is always true" verbose="Condition &apos;!home&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="447" column="15" info="Condition &apos;!home&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="446" column="18" info="Assignment &apos;home=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;p&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;p&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="806" column="9" info="p is overwritten"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="804" column="11" info="p is initialized"/>
            <symbol>p</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;p&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;p&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="819" column="9" info="p is overwritten"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="817" column="11" info="p is initialized"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="173" column="11"/>
            <symbol>d</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="174" column="17"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="1141" column="18"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_ptr&apos; can be reduced." verbose="The scope of the variable &apos;arg_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="1173" column="11"/>
            <symbol>arg_ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_ptr&apos; can be reduced." verbose="The scope of the variable &apos;arg_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="1192" column="11"/>
            <symbol>arg_ptr</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;memistr&apos; argument 1 names different: declaration &apos;buf&apos; definition &apos;buffer&apos;." verbose="Function &apos;memistr&apos; argument 1 names different: declaration &apos;buf&apos; definition &apos;buffer&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="114" column="22"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.h" line="42" column="34"/>
            <symbol>memistr</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ascii_memistr&apos; argument 1 names different: declaration &apos;buf&apos; definition &apos;buffer&apos;." verbose="Function &apos;ascii_memistr&apos; argument 1 names different: declaration &apos;buf&apos; definition &apos;buffer&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="139" column="29"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.h" line="83" column="41"/>
            <symbol>ascii_memistr</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;trim_spaces&apos; argument 1 names different: declaration &apos;string&apos; definition &apos;str&apos;." verbose="Function &apos;trim_spaces&apos; argument 1 names different: declaration &apos;string&apos; definition &apos;str&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="194" column="20"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.h" line="44" column="26"/>
            <symbol>trim_spaces</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ascii_memcasecmp&apos; argument 1 names different: declaration &apos;a&apos; definition &apos;a_arg&apos;." verbose="Function &apos;ascii_memcasecmp&apos; argument 1 names different: declaration &apos;a&apos; definition &apos;a_arg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="867" column="31"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.h" line="82" column="35"/>
            <symbol>ascii_memcasecmp</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ascii_memcasecmp&apos; argument 2 names different: declaration &apos;b&apos; definition &apos;b_arg&apos;." verbose="Function &apos;ascii_memcasecmp&apos; argument 2 names different: declaration &apos;b&apos; definition &apos;b_arg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="867" column="50"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.h" line="82" column="50"/>
            <symbol>ascii_memcasecmp</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;strlwr&apos; argument 1 names different: declaration &apos;a&apos; definition &apos;s&apos;." verbose="Function &apos;strlwr&apos; argument 1 names different: declaration &apos;a&apos; definition &apos;s&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="1004" column="14"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.h" line="101" column="20"/>
            <symbol>strlwr</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;format_text&apos; argument 1 names different: declaration &apos;text&apos; definition &apos;text_in&apos;." verbose="Function &apos;format_text&apos; argument 1 names different: declaration &apos;text&apos; definition &apos;text_in&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="1499" column="26"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.h" line="163" column="32"/>
            <symbol>format_text</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;buf&apos; is assigned a value that is never used." verbose="Variable &apos;buf&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="116" column="28"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="72" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/strlist.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;strlist_rev&apos; argument 1 names different: declaration &apos;haystack&apos; definition &apos;list&apos;." verbose="Function &apos;strlist_rev&apos; argument 1 names different: declaration &apos;haystack&apos; definition &apos;list&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/strlist.c" line="266" column="25"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/strlist.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/strlist.h" line="64" column="35"/>
            <symbol>strlist_rev</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 38 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!name&apos; is redundant or there is possible null pointer dereference: name." verbose="Either the condition &apos;!name&apos; is redundant or there is possible null pointer dereference: name." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="939" column="17" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="944" column="11" info="Assuming that condition &apos;!name&apos; is not redundant"/>
            <symbol>name</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buffer&apos; can be reduced." verbose="The scope of the variable &apos;buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="1013" column="9"/>
            <symbol>buffer</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gnupg_mkdtemp&apos; argument 1 names different: declaration &apos;template&apos; definition &apos;tmpl&apos;." verbose="Function &apos;gnupg_mkdtemp&apos; argument 1 names different: declaration &apos;template&apos; definition &apos;tmpl&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="828" column="22"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.h" line="71" column="28"/>
            <symbol>gnupg_mkdtemp</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;F_GETFD&apos; since the value of &apos;F_GETFD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;F_GETFD&apos; since the value of &apos;F_GETFD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="560" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;F_GETFD&apos; since the value of &apos;F_GETFD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;F_GETFD&apos; since the value of &apos;F_GETFD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="568" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;F_GETFD&apos; since the value of &apos;F_GETFD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;F_GETFD&apos; since the value of &apos;F_GETFD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="576" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="459" column="16"/>
            <symbol>value</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-b64.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-ccparray.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-convert.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-exechelp.c" line="0" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-exechelp.c" line="182" column="7"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-exechelp.c" line="182" column="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-exechelp.c" line="182" column="11"/>
            <symbol>argc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argv&apos; is assigned a value that is never used." verbose="Variable &apos;argv&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-exechelp.c" line="182" column="19"/>
            <symbol>argv</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-exectool.c" line="0" column="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-exectool.c" line="221" column="11"/>
            <symbol>argc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argv&apos; is assigned a value that is never used." verbose="Variable &apos;argv&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-exectool.c" line="221" column="19"/>
            <symbol>argv</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-gettime.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-gettime.c" line="75" column="10"/>
            <symbol>val</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-gettime.c" line="161" column="10"/>
            <symbol>result</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;okay&apos; can be reduced." verbose="The scope of the variable &apos;okay&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-gettime.c" line="229" column="7"/>
            <symbol>okay</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-helpfile.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-iobuf.c" line="283" column="9"/>
            <symbol>c</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-mbox-util.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-name-value.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-openpgp-oid.c" line="0" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-openpgp-oid.c" line="237" column="7"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-openpgp-oid.c" line="237" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;string&apos; can be reduced." verbose="The scope of the variable &apos;string&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-openpgp-oid.c" line="58" column="9"/>
            <symbol>string</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-openpgp-oid.c" line="59" column="18"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;length&apos; can be reduced." verbose="The scope of the variable &apos;length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-openpgp-oid.c" line="61" column="10"/>
            <symbol>length</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;string&apos; can be reduced." verbose="The scope of the variable &apos;string&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-openpgp-oid.c" line="127" column="9"/>
            <symbol>string</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-openpgp-oid.c" line="128" column="18"/>
            <symbol>p</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-openpgp-oid.c" line="237" column="11"/>
            <symbol>argc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argv&apos; is assigned a value that is never used." verbose="Variable &apos;argv&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-openpgp-oid.c" line="237" column="19"/>
            <symbol>argv</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-percent.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-percent.c" line="69" column="9"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf2&apos; can be reduced." verbose="The scope of the variable &apos;buf2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-percent.c" line="69" column="15"/>
            <symbol>buf2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-percent.c" line="71" column="10"/>
            <symbol>len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-recsel.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-session-env.c" line="0" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-session-env.c" line="296" column="7"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-session-env.c" line="296" column="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-session-env.c" line="265" column="12"/>
            <symbol>buf</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-session-env.c" line="296" column="11"/>
            <symbol>argc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argv&apos; is assigned a value that is never used." verbose="Variable &apos;argv&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-session-env.c" line="296" column="19"/>
            <symbol>argv</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-sexputil.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sexp&apos; can be reduced." verbose="The scope of the variable &apos;sexp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-sexputil.c" line="137" column="18"/>
            <symbol>sexp</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-ssh-utils.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;home&apos; is always false" verbose="Condition &apos;home&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="59" column="10" info="Condition &apos;home&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="57" column="20" info="Assignment &apos;home=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buffer&apos; can be reduced." verbose="The scope of the variable &apos;buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="79" column="9"/>
            <symbol>buffer</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="182" column="15"/>
            <symbol>result</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;field_count&apos; can be reduced." verbose="The scope of the variable &apos;field_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="654" column="11"/>
            <symbol>field_count</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="656" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nfields&apos; can be reduced." verbose="The scope of the variable &apos;nfields&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="721" column="29"/>
            <symbol>nfields</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;field_count&apos; can be reduced." verbose="The scope of the variable &apos;field_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="721" column="38"/>
            <symbol>field_count</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="722" column="9"/>
            <symbol>s2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nfields&apos; can be reduced." verbose="The scope of the variable &apos;nfields&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="796" column="29"/>
            <symbol>nfields</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;field_count&apos; can be reduced." verbose="The scope of the variable &apos;field_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="796" column="38"/>
            <symbol>field_count</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="797" column="9"/>
            <symbol>s2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;res&apos; can be reduced." verbose="The scope of the variable &apos;res&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="1046" column="7"/>
            <symbol>res</symbol>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;size+1&apos; to function gcry_xmalloc is always 101" verbose="Argument &apos;size+1&apos; to function gcry_xmalloc is always 101" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="84" column="16" info="Argument &apos;size+1&apos; to function gcry_xmalloc is always 101"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-stringhelp.c" line="80" column="17" info="Assignment &apos;size=100&apos;, assigned value is 100"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-sysutils.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tp&apos; can be reduced." verbose="The scope of the variable &apos;tp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-timestuff.c" line="94" column="27"/>
            <symbol>tp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;output&apos; can be reduced." verbose="The scope of the variable &apos;output&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-zb32.c" line="89" column="9"/>
            <symbol>output</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-zb32.c" line="205" column="7" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/t-zb32.c" line="197" column="7" info="First condition"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/tlv.c" line="0" column="0"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/tlv.c" line="219" column="58"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ttyio.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ttyio.c" line="369" column="11"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ttyio.c" line="411" column="9"/>
            <symbol>c</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/userids.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/userids.c" line="390" column="26"/>
            <symbol>c</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/utf8conv.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!lc&apos; is always true" verbose="Condition &apos;!lc&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/utf8conv.c" line="216" column="11" info="Condition &apos;!lc&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/utf8conv.c" line="215" column="12" info="Assignment &apos;lc=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!lc&apos; is always true" verbose="Condition &apos;!lc&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/utf8conv.c" line="219" column="15" info="Condition &apos;!lc&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/utf8conv.c" line="218" column="16" info="Assignment &apos;lc=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;shown1&apos; can be reduced." verbose="The scope of the variable &apos;shown1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/utf8conv.c" line="108" column="18"/>
            <symbol>shown1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;shown2&apos; can be reduced." verbose="The scope of the variable &apos;shown2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/utf8conv.c" line="108" column="26"/>
            <symbol>shown2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mod&apos; can be reduced." verbose="The scope of the variable &apos;mod&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/utf8conv.c" line="212" column="30"/>
            <symbol>mod</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;native_to_utf8&apos; argument 1 names different: declaration &apos;string&apos; definition &apos;orig_string&apos;." verbose="Function &apos;native_to_utf8&apos; argument 1 names different: declaration &apos;string&apos; definition &apos;orig_string&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/utf8conv.c" line="317" column="29"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/common/utf8conv.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/utf8conv.h" line="38" column="35"/>
            <symbol>native_to_utf8</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/w32-reg.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/xasprintf.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/xreadline.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/yesno.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/zb32.c" line="0" column="0"/>
        </error>
        <error id="redundantAssignInSwitch" severity="warning" msg="Variable &apos;r&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" verbose="Variable &apos;r&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/cdblib.c" line="635" column="9" info="$symbol is overwritten"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/cdblib.c" line="618" column="6" info="$symbol is assigned"/>
            <symbol>r</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/cdblib.c" line="318" column="10"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pos&apos; can be reduced." verbose="The scope of the variable &apos;pos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/cdblib.c" line="318" column="13"/>
            <symbol>pos</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/cdblib.c" line="509" column="19"/>
            <symbol>c</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;cdb_make_put&apos; argument 6 names different: declaration &apos;flag&apos; definition &apos;flags&apos;." verbose="Function &apos;cdb_make_put&apos; argument 6 names different: declaration &apos;flag&apos; definition &apos;flags&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/cdblib.c" line="593" column="11"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/cdblib.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/cdb.h" line="87" column="8"/>
            <symbol>cdb_make_put</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;drop_count&lt;2&apos; is always false" verbose="Condition &apos;drop_count&lt;2&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="294" column="22" info="Condition &apos;drop_count&lt;2&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="293" column="45" info="Assignment &apos;drop_count=1000/20&apos;, assigned value is 50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ci_mark&apos; can be reduced." verbose="The scope of the variable &apos;ci_mark&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="289" column="19"/>
            <symbol>ci_mark</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="369" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;si&apos; can be reduced." verbose="The scope of the variable &apos;si&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="1129" column="26"/>
            <symbol>si</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="1130" column="13"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="1209" column="22"/>
            <symbol>c</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DEFAULT_TRUST_STORE_FILE&apos; since the value of &apos;DEFAULT_TRUST_STORE_FILE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DEFAULT_TRUST_STORE_FILE&apos; since the value of &apos;DEFAULT_TRUST_STORE_FILE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="675" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlcache.c" line="0" column="0"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlcache.c" line="2239" column="7" info="err is overwritten"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlcache.c" line="2146" column="11" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlcache.c" line="998" column="10"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlcache.c" line="1284" column="10"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmptime&apos; can be reduced." verbose="The scope of the variable &apos;tmptime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlcache.c" line="1304" column="23"/>
            <symbol>tmptime</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlcache.c" line="2276" column="24"/>
            <symbol>s</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;crl_cache_isvalid&apos; argument 3 names different: declaration &apos;cert_id&apos; definition &apos;serialno&apos;." verbose="Function &apos;crl_cache_isvalid&apos; argument 3 names different: declaration &apos;cert_id&apos; definition &apos;serialno&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlcache.c" line="1424" column="70"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlcache.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlcache.h" line="54" column="51"/>
            <symbol>crl_cache_isvalid</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlfetch.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!nread&apos; is redundant or there is possible null pointer dereference: nread." verbose="Either the condition &apos;!nread&apos; is redundant or there is possible null pointer dereference: nread." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlfetch.c" line="112" column="19" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlfetch.c" line="114" column="7" info="Assuming that condition &apos;!nread&apos; is not redundant"/>
            <symbol>nread</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr-client.c" line="0" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT&apos; since the value of &apos;GPG_ERR_SOURCE_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT&apos; since the value of &apos;GPG_ERR_SOURCE_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr-client.c" line="218" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT&apos; since the value of &apos;GPG_ERR_SOURCE_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT&apos; since the value of &apos;GPG_ERR_SOURCE_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr-client.c" line="300" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="0" column="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: &lt;)" verbose="syntax error: &lt;)">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="2233" column="48"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="162" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="164" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="165" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="167" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="169" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="170" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="171" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="172" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="173" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="177" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="179" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="180" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="181" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="182" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="183" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="184" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="186" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="187" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="189" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="190" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="191" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="192" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="194" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="195" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="196" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="198" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="200" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="203" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="205" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="207" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="210" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="212" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="215" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="218" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="220" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="226" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="231" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="234" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.c" line="262" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr_ldap.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr_ldap.c" line="235" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 35 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="0" column="0"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;*r_v4&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;*r_v4&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="2467" column="11" info="*r_v4 is overwritten"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="2414" column="9" info="*r_v4 is assigned"/>
            <symbol>*r_v4</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;resolve_dns_name&apos; argument 5 names different: declaration &apos;r_dai&apos; definition &apos;r_ai&apos;." verbose="Function &apos;resolve_dns_name&apos; argument 5 names different: declaration &apos;r_dai&apos; definition &apos;r_ai&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="1088" column="35"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.h" line="145" column="47"/>
            <symbol>resolve_dns_name</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EAI_ADDRFAMILY&apos; since the value of &apos;EAI_ADDRFAMILY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EAI_ADDRFAMILY&apos; since the value of &apos;EAI_ADDRFAMILY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="361" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EAI_NODATA&apos; since the value of &apos;EAI_NODATA&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EAI_NODATA&apos; since the value of &apos;EAI_NODATA&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="353" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 38 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="0" column="0"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &apos;so-&gt;query-&gt;data[1]&apos; accessed at index -2, which is out of bounds." verbose="Array &apos;so-&gt;query-&gt;data[1]&apos; accessed at index -2, which is out of bounds." cwe="786">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="7547" column="17" info="Negative array index"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &apos;so-&gt;query-&gt;data[1]&apos; accessed at index -1, which is out of bounds." verbose="Array &apos;so-&gt;query-&gt;data[1]&apos; accessed at index -1, which is out of bounds." cwe="786">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="7548" column="17" info="Negative array index"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &apos;so-&gt;query-&gt;data[1]&apos; accessed at index -2, which is out of bounds." verbose="Array &apos;so-&gt;query-&gt;data[1]&apos; accessed at index -2, which is out of bounds." cwe="786">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="7553" column="26" info="Negative array index"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &apos;so-&gt;answer-&gt;data[1]&apos; accessed at index -2, which is out of bounds." verbose="Array &apos;so-&gt;answer-&gt;data[1]&apos; accessed at index -2, which is out of bounds." cwe="786">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="7576" column="27" info="Negative array index"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &apos;so-&gt;answer-&gt;data[1]&apos; accessed at index -2, which is out of bounds." verbose="Array &apos;so-&gt;answer-&gt;data[1]&apos; accessed at index -2, which is out of bounds." cwe="786">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="7587" column="36" info="Negative array index"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &apos;so-&gt;answer-&gt;data[1]&apos; accessed at index -1, which is out of bounds." verbose="Array &apos;so-&gt;answer-&gt;data[1]&apos; accessed at index -1, which is out of bounds." cwe="786">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="7588" column="36" info="Negative array index"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="785" column="38"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tc&apos; can be reduced." verbose="The scope of the variable &apos;tc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="1527" column="26"/>
            <symbol>tc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="2562" column="16"/>
            <symbol>ch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cmp&apos; can be reduced." verbose="The scope of the variable &apos;cmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="3414" column="6"/>
            <symbol>cmp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="3616" column="17"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4165" column="11"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4247" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;error&apos; can be reduced." verbose="The scope of the variable &apos;error&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4826" column="6"/>
            <symbol>error</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wc&apos; can be reduced." verbose="The scope of the variable &apos;wc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5134" column="15"/>
            <symbol>wc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;skip&apos; can be reduced." verbose="The scope of the variable &apos;skip&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5134" column="19"/>
            <symbol>skip</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;error&apos; can be reduced." verbose="The scope of the variable &apos;error&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="7260" column="6"/>
            <symbol>error</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qsrc&apos; can be reduced." verbose="The scope of the variable &apos;qsrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="7542" column="17"/>
            <symbol>qsrc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="7545" column="9"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="7570" column="21"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;error&apos; can be reduced." verbose="The scope of the variable &apos;error&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9352" column="6"/>
            <symbol>error</symbol>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting by a negative value is undefined behaviour" verbose="Shifting by a negative value is undefined behaviour" cwe="758">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9544" column="17"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="574" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="1970" column="20"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="1982" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="2612" column="20"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="3416" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="3623" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="3634" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="3665" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="3671" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4317" column="28"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4642" column="44"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4650" column="73"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5530" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" verbose="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5580" column="17"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5619" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" verbose="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5645" column="20"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" verbose="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5658" column="37"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" verbose="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5663" column="37"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" verbose="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5684" column="37"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5824" column="17"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5845" column="17"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6007" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6034" column="31"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6054" column="29"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6070" column="29"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6120" column="17"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6200" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" verbose="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6364" column="17"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6395" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6411" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6422" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6629" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6680" column="19"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6686" column="19"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="6707" column="32"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="8349" column="12"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="8366" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="8371" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" verbose="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="8780" column="16"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" verbose="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9080" column="16"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" verbose="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9112" column="16"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9537" column="19"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10114" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10140" column="19"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10164" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10181" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10218" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10259" column="30"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10271" column="28"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10303" column="28"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10315" column="26"/>
            <symbol>int</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dns_d_cname&apos; argument 6 names different: declaration &apos;error&apos; definition &apos;error_&apos;." verbose="Function &apos;dns_d_cname&apos; argument 6 names different: declaration &apos;error&apos; definition &apos;error_&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="2789" column="98"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.h" line="449" column="95"/>
            <symbol>dns_d_cname</symbol>
        </error>
        <error id="signConversionCond" severity="warning" msg="Expression &apos;af-1&apos; can have a negative value. That is converted to an unsigned value and used in an unsigned calculation." verbose="Expression &apos;af-1&apos; can have a negative value. That is converted to an unsigned value and used in an unsigned calculation." cwe="195">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9544" column="17" info="Negative value is converted to an unsigned value"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9542" column="18" info="Assuming that condition &apos;af&lt;0&apos; is not redundant"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: src" verbose="Uninitialized variable: src" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4398" column="14"/>
            <symbol>src</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: src.p" verbose="Uninitialized struct member: src.p" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4403" column="9"/>
            <symbol>src.p</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: src.p" verbose="Uninitialized struct member: src.p" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4405" column="22"/>
            <symbol>src.p</symbol>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: src.pe" verbose="Uninitialized struct member: src.pe" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4403" column="17"/>
            <symbol>src.pe</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ch&apos; is assigned a value that is never used." verbose="Variable &apos;ch&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="2562" column="19"/>
            <symbol>ch</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;error&apos; is assigned a value that is never used." verbose="Variable &apos;error&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="2973" column="13"/>
            <symbol>error</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;error&apos; is assigned a value that is never used." verbose="Variable &apos;error&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="3068" column="14"/>
            <symbol>error</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;error&apos; is assigned a value that is never used." verbose="Variable &apos;error&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="3135" column="13"/>
            <symbol>error</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;AF_UNIX&apos; since the value of &apos;AF_UNIX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;AF_UNIX&apos; since the value of &apos;AF_UNIX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="808" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;AF_UNIX&apos; since the value of &apos;AF_UNIX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;AF_UNIX&apos; since the value of &apos;AF_UNIX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="869" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;AF_UNIX&apos; since the value of &apos;AF_UNIX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;AF_UNIX&apos; since the value of &apos;AF_UNIX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="929" column="0"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;return&apos; condition is always true." verbose="Identical inner &apos;return&apos; condition is always true (outer condition is &apos;*resconf&apos; and inner condition is &apos;*resconf&apos;)." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10461" column="10" info="identical inner condition: *resconf"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10460" column="6" info="outer condition: *resconf"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;return&apos; condition is always true." verbose="Identical inner &apos;return&apos; condition is always true (outer condition is &apos;*hosts&apos; and inner condition is &apos;*hosts&apos;)." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10513" column="10" info="identical inner condition: *hosts"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10512" column="6" info="outer condition: *hosts"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10637" column="4"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10668" column="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;path&apos; can be reduced." verbose="The scope of the variable &apos;path&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10508" column="14"/>
            <symbol>path</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;path&apos; can be reduced." verbose="The scope of the variable &apos;path&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10549" column="14"/>
            <symbol>path</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10914" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10660" column="40"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="11312" column="27"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="11315" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="11379" column="25"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="11384" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="11428" column="32"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="11434" column="32"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="11440" column="30"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="11446" column="30"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabelSwitch" severity="warning" msg="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" verbose="Label &apos;int&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="11456" column="20"/>
            <symbol>int</symbol>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;int&apos; is not used." verbose="Label &apos;int&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="11543" column="18"/>
            <symbol>int</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;trace&apos; shadows outer function" verbose="Local variable &apos;trace&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4499" column="20" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10578" column="26" info="Shadowed declaration"/>
            <symbol>trace</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;hosts&apos; shadows outer function" verbose="Local variable &apos;hosts&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5053" column="20" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10506" column="26" info="Shadowed declaration"/>
            <symbol>hosts</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;hosts&apos; shadows outer function" verbose="Local variable &apos;hosts&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5109" column="20" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10506" column="26" info="Shadowed declaration"/>
            <symbol>hosts</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;resconf&apos; shadows outer function" verbose="Local variable &apos;resconf&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5357" column="26" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10454" column="32" info="Shadowed declaration"/>
            <symbol>resconf</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;resconf&apos; shadows outer function" verbose="Local variable &apos;resconf&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5426" column="26" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10454" column="32" info="Shadowed declaration"/>
            <symbol>resconf</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;resconf&apos; shadows outer function" verbose="Local variable &apos;resconf&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5460" column="26" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10454" column="32" info="Shadowed declaration"/>
            <symbol>resconf</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;resconf&apos; shadows outer function" verbose="Local variable &apos;resconf&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="8289" column="26" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10454" column="32" info="Shadowed declaration"/>
            <symbol>resconf</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;hosts&apos; shadows outer function" verbose="Local variable &apos;hosts&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="8290" column="20" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10506" column="26" info="Shadowed declaration"/>
            <symbol>hosts</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I_instance&apos; is assigned a value that is never used." verbose="Variable &apos;I_instance&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10601" column="29"/>
            <symbol>I_instance</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10639" column="12"/>
            <symbol>len</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;I_instance&apos; is assigned a value that is never used." verbose="Variable &apos;I_instance&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10658" column="29"/>
            <symbol>I_instance</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10670" column="12"/>
            <symbol>len</symbol>
        </error>
        <error id="va_end_missing" severity="error" msg="va_list &apos;ap&apos; was opened but not closed by va_end()." verbose="va_list &apos;ap&apos; was opened but not closed by va_end()." cwe="664">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10403" column="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DNS_MAIN;MSG_WAITALL&apos; since the value of &apos;MSG_WAITALL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DNS_MAIN;MSG_WAITALL&apos; since the value of &apos;MSG_WAITALL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="11208" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/domaininfo.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/domaininfo.c" line="89" column="7"/>
            <symbol>len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http-common.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http-ntbtls.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 37 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;err&apos; is always false" verbose="Condition &apos;err&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="892" column="7" info="Condition &apos;err&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="887" column="9" info="Assignment &apos;err=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sl&apos; can be reduced." verbose="The scope of the variable &apos;sl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="582" column="13"/>
            <symbol>sl</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sl&apos; can be reduced." verbose="The scope of the variable &apos;sl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="611" column="13"/>
            <symbol>sl</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tail&apos; can be reduced." verbose="The scope of the variable &apos;tail&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="1336" column="16"/>
            <symbol>tail</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp&apos; can be reduced." verbose="The scope of the variable &apos;pp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="1337" column="23"/>
            <symbol>pp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="2507" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nwritten&apos; can be reduced." verbose="The scope of the variable &apos;nwritten&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="3103" column="7"/>
            <symbol>nwritten</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;http_session_new&apos; argument 4 names different: declaration &apos;cb&apos; definition &apos;verify_cb&apos;." verbose="Function &apos;http_session_new&apos; argument 4 names different: declaration &apos;cb&apos; definition &apos;verify_cb&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="722" column="36"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.h" line="140" column="48"/>
            <symbol>http_session_new</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;http_session_new&apos; argument 5 names different: declaration &apos;cb_value&apos; definition &apos;verify_cb_value&apos;." verbose="Function &apos;http_session_new&apos; argument 5 names different: declaration &apos;cb_value&apos; definition &apos;verify_cb_value&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="722" column="53"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.h" line="141" column="37"/>
            <symbol>http_session_new</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;cookie_write&apos; argument 2 names different: declaration &apos;buffer&apos; definition &apos;buffer_arg&apos;." verbose="Function &apos;cookie_write&apos; argument 2 names different: declaration &apos;buffer&apos; definition &apos;buffer_arg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="3230" column="41"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="171" column="48"/>
            <symbol>cookie_write</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="2944" column="11"/>
            <symbol>err</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ASSUAN_SOCK_TOR&apos; since the value of &apos;ASSUAN_SOCK_TOR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ASSUAN_SOCK_TOR&apos; since the value of &apos;ASSUAN_SOCK_TOR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/http.c" line="2928" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-action.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-finger.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="746" column="18"/>
            <symbol>hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi2&apos; can be reduced." verbose="The scope of the variable &apos;hi2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="775" column="18"/>
            <symbol>hi2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx2&apos; can be reduced." verbose="The scope of the variable &apos;idx2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="776" column="12"/>
            <symbol>idx2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx3&apos; can be reduced." verbose="The scope of the variable &apos;idx3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="776" column="18"/>
            <symbol>idx3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="776" column="24"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="856" column="14"/>
            <symbol>hi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hi&apos; can be reduced." verbose="The scope of the variable &apos;hi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="1128" column="14"/>
            <symbol>hi</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="318" column="38"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="1360" column="60"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="1519" column="49"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="1523" column="49"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="1661" column="49"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="1665" column="49"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-hkp.c" line="478" column="19"/>
            <symbol>err</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-http.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-kdns.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 47 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="0" column="0"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="1795" column="7" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="1747" column="7" info="First condition"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;dump_modlist&apos; is always false" verbose="Condition &apos;dump_modlist&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="1948" column="7" info="Condition &apos;dump_modlist&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;dump&apos; is always false" verbose="Condition &apos;dump&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="2024" column="7" info="Condition &apos;dump&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="1894" column="20" info="Assignment &apos;dump=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vals&apos; can be reduced." verbose="The scope of the variable &apos;vals&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="604" column="12"/>
            <symbol>vals</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vals&apos; can be reduced." verbose="The scope of the variable &apos;vals&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="656" column="11"/>
            <symbol>vals</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uids&apos; can be reduced." verbose="The scope of the variable &apos;uids&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="1143" column="19"/>
            <symbol>uids</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ptr&apos; can be reduced." verbose="The scope of the variable &apos;ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="1517" column="14"/>
            <symbol>ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;padded&apos; can be reduced." verbose="The scope of the variable &apos;padded&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="1697" column="12"/>
            <symbol>padded</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-parse-uri.c" line="0" column="0"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-parse-uri.c" line="57" column="27"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;if&apos; condition is always true." verbose="Identical inner &apos;if&apos; condition is always true (outer condition is &apos;*p!=NULL&apos; and inner condition is &apos;*p!=NULL&apos;)." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-url.c" line="207" column="11" info="identical inner condition: *p!=NULL"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-url.c" line="206" column="18" info="outer condition: *p!=NULL"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-url.c" line="511" column="16"/>
            <symbol>r</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c" line="0" column="0"/>
        </error>
        <error id="noValidConfiguration" severity="information" msg="This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." verbose="This file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:\012&apos;&apos; : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012DOTLOCK_EXT_SYM_PREFIX : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012ENABLE_NLS : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012ENABLE_NLS;gettext_noop : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012GNUPG_COMMON_NEED_AFLOCAL : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012GNUPG_COMMON_NEED_AFLOCAL;HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012GNUPG_COMMON_NEED_AFLOCAL;HAVE_W32_SYSTEM;HAVE_WINSOCK2_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012GNUPG_COMMON_NEED_AFLOCAL;PF_UNIX : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012GPGRT_HAVE_MACRO_FUNCTION : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012GPG_ERR_SOURCE_DEFAULT : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr-err.h:7] #error GPG_ERR_SOURCE_DEFAULT already defined\012HAVE_BROKEN_TTYNAME;HAVE_TTYNAME : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012HAVE_INTTYPES_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012HAVE_LOCALE_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012HAVE_W32CE_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012HAVE_W32CE_SYSTEM;HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012HAVE_W32CE_SYSTEM;__MINGW32__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012LunderscoreIMPL : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012SIZEOF_UNSIGNED_INT=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012SIZEOF_UNSIGNED_LONG=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012SIZEOF_UNSIGNED_SHORT=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012USE_LDAPWRAPPER : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:46] #error This module is not expected to be build.\012USE_SIMPLE_GETTEXT : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012__MINGW32__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.\012__riscos__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c:48] #error This module might not anymore work.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper-ce.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper.c" line="0" column="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: &lt;)" verbose="syntax error: &lt;)">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-wrapper.c" line="366" column="48"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap.c" line="328" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pend&apos; can be reduced." verbose="The scope of the variable &apos;pend&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap.c" line="697" column="13"/>
            <symbol>pend</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap.c" line="698" column="17"/>
            <symbol>n</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldapserver.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/loadswdb.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/misc.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/misc.c" line="89" column="17"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/misc.c" line="299" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/misc.c" line="301" column="7"/>
            <symbol>idx</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ocsp.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cert_idx&apos; can be reduced." verbose="The scope of the variable &apos;cert_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ocsp.c" line="452" column="13"/>
            <symbol>cert_idx</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ocsp.c" line="400" column="60"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: produced_at" verbose="Uninitialized variable: produced_at" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ocsp.c" line="712" column="35"/>
            <symbol>produced_at</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;truncated&apos; and &apos;truncation_forced&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="1737" column="17"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="1573" column="42" info="&apos;truncation_forced&apos; is assigned value &apos;0&apos; here."/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="1573" column="19" info="&apos;truncated&apos; is assigned value &apos;0&apos; here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="2788" column="13"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="3014" column="23"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="3015" column="14"/>
            <symbol>n</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="2331" column="50"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="3092" column="66"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;get_cert_local&apos; argument 2 names different: declaration &apos;issuer&apos; definition &apos;name&apos;." verbose="Function &apos;get_cert_local&apos; argument 2 names different: declaration &apos;issuer&apos; definition &apos;name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="427" column="42"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.h" line="224" column="54"/>
            <symbol>get_cert_local</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;get_issuing_cert_local&apos; argument 2 names different: declaration &apos;issuer&apos; definition &apos;name&apos;." verbose="Function &apos;get_issuing_cert_local&apos; argument 2 names different: declaration &apos;issuer&apos; definition &apos;name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="446" column="50"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr.h" line="225" column="62"/>
            <symbol>get_issuing_cert_local</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: certtype" verbose="Uninitialized variable: certtype" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="785" column="29"/>
            <symbol>certtype</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-dns-stuff.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-dns-stuff.c" line="235" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-http-basic.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-http.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;session&apos; is always false" verbose="Condition &apos;session&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-http.c" line="438" column="7" info="Condition &apos;session&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-http.c" line="206" column="28" info="Assignment &apos;session=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-http.c" line="200" column="7"/>
            <symbol>c</symbol>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;err&apos; is not assigned a value." verbose="Variable &apos;err&apos; is not assigned a value." cwe="665">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-http.c" line="196" column="15"/>
            <symbol>err</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-ldap-parse-uri.c" line="0" column="0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-ldap-parse-uri.c" line="139" column="7"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;puri-&gt;query&apos; is redundant or there is possible null pointer dereference: puri-&gt;query." verbose="Either the condition &apos;puri-&gt;query&apos; is redundant or there is possible null pointer dereference: puri-&gt;query." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-ldap-parse-uri.c" line="178" column="12" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-ldap-parse-uri.c" line="172" column="37" info="Assuming that condition &apos;puri-&gt;query&apos; is not redundant"/>
            <symbol>puri-&gt;query</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/t-support.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/validate.c" line="0" column="0"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: exptime" verbose="Uninitialized variable: exptime" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/validate.c" line="423" column="4"/>
            <symbol>exptime</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="0" column="0"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: item-&gt;need_network. &apos;!item-&gt;need_network || (item-&gt;need_network &amp;&amp; with_network)&apos; is equivalent to &apos;!item-&gt;need_network || with_network&apos;" verbose="The condition &apos;!item-&gt;need_network || item-&gt;need_network &amp;&amp; with_network&apos; is equivalent to &apos;!item-&gt;need_network || with_network&apos;." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="155" column="37"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!prev&apos; is redundant or there is possible null pointer dereference: item." verbose="Either the condition &apos;!prev&apos; is redundant or there is possible null pointer dereference: item." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="153" column="56" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="153" column="43" info="Assignment from &apos;item&apos;"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="161" column="11" info="Assuming that condition &apos;!prev&apos; is not redundant"/>
            <symbol>item</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!prev&apos; is redundant or there is possible null pointer dereference: item." verbose="Either the condition &apos;!prev&apos; is redundant or there is possible null pointer dereference: item." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="188" column="56" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="188" column="43" info="Assignment from &apos;item&apos;"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="195" column="11" info="Assuming that condition &apos;!prev&apos; is not redundant"/>
            <symbol>item</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev&apos; can be reduced." verbose="The scope of the variable &apos;prev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="143" column="18"/>
            <symbol>prev</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev&apos; can be reduced." verbose="The scope of the variable &apos;prev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="180" column="18"/>
            <symbol>prev</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/mkdefsinc.c" line="172" column="10"/>
            <symbol>n</symbol>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/yat2m.c" line="423" column="3"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/yat2m.c" line="1007" column="12"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &apos;!&apos; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/yat2m.c" line="506" column="33"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &apos;!&apos; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/yat2m.c" line="508" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tp&apos; can be reduced." verbose="The scope of the variable &apos;tp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/yat2m.c" line="363" column="14"/>
            <symbol>tp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/yat2m.c" line="489" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pend&apos; can be reduced." verbose="The scope of the variable &apos;pend&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/yat2m.c" line="1181" column="17"/>
            <symbol>pend</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;len&apos; shadows outer argument" verbose="Local variable &apos;len&apos; shadows outer argument" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/yat2m.c" line="862" column="26" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/yat2m.c" line="713" column="72" info="Shadowed declaration"/>
            <symbol>len</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s&apos; is assigned a value that is never used." verbose="Variable &apos;s&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/yat2m.c" line="1007" column="8"/>
            <symbol>s</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/doc/yat2m.c" line="1007" column="15"/>
            <symbol>len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/armor.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/armor.c" line="165" column="9"/>
            <symbol>t</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hashes&apos; can be reduced." verbose="The scope of the variable &apos;hashes&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/armor.c" line="439" column="9"/>
            <symbol>hashes</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;armor_filter&apos; argument 3 names different: declaration &apos;chain&apos; definition &apos;a&apos;." verbose="Function &apos;armor_filter&apos; argument 3 names different: declaration &apos;chain&apos; definition &apos;a&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/armor.c" line="1005" column="13"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/armor.c" line="114" column="35"/>
            <symbol>armor_filter</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/armor.c" line="215" column="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;hashes&apos; is assigned a value that is never used." verbose="Variable &apos;hashes&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/armor.c" line="439" column="15"/>
            <symbol>hashes</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;hdr_line&apos; is assigned a value that is never used." verbose="Variable &apos;hdr_line&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/armor.c" line="518" column="18"/>
            <symbol>hdr_line</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" line="0" column="0"/>
        </error>
        <error id="identicalConditionAfterEarlyExit" severity="warning" msg="Identical condition and return expression &apos;rc&apos;, return value is always 0" verbose="Identical condition and return expression &apos;rc&apos;, return value is always 0" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" line="764" column="12" info="Returning identical expression &apos;rc&apos;"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" line="750" column="9" info="If condition &apos;rc&apos; is true, the function will return/exit"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nbytes&apos; can be reduced." verbose="The scope of the variable &apos;nbytes&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" line="738" column="12"/>
            <symbol>nbytes</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" line="857" column="12"/>
            <symbol>n</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;delete_sig_subpkt&apos; argument 1 names different: declaration &apos;buffer&apos; definition &apos;area&apos;." verbose="Function &apos;delete_sig_subpkt&apos; argument 1 names different: declaration &apos;buffer&apos; definition &apos;area&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" line="852" column="34"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="838" column="38"/>
            <symbol>delete_sig_subpkt</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;delete_sig_subpkt&apos; argument 2 names different: declaration &apos;type&apos; definition &apos;reqtype&apos;." verbose="Function &apos;delete_sig_subpkt&apos; argument 2 names different: declaration &apos;type&apos; definition &apos;reqtype&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" line="852" column="56"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="838" column="62"/>
            <symbol>delete_sig_subpkt</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;write_16&apos; argument 1 names different: declaration &apos;inp&apos; definition &apos;out&apos;." verbose="Function &apos;write_16&apos; argument 1 names different: declaration &apos;inp&apos; definition &apos;out&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" line="1584" column="16"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" line="50" column="27"/>
            <symbol>write_16</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;write_32&apos; argument 1 names different: declaration &apos;inp&apos; definition &apos;out&apos;." verbose="Function &apos;write_32&apos; argument 1 names different: declaration &apos;inp&apos; definition &apos;out&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" line="1594" column="16"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/build-packet.c" line="51" column="27"/>
            <symbol>write_32</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="0" column="0"/>
        </error>
        <error id="identicalConditionAfterEarlyExit" severity="warning" msg="Identical condition and return expression &apos;rc&apos;, return value is always 0" verbose="Identical condition and return expression &apos;rc&apos;, return value is always 0" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="942" column="10" info="Returning identical expression &apos;rc&apos;"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="939" column="7" info="If condition &apos;rc&apos; is true, the function will return/exit"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="449" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="450" column="19"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p2&apos; can be reduced." verbose="The scope of the variable &apos;p2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="596" column="17"/>
            <symbol>p2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;abool&apos; can be reduced." verbose="The scope of the variable &apos;abool&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="597" column="11"/>
            <symbol>abool</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="775" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;data&apos; can be reduced." verbose="The scope of the variable &apos;data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="888" column="22"/>
            <symbol>data</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="1670" column="9"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;is_smartcard&apos; can be reduced." verbose="The scope of the variable &apos;is_smartcard&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="1789" column="7"/>
            <symbol>is_smartcard</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;agent_scd_setattr&apos; argument 2 names different: declaration &apos;value&apos; definition &apos;value_arg&apos;." verbose="Function &apos;agent_scd_setattr&apos; argument 2 names different: declaration &apos;value&apos; definition &apos;value_arg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="1073" column="50"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.h" line="109" column="44"/>
            <symbol>agent_scd_setattr</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;agent_pksign&apos; argument 3 names different: declaration &apos;hexkeygrip&apos; definition &apos;keygrip&apos;." verbose="Function &apos;agent_pksign&apos; argument 3 names different: declaration &apos;hexkeygrip&apos; definition &apos;keygrip&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="2060" column="27"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.h" line="175" column="39"/>
            <symbol>agent_pksign</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;agent_export_key&apos; argument 2 names different: declaration &apos;keygrip&apos; definition &apos;hexkeygrip&apos;." verbose="Function &apos;agent_export_key&apos; argument 2 names different: declaration &apos;keygrip&apos; definition &apos;hexkeygrip&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="2425" column="44"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.h" line="199" column="56"/>
            <symbol>agent_export_key</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;writekey_parm_s::keydata&apos; is never used." verbose="struct member &apos;writekey_parm_s::keydata&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="80" column="24"/>
            <symbol>writekey_parm_s::keydata</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;writekey_parm_s::keydatalen&apos; is never used." verbose="struct member &apos;writekey_parm_s::keydatalen&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="81" column="10"/>
            <symbol>writekey_parm_s::keydatalen</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-dirmngr.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;linelen&apos; is always true" verbose="Condition &apos;linelen&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-dirmngr.c" line="567" column="15" info="Condition &apos;linelen&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-dirmngr.c" line="543" column="23" info="Assuming that condition &apos;linelen+1&lt;sizeof(fixedbuf)&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;line&apos; can be reduced." verbose="The scope of the variable &apos;line&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-dirmngr.c" line="214" column="13"/>
            <symbol>line</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;is_note&apos; is assigned a value that is never used." verbose="Variable &apos;is_note&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-dirmngr.c" line="399" column="15"/>
            <symbol>is_note</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="0" column="0"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &apos;EXPR &gt;= &apos; &apos;&apos;, the comparison &apos;EXPR&apos; is always true." verbose="Redundant condition: If &apos;EXPR &gt;= &apos; &apos;&apos;, the comparison &apos;EXPR&apos; is always true." cwe="398" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="776" column="25"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &apos;EXPR &gt;= &apos;a&apos;&apos;, the comparison &apos;EXPR&apos; is always true." verbose="Redundant condition: If &apos;EXPR &gt;= &apos;a&apos;&apos;, the comparison &apos;EXPR&apos; is always true." cwe="398" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="1134" column="19"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: cmds[i].admin_only. &apos;!cmds[i].admin_only || (cmds[i].admin_only &amp;&amp; allow_admin)&apos; is equivalent to &apos;!cmds[i].admin_only || allow_admin&apos;" verbose="The condition &apos;!cmds[i].admin_only || cmds[i].admin_only &amp;&amp; allow_admin&apos; is equivalent to &apos;!cmds[i].admin_only || allow_admin&apos;." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2358" column="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="235" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="255" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="269" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uval&apos; can be reduced." verbose="The scope of the variable &apos;uval&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="389" column="16"/>
            <symbol>uval</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;thefpr&apos; can be reduced." verbose="The scope of the variable &apos;thefpr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="390" column="24"/>
            <symbol>thefpr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;name&apos; can be reduced." verbose="The scope of the variable &apos;name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="766" column="9"/>
            <symbol>name</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="1193" column="10"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="1326" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prompt&apos; can be reduced." verbose="The scope of the variable &apos;prompt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="1402" column="9"/>
            <symbol>prompt</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;answer&apos; can be reduced." verbose="The scope of the variable &apos;answer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="1402" column="18"/>
            <symbol>answer</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;req_nbits&apos; can be reduced." verbose="The scope of the variable &apos;req_nbits&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="1403" column="16"/>
            <symbol>req_nbits</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oid_str&apos; can be reduced." verbose="The scope of the variable &apos;oid_str&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="1504" column="19"/>
            <symbol>oid_str</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;key_attr&apos; shadows outer function" verbose="Local variable &apos;key_attr&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="1440" column="20" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="1587" column="1" info="Shadowed declaration"/>
            <symbol>key_attr</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;key_attr&apos; shadows outer function" verbose="Local variable &apos;key_attr&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="1608" column="24" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="1587" column="1" info="Shadowed declaration"/>
            <symbol>key_attr</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;change_pin&apos; argument 1 names different: declaration &apos;no&apos; definition &apos;unblock_v2&apos;." verbose="Function &apos;change_pin&apos; argument 1 names different: declaration &apos;no&apos; definition &apos;unblock_v2&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="78" column="17"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/main.h" line="490" column="22"/>
            <symbol>change_pin</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2161" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2163" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2164" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2166" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2169" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2170" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2171" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2172" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2173" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2174" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2176" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2177" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2178" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2179" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2180" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2181" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2182" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2183" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/card-util.c" line="2184" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cipher.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;cipher_filter&apos; argument 3 names different: declaration &apos;chain&apos; definition &apos;a&apos;." verbose="Function &apos;cipher_filter&apos; argument 3 names different: declaration &apos;chain&apos; definition &apos;a&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cipher.c" line="122" column="51"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cipher.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/filter.h" line="150" column="14"/>
            <symbol>cipher_filter</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/compress-bz2.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/compress-bz2.c" line="65" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/compress-bz2.c" line="67" column="12"/>
            <symbol>n</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/compress.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;handle_compressed&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;procctx&apos;." verbose="Function &apos;handle_compressed&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;procctx&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/compress.c" line="309" column="39"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/compress.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="888" column="43"/>
            <symbol>handle_compressed</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_ptr&apos; can be reduced." verbose="The scope of the variable &apos;arg_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="150" column="11"/>
            <symbol>arg_ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="151" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_ptr&apos; can be reduced." verbose="The scope of the variable &apos;arg_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="196" column="11"/>
            <symbol>arg_ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ga&apos; can be reduced." verbose="The scope of the variable &apos;ga&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="382" column="14"/>
            <symbol>ga</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="504" column="11"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="517" column="11"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="549" column="11"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="577" column="11"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="607" column="11"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="635" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="187" column="33"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;write_status_text_and_buffer&apos; argument 2 names different: declaration &apos;text&apos; definition &apos;string&apos;." verbose="Function &apos;write_status_text_and_buffer&apos; argument 2 names different: declaration &apos;text&apos; definition &apos;string&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="293" column="51"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/main.h" line="204" column="57"/>
            <symbol>write_status_text_and_buffer</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/dearmor.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/decrypt-data.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;decrypt_data&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;procctx&apos;." verbose="Function &apos;decrypt_data&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;procctx&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/decrypt-data.c" line="77" column="34"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/decrypt-data.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="892" column="38"/>
            <symbol>decrypt_data</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/decrypt.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/delkey.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/ecdh.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;pk_ecdh_encrypt_with_shared_point&apos; argument 6 names different: declaration &apos;out&apos; definition &apos;r_result&apos;." verbose="Function &apos;pk_ecdh_encrypt_with_shared_point&apos; argument 6 names different: declaration &apos;out&apos; definition &apos;r_result&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/ecdh.c" line="96" column="48"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/ecdh.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkglue.h" line="42" column="29"/>
            <symbol>pk_ecdh_encrypt_with_shared_point</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/encrypt.c" line="0" column="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/encrypt.c" line="982" column="10"/>
            <symbol>rc</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 37 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/exec.c" line="0" column="0"/>
        </error>
        <error id="duplicateExpressionTernary" severity="style" msg="Same expression in both branches of ternary operator." verbose="Finding the same expression in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/exec.c" line="208" column="54"/>
        </error>
        <error id="duplicateExpressionTernary" severity="style" msg="Same expression in both branches of ternary operator." verbose="Finding the same expression in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/exec.c" line="210" column="54"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!err&apos; is always true" verbose="Condition &apos;!err&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="703" column="11" info="Condition &apos;!err&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="701" column="11" info="Assuming that condition &apos;err&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flag&apos; can be reduced." verbose="The scope of the variable &apos;flag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="495" column="9"/>
            <symbol>flag</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="500" column="7"/>
            <symbol>idx</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="2314" column="79"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="2321" column="70"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="2346" column="65"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="2358" column="61"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;stats&apos; is not assigned a value." verbose="Variable &apos;stats&apos; is not assigned a value." cwe="665">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="198" column="18"/>
            <symbol>stats</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="500" column="11"/>
            <symbol>idx</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="108" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="110" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="112" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="114" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="116" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="122" column="0"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="1921" column="7" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/export.c" line="1912" column="7" info="First condition"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/free-packet.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/free-packet.c" line="255" column="12"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/free-packet.c" line="495" column="12"/>
            <symbol>i</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;free_seckey_enc&apos; argument 1 names different: declaration &apos;enc&apos; definition &apos;sig&apos;." verbose="Function &apos;free_seckey_enc&apos; argument 1 names different: declaration &apos;enc&apos; definition &apos;sig&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/free-packet.c" line="66" column="33"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/free-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="851" column="38"/>
            <symbol>free_seckey_enc</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;free_public_key&apos; argument 1 names different: declaration &apos;key&apos; definition &apos;pk&apos;." verbose="Function &apos;free_public_key&apos; argument 1 names different: declaration &apos;key&apos; definition &apos;pk&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/free-packet.c" line="141" column="34"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/free-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="853" column="39"/>
            <symbol>free_public_key</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;scopy_user_id&apos; argument 1 names different: declaration &apos;sd&apos; definition &apos;s&apos;." verbose="Function &apos;scopy_user_id&apos; argument 1 names different: declaration &apos;sd&apos; definition &apos;s&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/free-packet.c" line="286" column="29"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/free-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="861" column="42"/>
            <symbol>scopy_user_id</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c" line="0" column="0"/>
        </error>
        <error id="noValidConfiguration" severity="information" msg="This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." verbose="This file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:\012&apos;&apos; : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012DOTLOCK_EXT_SYM_PREFIX : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012ENABLE_CARD_SUPPORT : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012ENABLE_NLS : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012ENABLE_NLS;gettext_noop : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012GNUPG_COMMON_NEED_AFLOCAL : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012GNUPG_COMMON_NEED_AFLOCAL;HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012GNUPG_COMMON_NEED_AFLOCAL;HAVE_W32_SYSTEM;HAVE_WINSOCK2_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012GNUPG_COMMON_NEED_AFLOCAL;PF_UNIX : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012GPGRT_HAVE_MACRO_FUNCTION : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012GPG_ERR_SOURCE_DEFAULT : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.h:32] #error GPG_ERR_SOURCE_DEFAULT already defined\012GPG_USE_AES128 : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012GPG_USE_AES256 : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012GPG_USE_CAST5 : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012HAVE_BROKEN_TTYNAME;HAVE_TTYNAME : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012HAVE_INTTYPES_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012HAVE_LOCALE_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012HAVE_W32CE_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012HAVE_W32CE_SYSTEM;HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012HAVE_W32CE_SYSTEM;__MINGW32__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012HAVE_ZIP : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012INCLUDED_BY_MAIN_MODULE;__riscos__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012LunderscoreIMPL : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012SIZEOF_UNSIGNED_INT=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012SIZEOF_UNSIGNED_LONG=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012SIZEOF_UNSIGNED_SHORT=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012USE_SIMPLE_GETTEXT : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012__MINGW32__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation\012__riscos__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c:47] #error We need the cache for key creation">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/getkey.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 42 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1134" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tok&apos; can be reduced." verbose="The scope of the variable &apos;tok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1898" column="9"/>
            <symbol>tok</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="434" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="436" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="437" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="439" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="440" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="442" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="444" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="446" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="448" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="450" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="452" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="455" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="456" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="457" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="460" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="463" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="468" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="471" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="474" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="477" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="480" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="482" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="484" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="486" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="488" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="489" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="490" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="492" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="496" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="497" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="498" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="500" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="502" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="511" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="528" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="538" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="541" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="542" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="545" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="547" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="550" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="565" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="571" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="579" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="596" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="600" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="606" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="607" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="657" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="683" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="687" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1962" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1964" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1966" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1968" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1970" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1974" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1976" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1978" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1980" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1982" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1984" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="1986" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="3275" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="3277" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="3279" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="3281" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="3285" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="3287" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="3289" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="3291" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="3293" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="3295" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpg.c" line="3297" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="0" column="0"/>
        </error>
        <error id="negativeIndex" severity="warning" msg="Either the condition &apos;j==-1&apos; is redundant or the array &apos;global_options[0]&apos; is accessed at index -1, which is out of bounds." verbose="Either the condition &apos;j==-1&apos; is redundant or the array &apos;global_options[0]&apos; is accessed at index -1, which is out of bounds." cwe="786">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="396" column="35" info="Negative array index"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="374" column="17" info="Assuming that condition &apos;j==-1&apos; is not redundant"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &apos;EXPR == 17&apos;, the comparison &apos;EXPR != 13&apos; is always true." verbose="Redundant condition: If &apos;EXPR == 17&apos;, the comparison &apos;EXPR != 13&apos; is always true." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="922" column="10"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!func&apos; is redundant or there is possible null pointer dereference: func." verbose="Either the condition &apos;!func&apos; is redundant or there is possible null pointer dereference: func." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="417" column="18" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="407" column="20" info="Assignment &apos;func=option-&gt;func&apos;, assigned value is 0"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="408" column="11" info="Assuming that condition &apos;!func&apos; is not redundant"/>
            <symbol>func</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;data_size&apos; can be reduced." verbose="The scope of the variable &apos;data_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="1231" column="7"/>
            <symbol>data_size</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;usage&apos; can be reduced." verbose="The scope of the variable &apos;usage&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2026" column="9"/>
            <symbol>usage</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;usage&apos; can be reduced." verbose="The scope of the variable &apos;usage&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2055" column="9"/>
            <symbol>usage</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;usage&apos; can be reduced." verbose="The scope of the variable &apos;usage&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2076" column="9"/>
            <symbol>usage</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;usage&apos; can be reduced." verbose="The scope of the variable &apos;usage&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2118" column="9"/>
            <symbol>usage</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;usage&apos; can be reduced." verbose="The scope of the variable &apos;usage&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2332" column="9"/>
            <symbol>usage</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;usage&apos; can be reduced." verbose="The scope of the variable &apos;usage&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2384" column="9"/>
            <symbol>usage</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;usage&apos; can be reduced." verbose="The scope of the variable &apos;usage&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2482" column="9"/>
            <symbol>usage</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;show_basic_key_info&apos; argument 3 names different: declaration &apos;print_sec&apos; definition &apos;made_from_sec&apos;." verbose="Function &apos;show_basic_key_info&apos; argument 3 names different: declaration &apos;print_sec&apos; definition &apos;made_from_sec&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="3063" column="56"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.h" line="53" column="63"/>
            <symbol>show_basic_key_info</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;usage&apos; shadows outer function" verbose="Local variable &apos;usage&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="1879" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.h" line="210" column="6" info="Shadowed declaration"/>
            <symbol>usage</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;usage&apos; shadows outer function" verbose="Local variable &apos;usage&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="1939" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.h" line="210" column="6" info="Shadowed declaration"/>
            <symbol>usage</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;usage&apos; shadows outer function" verbose="Local variable &apos;usage&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="1976" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.h" line="210" column="6" info="Shadowed declaration"/>
            <symbol>usage</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;usage&apos; shadows outer function" verbose="Local variable &apos;usage&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2026" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.h" line="210" column="6" info="Shadowed declaration"/>
            <symbol>usage</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;usage&apos; shadows outer function" verbose="Local variable &apos;usage&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2055" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.h" line="210" column="6" info="Shadowed declaration"/>
            <symbol>usage</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;usage&apos; shadows outer function" verbose="Local variable &apos;usage&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2076" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.h" line="210" column="6" info="Shadowed declaration"/>
            <symbol>usage</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;usage&apos; shadows outer function" verbose="Local variable &apos;usage&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2118" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.h" line="210" column="6" info="Shadowed declaration"/>
            <symbol>usage</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;usage&apos; shadows outer function" verbose="Local variable &apos;usage&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2332" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.h" line="210" column="6" info="Shadowed declaration"/>
            <symbol>usage</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;usage&apos; shadows outer function" verbose="Local variable &apos;usage&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2384" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.h" line="210" column="6" info="Shadowed declaration"/>
            <symbol>usage</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;usage&apos; shadows outer function" verbose="Local variable &apos;usage&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="2482" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.h" line="210" column="6" info="Shadowed declaration"/>
            <symbol>usage</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: a" verbose="Uninitialized variable: a" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="1068" column="8"/>
            <symbol>a</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: a" verbose="Uninitialized variable: a" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="1071" column="4"/>
            <symbol>a</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="1072" column="4"/>
            <symbol>n</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="1172" column="8"/>
            <symbol>s</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgcompose.c" line="1175" column="4"/>
            <symbol>s</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgsql.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;decrypt_data&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;procctx&apos;." verbose="Function &apos;decrypt_data&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;procctx&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="512" column="34"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="892" column="38"/>
            <symbol>decrypt_data</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;passphrase_to_dek&apos; argument 5 names different: declaration &apos;tryagain_text&apos; definition &apos;tmp&apos;." verbose="Function &apos;passphrase_to_dek&apos; argument 5 names different: declaration &apos;tryagain_text&apos; definition &apos;tmp&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="547" column="32"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.h" line="292" column="37"/>
            <symbol>passphrase_to_dek</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="74" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="76" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="77" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="78" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="80" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="81" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="83" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="88" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/helptext.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="459" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmpfpr&apos; can be reduced." verbose="The scope of the variable &apos;tmpfpr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="602" column="20"/>
            <symbol>tmpfpr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="4421" column="12"/>
            <symbol>n</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;import_release_stats_handle&apos; argument 1 names different: declaration &apos;hd&apos; definition &apos;p&apos;." verbose="Function &apos;import_release_stats_handle&apos; argument 1 names different: declaration &apos;hd&apos; definition &apos;p&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="308" column="45"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/main.h" line="369" column="50"/>
            <symbol>import_release_stats_handle</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;import_keys&apos; argument 4 names different: declaration &apos;stats_hd&apos; definition &apos;stats_handle&apos;." verbose="Function &apos;import_keys&apos; argument 4 names different: declaration &apos;stats_hd&apos; definition &apos;stats_handle&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="530" column="22"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/main.h" line="359" column="20"/>
            <symbol>import_keys</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;import_print_stats&apos; argument 1 names different: declaration &apos;hd&apos; definition &apos;stats&apos;." verbose="Function &apos;import_print_stats&apos; argument 1 names different: declaration &apos;hd&apos; definition &apos;stats&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="752" column="36"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/main.h" line="370" column="41"/>
            <symbol>import_print_stats</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="169" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="172" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="175" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="178" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="181" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="184" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="187" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="190" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="193" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="196" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="199" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/import.c" line="203" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/kbnode.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/key-check.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/key-clean.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/key-clean.c" line="552" column="7"/>
            <symbol>n</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/key-clean.c" line="280" column="37"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/key-clean.c" line="281" column="36"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.c" line="0" column="0"/>
        </error>
        <error id="identicalConditionAfterEarlyExit" severity="warning" msg="Identical condition &apos;!force_create&apos;, second condition is always false" verbose="Identical condition &apos;!force_create&apos;, second condition is always false" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.c" line="366" column="11" info="Testing identical condition &apos;!force_create&apos;"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.c" line="311" column="7" info="If condition &apos;!force_create&apos; is true, the function will return/exit"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;if&apos; condition is always true." verbose="Identical inner &apos;if&apos; condition is always true (outer condition is &apos;is_box&apos; and inner condition is &apos;is_box&apos;)." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.c" line="455" column="15" info="identical inner condition: is_box"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.c" line="443" column="7" info="outer condition: is_box"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!hd&apos; is redundant or there is possible null pointer dereference: hd." verbose="Either the condition &apos;!hd&apos; is redundant or there is possible null pointer dereference: hd." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.c" line="1885" column="19" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.c" line="1892" column="7" info="Assuming that condition &apos;!hd&apos; is not redundant"/>
            <symbol>hd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.c" line="1883" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="0" column="0"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: flag. &apos;!flag || (flag &amp;&amp; node-&gt;flag&amp;flag)&apos; is equivalent to &apos;!flag || node-&gt;flag&amp;flag&apos;" verbose="The condition &apos;!flag || flag &amp;&amp; node-&gt;flag&amp;flag&apos; is equivalent to &apos;!flag || node-&gt;flag&amp;flag&apos;." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="3372" column="14"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." verbose="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="5670" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;answer&apos; can be reduced." verbose="The scope of the variable &apos;answer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="864" column="14"/>
            <symbol>answer</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="4752" column="8"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="5438" column="10"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pkt&apos; can be reduced." verbose="The scope of the variable &apos;pkt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="5945" column="19"/>
            <symbol>pkt</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;menu_adduid&apos; argument 2 names different: declaration &apos;keyblock&apos; definition &apos;pub_keyblock&apos;." verbose="Function &apos;menu_adduid&apos; argument 2 names different: declaration &apos;keyblock&apos; definition &apos;pub_keyblock&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="3904" column="36"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="69" column="47"/>
            <symbol>menu_adduid</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;menu_adduid&apos; argument 5 names different: declaration &apos;uidstr&apos; definition &apos;uidstring&apos;." verbose="Function &apos;menu_adduid&apos; argument 5 names different: declaration &apos;uidstr&apos; definition &apos;uidstring&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="3905" column="61"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="70" column="72"/>
            <symbol>menu_adduid</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;menu_revuid&apos; argument 2 names different: declaration &apos;keyblock&apos; definition &apos;pub_keyblock&apos;." verbose="Function &apos;menu_revuid&apos; argument 2 names different: declaration &apos;keyblock&apos; definition &apos;pub_keyblock&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="6009" column="36"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="96" column="47"/>
            <symbol>menu_revuid</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;pk_keyid&apos; shadows outer function" verbose="Local variable &apos;pk_keyid&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="507" column="24" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.h" line="466" column="6" info="Shadowed declaration"/>
            <symbol>pk_keyid</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;have_seckey&apos; is assigned a value that is never used." verbose="Variable &apos;have_seckey&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="3434" column="19"/>
            <symbol>have_seckey</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1259" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1261" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1262" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1264" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1265" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1266" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1268" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1269" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1270" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1276" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1281" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1282" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1284" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1286" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1288" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1289" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1292" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1301" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1303" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1305" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1307" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1309" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1312" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1313" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1315" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1318" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1320" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1322" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1325" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1328" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1330" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1333" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1335" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1338" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1340" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1342" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 34 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="0" column="0"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="204" column="23"/>
            <symbol>i</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;strlen(togglers)!=8&apos; is always false" verbose="Condition &apos;strlen(togglers)!=8&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="1758" column="25" info="Condition &apos;strlen(togglers)!=8&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="1753" column="26" info="Assignment &apos;togglers=&quot;SsEeAaQq&quot;&apos;, assigned value is &quot;SsEeAaQq&quot;"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;strlen(ansstr)!=10&apos; is always false" verbose="Condition &apos;strlen(ansstr)!=10&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="2914" column="25" info="Condition &apos;strlen(ansstr)!=10&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="2912" column="27" info="Assignment &apos;ansstr=&quot;NnCcEeOoQq&quot;&apos;, assigned value is &quot;NnCcEeOoQq&quot;"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." verbose="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="4233" column="7"/>
        </error>
        <error id="duplicateBranch" severity="style" msg="Found duplicate branches for &apos;if&apos; and &apos;else&apos;." verbose="Finding the same code in an &apos;if&apos; and related &apos;else&apos; branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="391" column="13"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="405" column="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="178" column="37"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="265" column="8"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="266" column="8"/>
            <symbol>u</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="355" column="34"/>
            <symbol>val</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;answer&apos; can be reduced." verbose="The scope of the variable &apos;answer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="2415" column="9"/>
            <symbol>answer</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="3035" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="3079" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="3080" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="3779" column="20"/>
            <symbol>s2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s3&apos; can be reduced." verbose="The scope of the variable &apos;s3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="3779" column="25"/>
            <symbol>s3</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="3780" column="10"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="3781" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;abs_date&apos; is assigned a value that is never used." verbose="Variable &apos;abs_date&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="2553" column="16"/>
            <symbol>abs_date</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="3889" column="19"/>
            <symbol>p</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="3891" column="19"/>
            <symbol>p</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;algo&apos; is assigned a value that is never used." verbose="Variable &apos;algo&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="5279" column="12"/>
            <symbol>algo</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="2758" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="2773" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyid.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyid.c" line="254" column="18"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyid.c" line="420" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dp&apos; can be reduced." verbose="The scope of the variable &apos;dp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyid.c" line="514" column="19"/>
            <symbol>dp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tp&apos; can be reduced." verbose="The scope of the variable &apos;tp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyid.c" line="623" column="14"/>
            <symbol>tp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyid.c" line="830" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyid.c" line="830" column="10"/>
            <symbol>j</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;fingerprint_from_pk&apos; argument 2 names different: declaration &apos;buf&apos; definition &apos;array&apos;." verbose="Function &apos;fingerprint_from_pk&apos; argument 2 names different: declaration &apos;buf&apos; definition &apos;array&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyid.c" line="769" column="48"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyid.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.h" line="533" column="54"/>
            <symbol>fingerprint_from_pk</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" line="0" column="0"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 3) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." verbose="%u in format string (no. 3) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" line="881" column="4"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 4) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." verbose="%u in format string (no. 4) requires &apos;unsigned int&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" line="881" column="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" line="668" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hash&apos; can be reduced." verbose="The scope of the variable &apos;hash&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" line="1013" column="28"/>
            <symbol>hash</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hashbuf&apos; can be reduced." verbose="The scope of the variable &apos;hashbuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" line="1014" column="20"/>
            <symbol>hashbuf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" line="1912" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" line="1913" column="10"/>
            <symbol>i</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;print_fingerprint&apos; argument 2 names different: declaration &apos;fp&apos; definition &apos;override_fp&apos;." verbose="Function &apos;print_fingerprint&apos; argument 2 names different: declaration &apos;fp&apos; definition &apos;override_fp&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" line="1908" column="43"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/main.h" line="451" column="48"/>
            <symbol>print_fingerprint</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" line="668" column="10"/>
            <symbol>rc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;any&apos; is assigned a value that is never used." verbose="Variable &apos;any&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keylist.c" line="1348" column="10"/>
            <symbol>any</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyring.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!hd&apos; is redundant or there is possible null pointer dereference: hd." verbose="Either the condition &apos;!hd&apos; is redundant or there is possible null pointer dereference: hd." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyring.c" line="603" column="18" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyring.c" line="579" column="9" info="Assuming that condition &apos;!hd&apos; is not redundant"/>
            <symbol>hd</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!hd&apos; is redundant or there is possible null pointer dereference: hd." verbose="Either the condition &apos;!hd&apos; is redundant or there is possible null pointer dereference: hd." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyring.c" line="604" column="5" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyring.c" line="579" column="9" info="Assuming that condition &apos;!hd&apos; is not redundant"/>
            <symbol>hd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyring.c" line="1395" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;keyring_search&apos; argument 5 names different: declaration &apos;skip_legacy&apos; definition &apos;ignore_legacy&apos;." verbose="Function &apos;keyring_search&apos; argument 5 names different: declaration &apos;skip_legacy&apos; definition &apos;ignore_legacy&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyring.c" line="963" column="40"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyring.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyring.h" line="42" column="44"/>
            <symbol>keyring_search</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;save_filt&apos; can be reduced." verbose="The scope of the variable &apos;save_filt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" line="1936" column="23"/>
            <symbol>save_filt</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;keyserver_import_name&apos; argument 4 names different: declaration &apos;fpr_len&apos; definition &apos;fprlen&apos;." verbose="Function &apos;keyserver_import_name&apos; argument 4 names different: declaration &apos;fpr_len&apos; definition &apos;fprlen&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" line="1148" column="53"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver-internal.h" line="51" column="73"/>
            <symbol>keyserver_import_name</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;keyserver_import_ldap&apos; argument 4 names different: declaration &apos;fpr_len&apos; definition &apos;fprlen&apos;." verbose="Function &apos;keyserver_import_ldap&apos; argument 4 names different: declaration &apos;fpr_len&apos; definition &apos;fprlen&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" line="2110" column="71"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver-internal.h" line="54" column="56"/>
            <symbol>keyserver_import_ldap</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" line="91" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" line="93" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" line="94" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" line="96" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" line="100" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" line="102" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyserver.c" line="104" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;algo&apos; can be reduced." verbose="The scope of the variable &apos;algo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" line="578" column="11"/>
            <symbol>algo</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;keyid&apos; can be reduced." verbose="The scope of the variable &apos;keyid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" line="1230" column="15"/>
            <symbol>keyid</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;res&apos; can be reduced." verbose="The scope of the variable &apos;res&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" line="2001" column="15"/>
            <symbol>res</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;res&apos; can be reduced." verbose="The scope of the variable &apos;res&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" line="2032" column="11"/>
            <symbol>res</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;proc_packets&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;anchor&apos;." verbose="Function &apos;proc_packets&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;anchor&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" line="1293" column="34"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="605" column="38"/>
            <symbol>proc_packets</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;proc_signature_packets&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;anchor&apos;." verbose="Function &apos;proc_signature_packets&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;anchor&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" line="1308" column="44"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="606" column="48"/>
            <symbol>proc_signature_packets</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;proc_signature_packets&apos; argument 5 names different: declaration &apos;sigfile&apos; definition &apos;sigfilename&apos;." verbose="Function &apos;proc_signature_packets&apos; argument 5 names different: declaration &apos;sigfile&apos; definition &apos;sigfilename&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" line="1309" column="39"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="607" column="43"/>
            <symbol>proc_signature_packets</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;proc_encryption_packets&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;anchor&apos;." verbose="Function &apos;proc_encryption_packets&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;anchor&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" line="1391" column="45"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="610" column="49"/>
            <symbol>proc_encryption_packets</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pk2" verbose="Uninitialized variable: pk2" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mainproc.c" line="1063" column="23"/>
            <symbol>pk2</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mdfilter.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/mdfilter.c" line="43" column="9"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/migrate.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 51 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/misc.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/misc.c" line="940" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;print_reported_error&apos; argument 2 names different: declaration &apos;skip_if_ec&apos; definition &apos;ignore_ec&apos;." verbose="Function &apos;print_reported_error&apos; argument 2 names different: declaration &apos;skip_if_ec&apos; definition &apos;ignore_ec&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/misc.c" line="384" column="55"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/misc.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/main.h" line="97" column="60"/>
            <symbol>print_reported_error</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;pubkey_nbits&apos; argument 2 names different: declaration &apos;pkey&apos; definition &apos;key&apos;." verbose="Function &apos;pubkey_nbits&apos; argument 2 names different: declaration &apos;pkey&apos; definition &apos;key&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/misc.c" line="1642" column="37"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/misc.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/main.h" line="185" column="50"/>
            <symbol>pubkey_nbits</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;mpi_print&apos; argument 1 names different: declaration &apos;stream&apos; definition &apos;fp&apos;." verbose="Function &apos;mpi_print&apos; argument 1 names different: declaration &apos;stream&apos; definition &apos;fp&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/misc.c" line="1697" column="22"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/misc.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/main.h" line="186" column="26"/>
            <symbol>mpi_print</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;pk_keyid&apos; shadows outer function" verbose="Local variable &apos;pk_keyid&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/misc.c" line="838" column="7" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/misc.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.h" line="466" column="6" info="Shadowed declaration"/>
            <symbol>pk_keyid</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/openfile.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Same expression on both sides of &apos;||&apos; because &apos;!strcmp(sigfilename+len-4,EXTSEP_S&quot;sig&quot;)&apos; and &apos;!strcmp(sigfilename+len-4,EXTSEP_S&quot;asc&quot;)&apos; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/openfile.c" line="322" column="11"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="0" column="0"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="2357" column="7" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="2350" column="7" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;unknown_pubkey_algos&apos; can be reduced." verbose="The scope of the variable &apos;unknown_pubkey_algos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="264" column="15"/>
            <symbol>unknown_pubkey_algos</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="1003" column="7"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="3030" column="26"/>
            <symbol>p</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dbg_parse_packet&apos; argument 2 names different: declaration &apos;ret_pkt&apos; definition &apos;pkt&apos;." verbose="Function &apos;dbg_parse_packet&apos; argument 2 names different: declaration &apos;ret_pkt&apos; definition &apos;pkt&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="295" column="51"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="663" column="55"/>
            <symbol>dbg_parse_packet</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dbg_parse_packet&apos; argument 3 names different: declaration &apos;file&apos; definition &apos;dbg_f&apos;." verbose="Function &apos;dbg_parse_packet&apos; argument 3 names different: declaration &apos;file&apos; definition &apos;dbg_f&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="296" column="31"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="664" column="35"/>
            <symbol>dbg_parse_packet</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dbg_parse_packet&apos; argument 4 names different: declaration &apos;lineno&apos; definition &apos;dbg_l&apos;." verbose="Function &apos;dbg_parse_packet&apos; argument 4 names different: declaration &apos;lineno&apos; definition &apos;dbg_l&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="296" column="42"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="664" column="45"/>
            <symbol>dbg_parse_packet</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dbg_search_packet&apos; argument 5 names different: declaration &apos;file&apos; definition &apos;dbg_f&apos;." verbose="Function &apos;dbg_search_packet&apos; argument 5 names different: declaration &apos;file&apos; definition &apos;dbg_f&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="331" column="18"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="662" column="36"/>
            <symbol>dbg_search_packet</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dbg_search_packet&apos; argument 6 names different: declaration &apos;lineno&apos; definition &apos;dbg_l&apos;." verbose="Function &apos;dbg_search_packet&apos; argument 6 names different: declaration &apos;lineno&apos; definition &apos;dbg_l&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="331" column="29"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="662" column="46"/>
            <symbol>dbg_search_packet</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dbg_copy_all_packets&apos; argument 3 names different: declaration &apos;file&apos; definition &apos;dbg_f&apos;." verbose="Function &apos;dbg_copy_all_packets&apos; argument 3 names different: declaration &apos;file&apos; definition &apos;dbg_f&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="365" column="61"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="666" column="39"/>
            <symbol>dbg_copy_all_packets</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dbg_copy_all_packets&apos; argument 4 names different: declaration &apos;lineno&apos; definition &apos;dbg_l&apos;." verbose="Function &apos;dbg_copy_all_packets&apos; argument 4 names different: declaration &apos;lineno&apos; definition &apos;dbg_l&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="365" column="72"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="666" column="49"/>
            <symbol>dbg_copy_all_packets</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dbg_copy_some_packets&apos; argument 4 names different: declaration &apos;file&apos; definition &apos;dbg_f&apos;." verbose="Function &apos;dbg_copy_some_packets&apos; argument 4 names different: declaration &apos;file&apos; definition &apos;dbg_f&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="423" column="22"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="668" column="40"/>
            <symbol>dbg_copy_some_packets</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dbg_copy_some_packets&apos; argument 5 names different: declaration &apos;lineno&apos; definition &apos;dbg_l&apos;." verbose="Function &apos;dbg_copy_some_packets&apos; argument 5 names different: declaration &apos;lineno&apos; definition &apos;dbg_l&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="423" column="33"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="668" column="50"/>
            <symbol>dbg_copy_some_packets</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dbg_skip_some_packets&apos; argument 3 names different: declaration &apos;file&apos; definition &apos;dbg_f&apos;." verbose="Function &apos;dbg_skip_some_packets&apos; argument 3 names different: declaration &apos;file&apos; definition &apos;dbg_f&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="482" column="61"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="670" column="40"/>
            <symbol>dbg_skip_some_packets</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;dbg_skip_some_packets&apos; argument 4 names different: declaration &apos;lineno&apos; definition &apos;dbg_l&apos;." verbose="Function &apos;dbg_skip_some_packets&apos; argument 4 names different: declaration &apos;lineno&apos; definition &apos;dbg_l&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="482" column="72"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="670" column="50"/>
            <symbol>dbg_skip_some_packets</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;enum_sig_subpkt&apos; argument 1 names different: declaration &apos;subpkts&apos; definition &apos;pktbuf&apos;." verbose="Function &apos;enum_sig_subpkt&apos; argument 1 names different: declaration &apos;subpkts&apos; definition &apos;pktbuf&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="1698" column="39"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="782" column="51"/>
            <symbol>enum_sig_subpkt</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;parse_key&apos; argument 6 names different: declaration &apos;packet&apos; definition &apos;pkt&apos;." verbose="Function &apos;parse_key&apos; argument 6 names different: declaration &apos;packet&apos; definition &apos;pkt&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="2244" column="38"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="69" column="42"/>
            <symbol>parse_key</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;parse_plaintext&apos; argument 4 names different: declaration &apos;packet&apos; definition &apos;pkt&apos;." verbose="Function &apos;parse_plaintext&apos; argument 4 names different: declaration &apos;packet&apos; definition &apos;pkt&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="3106" column="13"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="79" column="17"/>
            <symbol>parse_plaintext</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;parse_compressed&apos; argument 4 names different: declaration &apos;packet&apos; definition &apos;pkt&apos;." verbose="Function &apos;parse_compressed&apos; argument 4 names different: declaration &apos;packet&apos; definition &apos;pkt&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="3187" column="14"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="81" column="18"/>
            <symbol>parse_compressed</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;parse_encrypted&apos; argument 4 names different: declaration &apos;packet&apos; definition &apos;pkt&apos;." verbose="Function &apos;parse_encrypted&apos; argument 4 names different: declaration &apos;packet&apos; definition &apos;pkt&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="3210" column="13"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="83" column="17"/>
            <symbol>parse_encrypted</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;parse_mdc&apos; argument 4 names different: declaration &apos;packet&apos; definition &apos;pkt&apos;." verbose="Function &apos;parse_mdc&apos; argument 4 names different: declaration &apos;packet&apos; definition &apos;pkt&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="3287" column="14"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/parse-packet.c" line="85" column="18"/>
            <symbol>parse_mdc</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/passphrase.c" line="0" column="0"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;tryagain_text&apos; to itself." verbose="Redundant assignment of &apos;tryagain_text&apos; to itself." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/passphrase.c" line="241" column="19"/>
            <symbol>tryagain_text</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 40 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/photoid.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;generate_photo_id&apos; argument 3 names different: declaration &apos;filename&apos; definition &apos;photo_name&apos;." verbose="Function &apos;generate_photo_id&apos; argument 3 names different: declaration &apos;filename&apos; definition &apos;photo_name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/photoid.c" line="51" column="64"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/photoid.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/photoid.h" line="28" column="64"/>
            <symbol>generate_photo_id</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FIXED_PHOTO_VIEWER&apos; since the value of &apos;FIXED_PHOTO_VIEWER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FIXED_PHOTO_VIEWER&apos; since the value of &apos;FIXED_PHOTO_VIEWER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/photoid.c" line="334" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkclist.c" line="0" column="0"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkclist.c" line="295" column="13" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkclist.c" line="289" column="13" info="First condition"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;strlen(ans)!=8&apos; is always false" verbose="Condition &apos;strlen(ans)!=8&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkclist.c" line="308" column="21" info="Condition &apos;strlen(ans)!=8&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkclist.c" line="216" column="23" info="Assignment &apos;ans=&quot;iImMqQsS&quot;&apos;, assigned value is &quot;iImMqQsS&quot;"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sl&apos; can be reduced." verbose="The scope of the variable &apos;sl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkclist.c" line="773" column="19"/>
            <symbol>sl</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkclist.c" line="1680" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkglue.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;pk_verify&apos; argument 1 names different: declaration &apos;algo&apos; definition &apos;pkalgo&apos;." verbose="Function &apos;pk_verify&apos; argument 1 names different: declaration &apos;algo&apos; definition &apos;pkalgo&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkglue.c" line="56" column="26"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkglue.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkglue.h" line="28" column="30"/>
            <symbol>pk_verify</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;pk_check_secret_key&apos; argument 1 names different: declaration &apos;algo&apos; definition &apos;pkalgo&apos;." verbose="Function &apos;pk_check_secret_key&apos; argument 1 names different: declaration &apos;algo&apos; definition &apos;pkalgo&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkglue.c" line="362" column="36"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkglue.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkglue.h" line="32" column="40"/>
            <symbol>pk_check_secret_key</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/plaintext.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;c!=&apos;\n&apos;&apos; is always true" verbose="Condition &apos;c!=&apos;\n&apos;&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/plaintext.c" line="572" column="15" info="Condition &apos;c!=&apos;\n&apos;&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/plaintext.c" line="567" column="15" info="Assuming that condition &apos;c==&apos;\n&apos;&apos; is not redundant"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/progress.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pubkey-enc.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;get_it&apos; argument 2 names different: declaration &apos;k&apos; definition &apos;enc&apos;." verbose="Function &apos;get_it&apos; argument 2 names different: declaration &apos;k&apos; definition &apos;enc&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pubkey-enc.c" line="173" column="25"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pubkey-enc.c" line="41" column="57"/>
            <symbol>get_it</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s_data" verbose="Uninitialized variable: s_data" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pubkey-enc.c" line="238" column="26"/>
            <symbol>s_data</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/revoke.c" line="0" column="0"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/revoke.c" line="792" column="6" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/revoke.c" line="790" column="6" info="First condition"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/revoke.c" line="794" column="6" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/revoke.c" line="792" column="6" info="First condition"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;x&apos; is not assigned a value." verbose="Variable &apos;x&apos; is not assigned a value." cwe="665">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/rmd160.c" line="90" column="7"/>
            <symbol>x</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/server.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/server.c" line="635" column="10"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/server.c" line="773" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/seskey.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/seskey.c" line="42" column="12"/>
            <symbol>rc</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sig-check.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sig-check.c" line="654" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;check_key_signature&apos; argument 3 names different: declaration &apos;sig&apos; definition &apos;node&apos;." verbose="Function &apos;check_key_signature&apos; argument 3 names different: declaration &apos;sig&apos; definition &apos;node&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sig-check.c" line="777" column="59"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sig-check.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/main.h" line="265" column="63"/>
            <symbol>check_key_signature</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="0" column="0"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: smartcard. &apos;!smartcard || (smartcard &amp;&amp; hint.digest_length==20)&apos; is equivalent to &apos;!smartcard || hint.digest_length==20&apos;" verbose="The condition &apos;!smartcard || smartcard &amp;&amp; hint.digest_length==20&apos; is equivalent to &apos;!smartcard || hint.digest_length==20&apos;." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1004" column="21"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!smartcard&apos; is always true" verbose="Condition &apos;!smartcard&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1004" column="10" info="Condition &apos;!smartcard&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="951" column="26" info="Assignment &apos;smartcard=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;rc&apos; is always false" verbose="Condition &apos;rc&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1134" column="9" info="Condition &apos;rc&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1129" column="9" info="Assuming that condition &apos;rc&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;rc&apos; is always false" verbose="Condition &apos;rc&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1275" column="9" info="Condition &apos;rc&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1271" column="9" info="Assuming that condition &apos;rc&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;rc&apos; is always false" verbose="Condition &apos;rc&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1437" column="9" info="Condition &apos;rc&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1432" column="9" info="Assuming that condition &apos;rc&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;algo&apos; can be reduced." verbose="The scope of the variable &apos;algo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="951" column="10"/>
            <symbol>algo</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;sign_file&apos; argument 5 names different: declaration &apos;do_encrypt&apos; definition &apos;encryptflag&apos;." verbose="Function &apos;sign_file&apos; argument 5 names different: declaration &apos;do_encrypt&apos; definition &apos;encryptflag&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="821" column="9"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/main.h" line="246" column="13"/>
            <symbol>sign_file</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;pk_keyid&apos; shadows outer function" verbose="Local variable &apos;pk_keyid&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1493" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.h" line="466" column="6" info="Shadowed declaration"/>
            <symbol>pk_keyid</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;pk_keyid&apos; shadows outer function" verbose="Local variable &apos;pk_keyid&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1618" column="9" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.h" line="466" column="6" info="Shadowed declaration"/>
            <symbol>pk_keyid</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/skclist.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/skclist.c" line="455" column="39"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/skclist.c" line="456" column="31"/>
            <symbol>i</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;enum_secret_keys&apos; argument 3 names different: declaration &apos;pk&apos; definition &apos;sk&apos;." verbose="Function &apos;enum_secret_keys&apos; argument 3 names different: declaration &apos;pk&apos; definition &apos;sk&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/skclist.c" line="325" column="64"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/skclist.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.h" line="435" column="76"/>
            <symbol>enum_secret_keys</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb-get-keyblock.c" line="0" column="0"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;Failed to open keyring.&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;Failed to open keyring.&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb-get-keyblock.c" line="45" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb-get-keyblock.c" line="49" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;Failed to convert fingerprint for 1E42B367&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;Failed to convert fingerprint for 1E42B367&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb-get-keyblock.c" line="54" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;Failed to lookup key associated with 1E42B367&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;Failed to lookup key associated with 1E42B367&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb-get-keyblock.c" line="58" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb-get-keyblock.c" line="61" column="3"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="0" column="0"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;Failed to open keyring.&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;Failed to open keyring.&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="42" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="46" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="49" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;Failed to convert fingerprint for DBFC6AD9&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;Failed to convert fingerprint for DBFC6AD9&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="54" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;Failed to lookup key associated with DBFC6AD9&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;Failed to lookup key associated with DBFC6AD9&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="58" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;Failed to convert fingerprint for 1E42B367&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;Failed to convert fingerprint for 1E42B367&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="64" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;Failed to lookup key associated with 1E42B367&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;Failed to lookup key associated with 1E42B367&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="68" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;Failed to get keyblock for 1E42B367&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;Failed to get keyblock for 1E42B367&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="72" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;Failed to get keyblock for DBFC6AD9&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;Failed to get keyblock for DBFC6AD9&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="76" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;DBFC6AD9 has no user id packet&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;DBFC6AD9 has no user id packet&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="82" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;1E42B367 has no user id packet&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;1E42B367 has no user id packet&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="89" column="5"/>
        </error>
        <error id="incorrectStringBooleanError" severity="warning" msg="Conversion of string literal &quot;cache consistency&quot; to bool always evaluates to true." verbose="Conversion of string literal &quot;cache consistency&quot; to bool always evaluates to true." cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-keydb.c" line="98" column="3"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-stutter.c" line="0" column="0"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-stutter.c" line="531" column="9" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-stutter.c" line="528" column="9" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e_k_prime&apos; can be reduced." verbose="The scope of the variable &apos;e_k_prime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/t-stutter.c" line="561" column="14"/>
            <symbol>e_k_prime</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbdump.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="0" column="0"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="625" column="7" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="622" column="7" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="1519" column="7"/>
            <symbol>n</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;cmp_krec_fpr_struct::pubkey_algo&apos; is never used." verbose="struct member &apos;cmp_krec_fpr_struct::pubkey_algo&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="92" column="7"/>
            <symbol>cmp_krec_fpr_struct::pubkey_algo</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;cmp_krec_fpr_struct::fpr&apos; is never used." verbose="struct member &apos;cmp_krec_fpr_struct::fpr&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="93" column="15"/>
            <symbol>cmp_krec_fpr_struct::fpr</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;cmp_krec_fpr_struct::fprlen&apos; is never used." verbose="struct member &apos;cmp_krec_fpr_struct::fprlen&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="94" column="7"/>
            <symbol>cmp_krec_fpr_struct::fprlen</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;cmp_xdir_struct::pubkey_algo&apos; is never used." verbose="struct member &apos;cmp_xdir_struct::pubkey_algo&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="100" column="7"/>
            <symbol>cmp_xdir_struct::pubkey_algo</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="1700" column="50"/>
            <symbol>p</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="1704" column="42"/>
            <symbol>p</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="143" column="7" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="141" column="7" info="First condition"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;1dotlock_create&apos; is assigned a value that is never used." verbose="Variable &apos;1dotlock_create&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="142" column="16"/>
            <symbol>1dotlock_create</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EROFS&apos; since the value of &apos;EROFS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EROFS&apos; since the value of &apos;EROFS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="817" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/test-stubs.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;decrypt_data&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;procctx&apos;." verbose="Function &apos;decrypt_data&apos; argument 2 names different: declaration &apos;ctx&apos; definition &apos;procctx&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/test-stubs.c" line="275" column="34"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/test-stubs.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/packet.h" line="892" column="38"/>
            <symbol>decrypt_data</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;passphrase_to_dek&apos; argument 5 names different: declaration &apos;tryagain_text&apos; definition &apos;tmp&apos;." verbose="Function &apos;passphrase_to_dek&apos; argument 5 names different: declaration &apos;tryagain_text&apos; definition &apos;tmp&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/test-stubs.c" line="310" column="32"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/test-stubs.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.h" line="292" column="37"/>
            <symbol>passphrase_to_dek</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/textfilter.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/textfilter.c" line="168" column="18"/>
            <symbol>n</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;text_filter&apos; argument 3 names different: declaration &apos;chain&apos; definition &apos;a&apos;." verbose="Function &apos;text_filter&apos; argument 3 names different: declaration &apos;chain&apos; definition &apos;a&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/textfilter.c" line="135" column="13"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/textfilter.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/filter.h" line="154" column="12"/>
            <symbol>text_filter</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="0" column="0"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: !only_batch. &apos;only_batch || (!only_batch &amp;&amp; dbs-&gt;in_transaction==1)&apos; is equivalent to &apos;only_batch || dbs-&gt;in_transaction==1&apos;" verbose="The condition &apos;only_batch || !only_batch &amp;&amp; dbs-&gt;in_transaction==1&apos; is equivalent to &apos;only_batch || dbs-&gt;in_transaction==1&apos;." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="276" column="18"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!rc&apos; is always true" verbose="Condition &apos;!rc&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="830" column="7" info="Condition &apos;!rc&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="821" column="7" info="Assuming that condition &apos;rc&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;strlen(choices)!=10&apos; is always false" verbose="Condition &apos;strlen(choices)!=10&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="1962" column="28" info="Condition &apos;strlen(choices)!=10&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="1961" column="17" info="Assignment &apos;choices=&quot;gGaAuUrRbB&quot;&apos;, assigned value is &quot;gGaAuUrRbB&quot;"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!dbs&apos; is redundant or there is possible null pointer dereference: dbs." verbose="Either the condition &apos;!dbs&apos; is redundant or there is possible null pointer dereference: dbs." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="276" column="38" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="278" column="11" info="Assuming that condition &apos;!dbs&apos; is not redundant"/>
            <symbol>dbs</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;effective_policy&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;effective_policy&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="2575" column="20" info="effective_policy is overwritten"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="2454" column="20" info="effective_policy is assigned"/>
            <symbol>effective_policy</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;filename&apos; can be reduced." verbose="The scope of the variable &apos;filename&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="944" column="9"/>
            <symbol>filename</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="946" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;choices&apos; can be reduced." verbose="The scope of the variable &apos;choices&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="1575" column="15"/>
            <symbol>choices</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;tofu_register_signature&apos; argument 4 names different: declaration &apos;sigs_digest&apos; definition &apos;sig_digest_bin&apos;." verbose="Function &apos;tofu_register_signature&apos; argument 4 names different: declaration &apos;sigs_digest&apos; definition &apos;sig_digest_bin&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="3318" column="38"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.h" line="86" column="50"/>
            <symbol>tofu_register_signature</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;tofu_register_signature&apos; argument 5 names different: declaration &apos;sigs_digest_len&apos; definition &apos;sig_digest_bin_len&apos;." verbose="Function &apos;tofu_register_signature&apos; argument 5 names different: declaration &apos;sigs_digest_len&apos; definition &apos;sig_digest_bin_len&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="3318" column="58"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.h" line="87" column="42"/>
            <symbol>tofu_register_signature</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;tofu_wot_trust_combine&apos; argument 1 names different: declaration &apos;tofu&apos; definition &apos;tofu_base&apos;." verbose="Function &apos;tofu_wot_trust_combine&apos; argument 1 names different: declaration &apos;tofu&apos; definition &apos;tofu_base&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="3629" column="29"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.h" line="103" column="33"/>
            <symbol>tofu_wot_trust_combine</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;tofu_wot_trust_combine&apos; argument 2 names different: declaration &apos;wot&apos; definition &apos;wot_base&apos;." verbose="Function &apos;tofu_wot_trust_combine&apos; argument 2 names different: declaration &apos;wot&apos; definition &apos;wot_base&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="3629" column="44"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.h" line="103" column="43"/>
            <symbol>tofu_wot_trust_combine</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;show_warning&apos; shadows outer function" verbose="Local variable &apos;show_warning&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="2999" column="7" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="3239" column="1" info="Shadowed declaration"/>
            <symbol>show_warning</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="2076" column="10"/>
            <symbol>rc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="2830" column="14"/>
            <symbol>rc</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/trust.c" line="0" column="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: kb" verbose="Possible null pointer dereference: kb" cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/trust.c" line="351" column="12" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/trust.c" line="174" column="35" info="Calling function &apos;get_validity&apos;, 2nd argument &apos;NULL&apos; value is 0"/>
            <symbol>kb</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/trustdb.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/trustdb.c" line="175" column="23"/>
            <symbol>k</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/verify.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/verify.c" line="194" column="9"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/backend.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/be-dmcrypt.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/be-encfs.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/be-truecrypt.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/call-syshelp.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/create.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13-common.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13-syshelp.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;default_config&apos; is always true" verbose="Condition &apos;default_config&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13-syshelp.c" line="313" column="7" info="Condition &apos;default_config&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13-syshelp.c" line="232" column="23" info="Assignment &apos;default_config=1&apos;, assigned value is 1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13-syshelp.c" line="93" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13-syshelp.c" line="95" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13-syshelp.c" line="96" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13-syshelp.c" line="99" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="0" column="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: &lt;)" verbose="syntax error: &lt;)">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="972" column="48"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="111" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="113" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="114" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="115" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="116" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="117" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="118" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="124" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="126" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="127" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="129" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="130" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="131" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="132" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="133" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="134" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="138" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="140" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="143" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="150" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="153" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13.c" line="157" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13tuple.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13tuple.c" line="167" column="16"/>
            <symbol>t</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13tuple.c" line="168" column="10"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13tuple.c" line="249" column="16"/>
            <symbol>t</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13tuple.c" line="250" column="10"/>
            <symbol>n</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;create_tupledesc&apos; argument 1 names different: declaration &apos;r_tupledesc&apos; definition &apos;r_desc&apos;." verbose="Function &apos;create_tupledesc&apos; argument 1 names different: declaration &apos;r_tupledesc&apos; definition &apos;r_desc&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13tuple.c" line="106" column="32"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13tuple.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/g13tuple.h" line="35" column="44"/>
            <symbol>create_tupledesc</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/keyblob.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/mount.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/mountinfo.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/runner.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nwritten&apos; can be reduced." verbose="The scope of the variable &apos;nwritten&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/runner.c" line="84" column="7"/>
            <symbol>nwritten</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/server.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cmd&apos; can be reduced." verbose="The scope of the variable &apos;cmd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/server.c" line="509" column="13"/>
            <symbol>cmd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cmdopt&apos; can be reduced." verbose="The scope of the variable &apos;cmdopt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/server.c" line="509" column="19"/>
            <symbol>cmdopt</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/sh-blockdev.c" line="0" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_STRTOULL;ULLONG_MAX&apos; since the value of &apos;ULLONG_MAX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_STRTOULL;ULLONG_MAX&apos; since the value of &apos;ULLONG_MAX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/sh-blockdev.c" line="61" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/sh-cmd.c" line="0" column="0"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/sh-cmd.c" line="872" column="51"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/sh-dmcrypt.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/suspend.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/t-g13tuple.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/t-g13tuple.c" line="65" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/t-g13tuple.c" line="199" column="15"/>
            <symbol>argc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argv&apos; is assigned a value that is never used." verbose="Variable &apos;argv&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/t-g13tuple.c" line="199" column="23"/>
            <symbol>argv</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/kbxutil.c" line="0" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/kbxutil.c" line="71" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/kbxutil.c" line="81" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/kbxutil.c" line="88" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/kbxutil.c" line="89" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/kbxutil.c" line="90" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/kbxutil.c" line="92" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/kbxutil.c" line="93" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-blob.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;err&apos; is always false" verbose="Condition &apos;err&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-blob.c" line="775" column="7" info="Condition &apos;err&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-blob.c" line="769" column="7" info="Assuming that condition &apos;err&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;off&apos; can be reduced." verbose="The scope of the variable &apos;off&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-blob.c" line="380" column="7"/>
            <symbol>off</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-dump.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;sflags==(unsigned long)(-1)&apos; is always false" verbose="Condition &apos;sflags==(unsigned long)(-1)&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-dump.c" line="384" column="25" info="Condition &apos;sflags==(unsigned long)(-1)&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-dump.c" line="382" column="25" info="Assuming that condition &apos;sflags&lt;268435456&apos; is not redundant"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-dump.c" line="717" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;any&apos; can be reduced." verbose="The scope of the variable &apos;any&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-dump.c" line="133" column="11"/>
            <symbol>any</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;any&apos; is assigned a value that is never used." verbose="Variable &apos;any&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-dump.c" line="141" column="14"/>
            <symbol>any</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-file.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;_keybox_write_header_blob&apos; argument 2 names different: declaration &apos;openpgp_flag&apos; definition &apos;for_openpgp&apos;." verbose="Function &apos;_keybox_write_header_blob&apos; argument 2 names different: declaration &apos;openpgp_flag&apos; definition &apos;for_openpgp&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-file.c" line="151" column="42"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-file.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox.h" line="84" column="46"/>
            <symbol>_keybox_write_header_blob</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_FTELLO;ftello&apos; since the value of &apos;ftello&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_FTELLO;ftello&apos; since the value of &apos;ftello&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-file.c" line="64" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-init.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-init.c" line="92" column="7"/>
            <symbol>idx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;roverhd&apos; can be reduced." verbose="The scope of the variable &apos;roverhd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-init.c" line="245" column="17"/>
            <symbol>roverhd</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;1dotlock_create&apos; is assigned a value that is never used." verbose="Variable &apos;1dotlock_create&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-init.c" line="281" column="18"/>
            <symbol>1dotlock_create</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-openpgp.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-openpgp.c" line="71" column="7"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nbits&apos; can be reduced." verbose="The scope of the variable &apos;nbits&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-openpgp.c" line="322" column="20"/>
            <symbol>nbits</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-search.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;off&apos; can be reduced." verbose="The scope of the variable &apos;off&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-search.c" line="236" column="15"/>
            <symbol>off</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;off&apos; can be reduced." verbose="The scope of the variable &apos;off&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-search.c" line="268" column="15"/>
            <symbol>off</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;off&apos; can be reduced." verbose="The scope of the variable &apos;off&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-search.c" line="395" column="15"/>
            <symbol>off</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-search.c" line="395" column="20"/>
            <symbol>len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mylen&apos; can be reduced." verbose="The scope of the variable &apos;mylen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-search.c" line="437" column="14"/>
            <symbol>mylen</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;keybox_get_keyblock&apos; argument order different: declaration &apos;hd, r_iobuf, r_uid_no, r_pk_no&apos; definition &apos;hd, r_iobuf, r_pk_no, r_uid_no&apos;" verbose="Function &apos;keybox_get_keyblock&apos; argument order different: declaration &apos;hd, r_iobuf, r_uid_no, r_pk_no&apos; definition &apos;hd, r_iobuf, r_pk_no, r_uid_no&apos;" cwe="683">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-search.c" line="1159" column="36"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-search.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox.h" line="87" column="48"/>
            <symbol>keybox_get_keyblock</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-update.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;created_at&apos; can be reduced." verbose="The scope of the variable &apos;created_at&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-update.c" line="712" column="11"/>
            <symbol>created_at</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_FSEEKO;fseeko&apos; since the value of &apos;fseeko&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_FSEEKO;fseeko&apos; since the value of &apos;fseeko&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-update.c" line="543" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_FSEEKO;fseeko&apos; since the value of &apos;fseeko&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_FSEEKO;fseeko&apos; since the value of &apos;fseeko&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-update.c" line="607" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_FSEEKO;fseeko;HAVE_LIMITS_H&apos; since the value of &apos;fseeko&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_FSEEKO;fseeko;HAVE_LIMITS_H&apos; since the value of &apos;fseeko&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-update.c" line="543" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_FSEEKO;fseeko;HAVE_LIMITS_H&apos; since the value of &apos;fseeko&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_FSEEKO;fseeko;HAVE_LIMITS_H&apos; since the value of &apos;fseeko&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-update.c" line="607" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/kbx/keybox-util.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;slot&apos; can be reduced." verbose="The scope of the variable &apos;slot&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="2236" column="7"/>
            <symbol>slot</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;apdu_dev_list_finish&apos; argument 1 names different: declaration &apos;l&apos; definition &apos;dl&apos;." verbose="Function &apos;apdu_dev_list_finish&apos; argument 1 names different: declaration &apos;l&apos; definition &apos;dl&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="1927" column="40"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.h" line="92" column="45"/>
            <symbol>apdu_dev_list_finish</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;apdu_open_reader&apos; argument 1 names different: declaration &apos;l&apos; definition &apos;dl&apos;." verbose="Function &apos;apdu_open_reader&apos; argument 1 names different: declaration &apos;l&apos; definition &apos;dl&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="2042" column="36"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.h" line="95" column="40"/>
            <symbol>apdu_open_reader</symbol>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;apdulen&lt;=apdu_buffer_size&apos; to function assert is always 1" verbose="Argument &apos;apdulen&lt;=apdu_buffer_size&apos; to function assert is always 1" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="2936" column="27" info="Argument &apos;apdulen&lt;=apdu_buffer_size&apos; to function assert is always 1"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="2935" column="16" info="apdulen is incremented&apos;, new value is 5"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="2934" column="16" info="apdulen is incremented&apos;, new value is 4"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="2933" column="16" info="apdulen is incremented&apos;, new value is 3"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="2932" column="16" info="apdulen is incremented&apos;, new value is 2"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="2931" column="16" info="apdulen is incremented&apos;, new value is 1"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="2930" column="21" info="Assignment &apos;apdulen=0&apos;, assigned value is 0"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;bufsize+2&apos; to function gcry_malloc is always 4098" verbose="Argument &apos;bufsize+2&apos; to function gcry_malloc is always 4098" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="3179" column="25" info="Argument &apos;bufsize+2&apos; to function gcry_malloc is always 4098"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="3173" column="24" info="Assignment &apos;bufsize=4096&apos;, assigned value is 4096"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;reader_table_s::port&apos; is never used." verbose="struct member &apos;reader_table_s::port&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="95" column="18"/>
            <symbol>reader_table_s::port</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Anonymous7::handle&apos; is never used." verbose="struct member &apos;Anonymous7::handle&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="113" column="19"/>
            <symbol>Anonymous7::handle</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;pcsc_readerstate_s::user_data&apos; is never used." verbose="struct member &apos;pcsc_readerstate_s::user_data&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="282" column="9"/>
            <symbol>pcsc_readerstate_s::user_data</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Anonymous4::handle&apos; is never used." verbose="struct member &apos;Anonymous4::handle&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="113" column="19"/>
            <symbol>Anonymous4::handle</symbol>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="46" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-dinsig.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-geldkarte.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-help.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-help.c" line="39" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-nks.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmpl&apos; can be reduced." verbose="The scope of the variable &apos;tmpl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-nks.c" line="1382" column="28"/>
            <symbol>tmpl</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;usage&apos; shadows outer function" verbose="Local variable &apos;usage&apos; shadows outer function" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-nks.c" line="404" column="15" info="Shadow variable"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-nks.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/argparse.h" line="210" column="6" info="Shadowed declaration"/>
            <symbol>usage</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-openpgp.c" line="0" column="0"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &apos;EXPR &gt;= &apos;0&apos;&apos;, the comparison &apos;EXPR&apos; is always true." verbose="Redundant condition: If &apos;EXPR &gt;= &apos;0&apos;&apos;, the comparison &apos;EXPR&apos; is always true." cwe="398" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-openpgp.c" line="3496" column="49"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &apos;EXPR &gt;= &apos;0&apos;&apos;, the comparison &apos;EXPR&apos; is always true." verbose="Redundant condition: If &apos;EXPR &gt;= &apos;0&apos;&apos;, the comparison &apos;EXPR&apos; is always true." cwe="398" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-openpgp.c" line="3841" column="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;exmode&apos; can be reduced." verbose="The scope of the variable &apos;exmode&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-openpgp.c" line="465" column="7"/>
            <symbol>exmode</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-openpgp.c" line="617" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rembuf&apos; can be reduced." verbose="The scope of the variable &apos;rembuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-openpgp.c" line="2029" column="30"/>
            <symbol>rembuf</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;keyno&apos; is assigned a value that is never used." verbose="Variable &apos;keyno&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-openpgp.c" line="1788" column="13"/>
            <symbol>keyno</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;fixuplen&apos; is assigned a value that is never used." verbose="Variable &apos;fixuplen&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-openpgp.c" line="4609" column="16"/>
            <symbol>fixuplen</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="0" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="749" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="436" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="2455" column="11"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="2672" column="13"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="2672" column="19"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp&apos; can be reduced." verbose="The scope of the variable &apos;pp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="2773" column="32"/>
            <symbol>pp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="2862" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp&apos; can be reduced." verbose="The scope of the variable &apos;pp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="3238" column="28"/>
            <symbol>pp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="3331" column="15"/>
            <symbol>i</symbol>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;3+app-&gt;serialnolen&apos; to function gcry_malloc is always 15" verbose="Argument &apos;3+app-&gt;serialnolen&apos; to function gcry_malloc is always 15" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="3393" column="15" info="Argument &apos;3+app-&gt;serialnolen&apos; to function gcry_malloc is always 15"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="3384" column="28" info="Assuming that condition &apos;app-&gt;serialnolen==12&apos; is not redundant"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;derlen&apos; is assigned a value that is never used." verbose="Variable &apos;derlen&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="749" column="28"/>
            <symbol>derlen</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;full&apos; is assigned a value that is never used." verbose="Variable &apos;full&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-p15.c" line="751" column="13"/>
            <symbol>full</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="0" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="411" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="1571" column="13"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="1571" column="19"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rmd160_prefix&apos; can be reduced." verbose="The scope of the variable &apos;rmd160_prefix&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="1779" column="24"/>
            <symbol>rmd160_prefix</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sha1_prefix&apos; can be reduced." verbose="The scope of the variable &apos;sha1_prefix&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="1782" column="24"/>
            <symbol>sha1_prefix</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sha224_prefix&apos; can be reduced." verbose="The scope of the variable &apos;sha224_prefix&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="1785" column="24"/>
            <symbol>sha224_prefix</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sha256_prefix&apos; can be reduced." verbose="The scope of the variable &apos;sha256_prefix&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="1789" column="24"/>
            <symbol>sha256_prefix</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sha384_prefix&apos; can be reduced." verbose="The scope of the variable &apos;sha384_prefix&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="1793" column="24"/>
            <symbol>sha384_prefix</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sha512_prefix&apos; can be reduced." verbose="The scope of the variable &apos;sha512_prefix&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="1797" column="24"/>
            <symbol>sha512_prefix</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;derlen&apos; is assigned a value that is never used." verbose="Variable &apos;derlen&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="411" column="28"/>
            <symbol>derlen</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;full&apos; is assigned a value that is never used." verbose="Variable &apos;full&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-sc-hsm.c" line="413" column="13"/>
            <symbol>full</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;line&apos; can be reduced." verbose="The scope of the variable &apos;line&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app.c" line="41" column="8"/>
            <symbol>line</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sw&apos; can be reduced." verbose="The scope of the variable &apos;sw&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app.c" line="1038" column="11"/>
            <symbol>sw</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;app_writecert&apos; argument 6 names different: declaration &apos;keydata&apos; definition &apos;data&apos;." verbose="Function &apos;app_writecert&apos; argument 6 names different: declaration &apos;keydata&apos; definition &apos;data&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app.c" line="819" column="36"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-common.h" line="173" column="49"/>
            <symbol>app_writecert</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;app_writecert&apos; argument 7 names different: declaration &apos;keydatalen&apos; definition &apos;datalen&apos;." verbose="Function &apos;app_writecert&apos; argument 7 names different: declaration &apos;keydatalen&apos; definition &apos;datalen&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app.c" line="819" column="49"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/app-common.h" line="173" column="65"/>
            <symbol>app_writecert</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/ccid-driver.c" line="0" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/ccid-driver.c" line="123" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/command.c" line="0" column="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/command.c" line="488" column="3"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;s&apos; is always false" verbose="Condition &apos;s&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/command.c" line="1462" column="11" info="Condition &apos;s&apos; is always false"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/command.c" line="1459" column="17" info="Assignment &apos;s=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/command.c" line="1723" column="10"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;valuelen&apos; can be reduced." verbose="The scope of the variable &apos;valuelen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/command.c" line="1856" column="10"/>
            <symbol>valuelen</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/command.c" line="1635" column="70"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;retry&apos; is not used." verbose="Label &apos;retry&apos; is not used." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/command.c" line="1327" column="2"/>
            <symbol>retry</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/iso7816.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/iso7816.c" line="506" column="18"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sw&apos; can be reduced." verbose="The scope of the variable &apos;sw&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/iso7816.c" line="688" column="7"/>
            <symbol>sw</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/iso7816.c" line="690" column="21"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/iso7816.c" line="732" column="10"/>
            <symbol>n</symbol>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/iso7816.c" line="27" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c" line="0" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter" verbose="failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c" line="145" column="0"/>
        </error>
        <error id="noValidConfiguration" severity="information" msg="This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." verbose="This file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:\012&apos;&apos; : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012CCID_DRIVER_INCLUDE_USB_IDS : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012DOTLOCK_EXT_SYM_PREFIX : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012ENABLE_NLS : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012ENABLE_NLS;gettext_noop : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.h:24] #error GPG_ERR_SOURCE_DEFAULT already defined\012GNUPG_MAJOR_VERSION=1 : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012GPGRT_HAVE_MACRO_FUNCTION : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012GPG_ERR_SOURCE_DEFAULT : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.h:24] #error GPG_ERR_SOURCE_DEFAULT already defined\012HAVE_BROKEN_TTYNAME;HAVE_TTYNAME : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_INTTYPES_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_LIBUSB : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_LOCALE_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_PRCTL : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_PRCTL;PR_SET_DUMPABLE : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_PSELECT_NO_EINTR : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32CE_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32CE_SYSTEM;HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32CE_SYSTEM;__MINGW32__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32_SYSTEM;HAVE_WINSOCK2_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32_SYSTEM;__CYGWIN__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012IS_DEVELOPMENT_VERSION : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012LunderscoreIMPL : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012PF_UNIX : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012SIZEOF_UNSIGNED_INT=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012SIZEOF_UNSIGNED_LONG=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012SIZEOF_UNSIGNED_SHORT=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012USE_SIMPLE_GETTEXT : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012__APPLE__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012__GLIBC__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012__MINGW32__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter\012__riscos__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c:145] failed to expand &apos;ARGPARSE_s_n&apos;, it is invalid to use a preprocessor directive as macro parameter">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/scdaemon.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/call-agent.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/call-agent.c" line="752" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/call-agent.c" line="1163" column="19"/>
            <symbol>s2</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/call-dirmngr.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;der&apos; can be reduced." verbose="The scope of the variable &apos;der&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/call-dirmngr.c" line="925" column="28"/>
            <symbol>der</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certchain.c" line="0" column="0"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certchain.c" line="751" column="24" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certchain.c" line="745" column="24" info="First condition"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;rc&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;rc&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certchain.c" line="1640" column="10" info="rc is overwritten"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certchain.c" line="1500" column="18" info="rc is assigned"/>
            <symbol>rc</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: check_time" verbose="Uninitialized variable: check_time" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certchain.c" line="1383" column="6"/>
            <symbol>check_time</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: exptime" verbose="Uninitialized variable: exptime" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certchain.c" line="1387" column="4"/>
            <symbol>exptime</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certcheck.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gpgsm_check_cms_signature&apos; argument 4 names different: declaration &apos;hash_algo&apos; definition &apos;mdalgo&apos;." verbose="Function &apos;gpgsm_check_cms_signature&apos; argument 4 names different: declaration &apos;hash_algo&apos; definition &apos;mdalgo&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certcheck.c" line="342" column="49"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certcheck.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.h" line="296" column="53"/>
            <symbol>gpgsm_check_cms_signature</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="111" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="182" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dn&apos; can be reduced." verbose="The scope of the variable &apos;dn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="183" column="9"/>
            <symbol>dn</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p1&apos; can be reduced." verbose="The scope of the variable &apos;p1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="233" column="13"/>
            <symbol>p1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s1&apos; can be reduced." verbose="The scope of the variable &apos;s1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="313" column="28"/>
            <symbol>s1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="316" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gpgsm_print_serial&apos; argument 2 names different: declaration &apos;p&apos; definition &apos;sn&apos;." verbose="Function &apos;gpgsm_print_serial&apos; argument 2 names different: declaration &apos;p&apos; definition &apos;sn&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="53" column="53"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.h" line="269" column="58"/>
            <symbol>gpgsm_print_serial</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gpgsm_dump_serial&apos; argument 1 names different: declaration &apos;p&apos; definition &apos;sn&apos;." verbose="Function &apos;gpgsm_dump_serial&apos; argument 1 names different: declaration &apos;p&apos; definition &apos;sn&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="78" column="38"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.h" line="279" column="43"/>
            <symbol>gpgsm_dump_serial</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gpgsm_format_serial&apos; argument 1 names different: declaration &apos;p&apos; definition &apos;sn&apos;." verbose="Function &apos;gpgsm_format_serial&apos; argument 1 names different: declaration &apos;p&apos; definition &apos;sn&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="105" column="40"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.h" line="283" column="46"/>
            <symbol>gpgsm_format_serial</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gpgsm_es_print_name2&apos; argument 2 names different: declaration &apos;string&apos; definition &apos;name&apos;." verbose="Function &apos;gpgsm_es_print_name2&apos; argument 2 names different: declaration &apos;string&apos; definition &apos;name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="589" column="49"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.h" line="274" column="54"/>
            <symbol>gpgsm_es_print_name2</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gpgsm_es_print_name&apos; argument 2 names different: declaration &apos;string&apos; definition &apos;name&apos;." verbose="Function &apos;gpgsm_es_print_name&apos; argument 2 names different: declaration &apos;string&apos; definition &apos;name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="639" column="48"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.h" line="273" column="53"/>
            <symbol>gpgsm_es_print_name</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certlist.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!rc&apos; is always true" verbose="Condition &apos;!rc&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certlist.c" line="439" column="19" info="Condition &apos;!rc&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certlist.c" line="437" column="15" info="Assuming that condition &apos;!rc&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;img_b&apos; can be reduced." verbose="The scope of the variable &apos;img_b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certlist.c" line="254" column="32"/>
            <symbol>img_b</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;img_b&apos; can be reduced." verbose="The scope of the variable &apos;img_b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certlist.c" line="272" column="32"/>
            <symbol>img_b</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certreqgen-ui.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certreqgen-ui.c" line="74" column="9"/>
            <symbol>p</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gpgsm_gencertreq_tty&apos; argument 2 names different: declaration &apos;out_stream&apos; definition &apos;output_stream&apos;." verbose="Function &apos;gpgsm_gencertreq_tty&apos; argument 2 names different: declaration &apos;out_stream&apos; definition &apos;output_stream&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certreqgen-ui.c" line="128" column="46"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certreqgen-ui.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.h" line="373" column="51"/>
            <symbol>gpgsm_gencertreq_tty</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certreqgen.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!string&apos; is always true" verbose="Condition &apos;!string&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certreqgen.c" line="1060" column="16" info="Condition &apos;!string&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certreqgen.c" line="1045" column="11" info="Assuming that condition &apos;string&apos; is not redundant"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/decrypt.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/delete.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/delete.c" line="162" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!dek&apos; is redundant or there is possible null pointer dereference: dek." verbose="Either the condition &apos;!dek&apos; is redundant or there is possible null pointer dereference: dek." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="449" column="45" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="434" column="9" info="Assignment &apos;dek=gcry_calloc_secure(1,sizeof(*dek))&apos;, assigned value is 0"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="435" column="7" info="Assuming that condition &apos;!dek&apos; is not redundant"/>
            <symbol>dek</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!dek&apos; is redundant or there is possible null pointer dereference: dek." verbose="Either the condition &apos;!dek&apos; is redundant or there is possible null pointer dereference: dek." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="460" column="27" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="434" column="9" info="Assignment &apos;dek=gcry_calloc_secure(1,sizeof(*dek))&apos;, assigned value is 0"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="435" column="7" info="Assuming that condition &apos;!dek&apos; is not redundant"/>
            <symbol>dek</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!dek&apos; is redundant or there is possible null pointer dereference: dek." verbose="Either the condition &apos;!dek&apos; is redundant or there is possible null pointer dereference: dek." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="468" column="48" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="434" column="9" info="Assignment &apos;dek=gcry_calloc_secure(1,sizeof(*dek))&apos;, assigned value is 0"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="435" column="7" info="Assuming that condition &apos;!dek&apos; is not redundant"/>
            <symbol>dek</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!dek&apos; is redundant or there is possible null pointer dereference: dek." verbose="Either the condition &apos;!dek&apos; is redundant or there is possible null pointer dereference: dek." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="470" column="52" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="434" column="9" info="Assignment &apos;dek=gcry_calloc_secure(1,sizeof(*dek))&apos;, assigned value is 0"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="435" column="7" info="Assuming that condition &apos;!dek&apos; is not redundant"/>
            <symbol>dek</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gpgsm_encrypt&apos; argument 3 names different: declaration &apos;in_fd&apos; definition &apos;data_fd&apos;." verbose="Function &apos;gpgsm_encrypt&apos; argument 3 names different: declaration &apos;in_fd&apos; definition &apos;data_fd&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" line="300" column="54"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/encrypt.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.h" line="364" column="24"/>
            <symbol>gpgsm_encrypt</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/export.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/export.c" line="77" column="7"/>
            <symbol>idx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/export.c" line="510" column="11"/>
            <symbol>len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/fingerprint.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="0" column="0"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;|&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="1957" column="47"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;|&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="1960" column="47"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="200" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="202" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="204" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="205" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="207" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="208" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="209" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="210" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="212" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="213" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="214" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="215" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="217" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="221" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="222" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="230" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="231" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="232" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="234" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="236" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="248" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="250" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="252" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="260" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="262" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="264" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="267" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="271" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="282" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="286" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="289" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="292" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="296" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="302" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="305" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="306" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="307" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="308" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="309" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="314" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="317" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="318" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="319" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="320" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="322" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="325" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="335" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="337" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="340" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="349" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="352" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="354" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/gpgsm.c" line="359" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/import.c" line="0" column="0"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 2) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." verbose="%lu in format string (no. 2) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/import.c" line="145" column="3"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 4) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." verbose="%lu in format string (no. 4) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/import.c" line="145" column="3"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 6) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." verbose="%lu in format string (no. 6) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/import.c" line="145" column="3"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 7) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." verbose="%lu in format string (no. 7) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/import.c" line="145" column="3"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 8) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." verbose="%lu in format string (no. 8) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/import.c" line="145" column="3"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 9) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." verbose="%lu in format string (no. 9) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/import.c" line="145" column="3"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 13) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." verbose="%lu in format string (no. 13) requires &apos;unsigned long&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/import.c" line="145" column="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/import.c" line="100" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keydb.c" line="0" column="0"/>
        </error>
        <error id="identicalConditionAfterEarlyExit" severity="warning" msg="Identical condition &apos;!force&apos;, second condition is always false" verbose="Identical condition &apos;!force&apos;, second condition is always false" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keydb.c" line="185" column="11" info="Testing identical condition &apos;!force&apos;"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keydb.c" line="132" column="7" info="If condition &apos;!force&apos; is true, the function will return/exit"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;keydb_search_subject&apos; argument 3 names different: declaration &apos;issuer&apos; definition &apos;name&apos;." verbose="Function &apos;keydb_search_subject&apos; argument 3 names different: declaration &apos;issuer&apos; definition &apos;name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keydb.c" line="1096" column="65"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keydb.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keydb.h" line="67" column="69"/>
            <symbol>keydb_search_subject</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;1dotlock_create&apos; is assigned a value that is never used." verbose="Variable &apos;1dotlock_create&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keydb.c" line="354" column="15"/>
            <symbol>1dotlock_create</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keylist.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keylist.c" line="213" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hashalgo&apos; can be reduced." verbose="The scope of the variable &apos;hashalgo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keylist.c" line="362" column="7"/>
            <symbol>hashalgo</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keylist.c" line="493" column="11"/>
            <symbol>len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keylist.c" line="1106" column="12"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keylist.c" line="1492" column="15"/>
            <symbol>i</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;with_mac&apos; is always true" verbose="Condition &apos;with_mac&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/minip12.c" line="1779" column="7" info="Condition &apos;with_mac&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/minip12.c" line="1740" column="18" info="Assignment &apos;with_mac=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;with_mac&apos; is always true" verbose="Condition &apos;with_mac&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/minip12.c" line="1827" column="7" info="Condition &apos;with_mac&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/minip12.c" line="1740" column="18" info="Assignment &apos;with_mac=1&apos;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/minip12.c" line="334" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;maclen&apos; can be reduced." verbose="The scope of the variable &apos;maclen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/minip12.c" line="1733" column="10"/>
            <symbol>maclen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;salt&apos; can be reduced." verbose="The scope of the variable &apos;salt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/minip12.c" line="1736" column="8"/>
            <symbol>salt</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;keybuf&apos; can be reduced." verbose="The scope of the variable &apos;keybuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/minip12.c" line="1737" column="17"/>
            <symbol>keybuf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/minip12.c" line="1739" column="7"/>
            <symbol>rc</symbol>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/minip12.c" line="2546" column="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/minip12.c" line="2593" column="14"/>
            <symbol>rc</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/misc.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last_depth2&apos; can be reduced." verbose="The scope of the variable &apos;last_depth2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/misc.c" line="112" column="27"/>
            <symbol>last_depth2</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/passphrase.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/qualified.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;out_fd&apos; can be reduced." verbose="The scope of the variable &apos;out_fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="1061" column="8"/>
            <symbol>out_fd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cmd&apos; can be reduced." verbose="The scope of the variable &apos;cmd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="1141" column="13"/>
            <symbol>cmd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cmdopt&apos; can be reduced." verbose="The scope of the variable &apos;cmdopt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="1141" column="19"/>
            <symbol>cmdopt</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="1260" column="10"/>
            <symbol>rc</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="392" column="54"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="424" column="54"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="428" column="54"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="1453" column="39"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="1464" column="46"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="1466" column="40"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="1477" column="46"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/server.c" line="1479" column="40"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/sign.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/verify.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!p&apos; is redundant or there is possible null pointer dereference: p." verbose="Either the condition &apos;!p&apos; is redundant or there is possible null pointer dereference: p." cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="1088" column="8" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="1085" column="18" info="Assignment &apos;p=strchr(buffer,&apos;\n&apos;)&apos;, assigned value is 0"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="1086" column="11" info="Assuming that condition &apos;!p&apos; is not redundant"/>
            <symbol>p</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;p&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;p&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="852" column="9" info="p is overwritten"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="843" column="11" info="p is initialized"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nread2&apos; can be reduced." verbose="The scope of the variable &apos;nread2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="848" column="18"/>
            <symbol>nread2</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="296" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="314" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="321" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="323" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="343" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="373" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="387" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="393" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="410" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="412" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="418" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="433" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="439" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="446" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="448" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="455" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="464" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="732" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="753" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="762" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="771" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="786" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="802" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="815" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="855" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="866" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="982" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="1012" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__func__&apos; since the value of &apos;__func__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/asschk.c" line="1087" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 37 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c" line="0" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter" verbose="failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c" line="1438" column="0"/>
        </error>
        <error id="noValidConfiguration" severity="information" msg="This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." verbose="This file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:\012&apos;&apos; : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012DOTLOCK_EXT_SYM_PREFIX : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012GNUPG_COMMON_NEED_AFLOCAL : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012GNUPG_COMMON_NEED_AFLOCAL;HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012GNUPG_COMMON_NEED_AFLOCAL;HAVE_W32_SYSTEM;HAVE_WINSOCK2_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012GNUPG_COMMON_NEED_AFLOCAL;PF_UNIX : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012GPGRT_HAVE_MACRO_FUNCTION : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_BROKEN_TTYNAME;HAVE_TTYNAME : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_INTTYPES_H : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_LIBREADLINE : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_RAND : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32CE_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32CE_SYSTEM;HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32CE_SYSTEM;__MINGW32__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012HAVE_W32_SYSTEM : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012MAINTAINER_MODE : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012PATH_MAX : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012RUN_ALL_TESTS : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012SHOW_ERROR_LINE : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012SIZEOF_UNSIGNED_INT=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012SIZEOF_UNSIGNED_LONG=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012SIZEOF_UNSIGNED_SHORT=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012STANDALONE=0 : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012USE_CHAR_CLASSIFIERS : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012USE_COMPILE_HOOK : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012USE_HISTORY : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012USE_MACRO : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012USE_MATH : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012USE_NO_FEATURES : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012USE_PLIST : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012USE_STRING_PORTS : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012USE_TRACING : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012_MSC_VER : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012_MSC_VER;_SCHEME_SOURCE : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012_WIN32 : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012__MINGW32__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter\012__riscos__ : [/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c:1438] failed to expand &apos;ffi_define&apos;, it is invalid to use a preprocessor directive as macro parameter">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/ffi.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 34 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/main.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!no_more_options&apos; is always true" verbose="Condition &apos;!no_more_options&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/main.c" line="83" column="10" info="Condition &apos;!no_more_options&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/main.c" line="81" column="25" info="Assignment &apos;no_more_options=0&apos;, assigned value is 0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!has_fp_exp&apos; is always true" verbose="Condition &apos;!has_fp_exp&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="1550" column="27" info="Condition &apos;!has_fp_exp&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="1497" column="23" info="Assignment &apos;has_fp_exp=0&apos;, assigned value is 0"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="3860" column="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last&apos; can be reduced." verbose="The scope of the variable &apos;last&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="793" column="14"/>
            <symbol>last</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="1054" column="7"/>
            <symbol>cnt</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="1186" column="9"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="1187" column="7"/>
            <symbol>d</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="1457" column="14"/>
            <symbol>x</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="2153" column="7"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sbuf&apos; can be reduced." verbose="The scope of the variable &apos;sbuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="2876" column="11"/>
            <symbol>sbuf</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;mk_integer&apos; argument 2 names different: declaration &apos;num&apos; definition &apos;n&apos;." verbose="Function &apos;mk_integer&apos; argument 2 names different: declaration &apos;num&apos; definition &apos;n&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="1336" column="47"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.h" line="181" column="37"/>
            <symbol>mk_integer</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;mk_real&apos; argument 2 names different: declaration &apos;num&apos; definition &apos;n&apos;." verbose="Function &apos;mk_real&apos; argument 2 names different: declaration &apos;num&apos; definition &apos;n&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="1353" column="46"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.h" line="182" column="36"/>
            <symbol>mk_real</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;store_string&apos; argument 2 names different: declaration &apos;len&apos; definition &apos;len_str&apos;." verbose="Function &apos;store_string&apos; argument 2 names different: declaration &apos;len&apos; definition &apos;len_str&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="1371" column="43"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="418" column="43"/>
            <symbol>store_string</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;printslashstring&apos; argument 2 names different: declaration &apos;s&apos; definition &apos;p&apos;." verbose="Function &apos;printslashstring&apos; argument 2 names different: declaration &apos;s&apos; definition &apos;p&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="2380" column="48"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="439" column="48"/>
            <symbol>printslashstring</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;find_slot_in_env&apos; argument 3 names different: declaration &apos;sym&apos; definition &apos;hdl&apos;." verbose="Function &apos;find_slot_in_env&apos; argument 3 names different: declaration &apos;sym&apos; definition &apos;hdl&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="2820" column="66"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="416" column="66"/>
            <symbol>find_slot_in_env</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;is_list&apos; argument 2 names different: declaration &apos;p&apos; definition &apos;a&apos;." verbose="Function &apos;is_list&apos; argument 2 names different: declaration &apos;p&apos; definition &apos;a&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="3399" column="40"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="225" column="50"/>
            <symbol>is_list</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;scheme_set_output_port_file&apos; argument 2 names different: declaration &apos;fin&apos; definition &apos;fout&apos;." verbose="Function &apos;scheme_set_output_port_file&apos; argument 2 names different: declaration &apos;fin&apos; definition &apos;fout&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="5735" column="52"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.h" line="165" column="66"/>
            <symbol>scheme_set_output_port_file</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;scheme_define&apos; argument 2 names different: declaration &apos;env&apos; definition &apos;envir&apos;." verbose="Function &apos;scheme_define&apos; argument 2 names different: declaration &apos;env&apos; definition &apos;envir&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="5844" column="40"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.h" line="176" column="54"/>
            <symbol>scheme_define</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;y&apos; shadows outer variable" verbose="Local variable &apos;y&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="4211" column="24" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="3454" column="17" info="Shadowed declaration"/>
            <symbol>y</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;y&apos; shadows outer variable" verbose="Local variable &apos;y&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="4222" column="19" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="3454" column="17" info="Shadowed declaration"/>
            <symbol>y</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="83" column="21"/>
            <symbol>c2</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;scheme_register_foreign_func_list&apos; argument 3 names different: declaration &apos;n&apos; definition &apos;count&apos;." verbose="Function &apos;scheme_register_foreign_func_list&apos; argument 3 names different: declaration &apos;n&apos; definition &apos;count&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="5866" column="44"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.h" line="275" column="44"/>
            <symbol>scheme_register_foreign_func_list</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="1231" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="1232" column="14"/>
            <symbol>d</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/call-dirmngr.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;data&apos; can be reduced." verbose="The scope of the variable &apos;data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/ccidmon.c" line="644" column="32"/>
            <symbol>data</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/ccidmon.c" line="723" column="20"/>
            <symbol>value</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;length&apos; can be reduced." verbose="The scope of the variable &apos;length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/ccidmon.c" line="773" column="10"/>
            <symbol>length</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-check-pattern.c" line="0" column="0"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;Anonymous2::homedir&apos; is never used." verbose="struct member &apos;Anonymous2::homedir&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-check-pattern.c" line="85" column="15"/>
            <symbol>Anonymous2::homedir</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-connect-agent.c" line="0" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT&apos; since the value of &apos;GPG_ERR_SOURCE_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT&apos; since the value of &apos;GPG_ERR_SOURCE_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-connect-agent.c" line="2222" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT&apos; since the value of &apos;GPG_ERR_SOURCE_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT&apos; since the value of &apos;GPG_ERR_SOURCE_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-connect-agent.c" line="2229" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-client.c" line="0" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT&apos; since the value of &apos;GPG_ERR_SOURCE_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT;GNUPG_COMMON_INIT_H;GPG_ERR_SOURCE_DEFAULT&apos; since the value of &apos;GPG_ERR_SOURCE_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-client.c" line="271" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-server.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!no_more_options&apos; is always true" verbose="Condition &apos;!no_more_options&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-server.c" line="211" column="10" info="Condition &apos;!no_more_options&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-server.c" line="209" column="25" info="Assignment &apos;no_more_options=0&apos;, assigned value is 0"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-server.c" line="1904" column="7" info="err is overwritten"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-server.c" line="1899" column="15" info="err is assigned"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;domain&apos; can be reduced." verbose="The scope of the variable &apos;domain&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-server.c" line="1766" column="15"/>
            <symbol>domain</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;command_receive_cb&apos; argument 3 names different: declaration &apos;fp&apos; definition &apos;msg&apos;." verbose="Function &apos;command_receive_cb&apos; argument 3 names different: declaration &apos;fp&apos; definition &apos;msg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-server.c" line="1574" column="31"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-server.c" line="157" column="73"/>
            <symbol>command_receive_cb</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;command_check_key&apos; argument 1 names different: declaration &apos;mailaddr&apos; definition &apos;userid&apos;." verbose="Function &apos;command_check_key&apos; argument 1 names different: declaration &apos;mailaddr&apos; definition &apos;userid&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-server.c" line="1936" column="32"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpg-wks-server.c" line="161" column="51"/>
            <symbol>command_check_key</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!err&apos; is always true" verbose="Condition &apos;!err&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1162" column="7" info="Condition &apos;!err&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1145" column="21" info="Assignment &apos;err=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!err&apos; is always true" verbose="Condition &apos;!err&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1205" column="7" info="Condition &apos;!err&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1177" column="21" info="Assignment &apos;err=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!err&apos; is always true" verbose="Condition &apos;!err&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1239" column="7" info="Condition &apos;!err&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1220" column="21" info="Assignment &apos;err=0&apos;, assigned value is 0"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!p&apos; is redundant or there is overflow in pointer subtraction." verbose="Either the condition &apos;!p&apos; is redundant or there is overflow in pointer subtraction." cwe="682">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="4132" column="48" info="Null pointer subtraction"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="4129" column="15" info="Assuming that condition &apos;!p&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;length&apos; can be reduced." verbose="The scope of the variable &apos;length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="2301" column="11"/>
            <symbol>length</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;gc_process_gpgconf_conf&apos; argument 1 names different: declaration &apos;fname&apos; definition &apos;fname_arg&apos;." verbose="Function &apos;gc_process_gpgconf_conf&apos; argument 1 names different: declaration &apos;fname&apos; definition &apos;fname_arg&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="3671" column="38"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf.h" line="120" column="42"/>
            <symbol>gc_process_gpgconf_conf</symbol>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;component&lt;GC_COMPONENT_NR&apos; to function assert is always 1" verbose="Argument &apos;component&lt;GC_COMPONENT_NR&apos; to function assert is always 1" cwe="570">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="2386" column="25" info="Argument &apos;component&lt;GC_COMPONENT_NR&apos; to function assert is always 1"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="2385" column="19" info="Assignment &apos;component=0&apos;, assigned value is 0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1088" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1089" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1090" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1091" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1092" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENABLE_NLS;gettext_noop&apos; since the value of &apos;gettext_noop&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="1093" column="0"/>
        </error>
        <error id="duplicateBranch" severity="style" msg="Found duplicate branches for &apos;if&apos; and &apos;else&apos;." verbose="Finding the same code in an &apos;if&apos; and related &apos;else&apos; branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="3460" column="8"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="3462" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf-comp.c" line="2555" column="7"/>
            <symbol>len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!no_more_options&apos; is always true" verbose="Condition &apos;!no_more_options&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf.c" line="546" column="10" info="Condition &apos;!no_more_options&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf.c" line="527" column="25" info="Assignment &apos;no_more_options=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_ptr&apos; can be reduced." verbose="The scope of the variable &apos;arg_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf.c" line="208" column="11"/>
            <symbol>arg_ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf.c" line="250" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgconf.c" line="860" column="23"/>
            <symbol>p</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;is_status&apos; is assigned a value that is never used." verbose="Variable &apos;is_status&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgparsemail.c" line="254" column="13"/>
            <symbol>is_status</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgsplit.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgtar-create.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgtar-extract.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgtar-list.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgtar.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!no_more_options&apos; is always true" verbose="Condition &apos;!no_more_options&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgtar.c" line="309" column="10" info="Condition &apos;!no_more_options&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/gpgtar.c" line="307" column="25" info="Assignment &apos;no_more_options=0&apos;, assigned value is 0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_CONFIG_H;VERSION&apos; since the value of &apos;VERSION&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_CONFIG_H;VERSION&apos; since the value of &apos;VERSION&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/make-dns-cert.c" line="191" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-maker.c" line="0" column="0"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: parent" verbose="Possible null pointer dereference: parent" cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-maker.c" line="664" column="38" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-maker.c" line="722" column="26" info="Calling function &apos;write_tree&apos;, 2nd argument &apos;NULL&apos; value is 0"/>
            <symbol>parent</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-maker.c" line="190" column="16"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-maker.c" line="206" column="16"/>
            <symbol>n</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;mime_maker_new&apos; argument 1 names different: declaration &apos;r_ctx&apos; definition &apos;r_maker&apos;." verbose="Function &apos;mime_maker_new&apos; argument 1 names different: declaration &apos;r_ctx&apos; definition &apos;r_maker&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-maker.c" line="87" column="31"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-maker.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-maker.h" line="27" column="43"/>
            <symbol>mime_maker_new</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-parser.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;mime_parser_new&apos; argument 1 names different: declaration &apos;r_ctx&apos; definition &apos;r_parser&apos;." verbose="Function &apos;mime_parser_new&apos; argument 1 names different: declaration &apos;r_ctx&apos; definition &apos;r_parser&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-parser.c" line="507" column="33"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-parser.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-parser.h" line="29" column="45"/>
            <symbol>mime_parser_new</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/no-libgcrypt.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ctx&apos; can be reduced." verbose="The scope of the variable &apos;ctx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/rfc822parse.c" line="405" column="23"/>
            <symbol>ctx</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;rfc822parse_open&apos; argument 2 names different: declaration &apos;opaque_value&apos; definition &apos;cb_value&apos;." verbose="Function &apos;rfc822parse_open&apos; argument 2 names different: declaration &apos;opaque_value&apos; definition &apos;cb_value&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/rfc822parse.c" line="300" column="46"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/rfc822parse.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/rfc822parse.h" line="54" column="60"/>
            <symbol>rfc822parse_open</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;rfc822parse_release_field&apos; argument 1 names different: declaration &apos;field&apos; definition &apos;ctx&apos;." verbose="Function &apos;rfc822parse_release_field&apos; argument 1 names different: declaration &apos;field&apos; definition &apos;ctx&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/rfc822parse.c" line="1044" column="48"/>
            <location file0="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/rfc822parse.c" file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/rfc822parse.h" line="73" column="53"/>
            <symbol>rfc822parse_release_field</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/rfc822parse.c" line="1187" column="19"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;length&apos; can be reduced." verbose="The scope of the variable &apos;length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/rfc822parse.c" line="1302" column="10"/>
            <symbol>length</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/send-mail.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/sockprox.c" line="183" column="10"/>
            <symbol>len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;written&apos; can be reduced." verbose="The scope of the variable &apos;written&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/sockprox.c" line="183" column="15"/>
            <symbol>written</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/sockprox.c" line="185" column="7"/>
            <symbol>ret</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/sockprox.c" line="225" column="7"/>
            <symbol>ret</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/sockprox.c" line="476" column="7"/>
            <symbol>c</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/sockprox.c" line="344" column="7"/>
            <symbol>err</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/symcryptrun.c" line="0" column="0"/>
        </error>
        <error id="useClosedFile" severity="error" msg="Used file that is not opened." verbose="Used file that is not opened." cwe="910">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/symcryptrun.c" line="409" column="38"/>
        </error>
        <error id="useClosedFile" severity="error" msg="Used file that is not opened." verbose="Used file that is not opened." cwe="910">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/symcryptrun.c" line="416" column="41"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;g&apos; can be reduced." verbose="The scope of the variable &apos;g&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/symcryptrun.c" line="123" column="29"/>
            <symbol>g</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;newline&apos; can be reduced." verbose="The scope of the variable &apos;newline&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/symcryptrun.c" line="649" column="11"/>
            <symbol>newline</symbol>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: (struct sockaddr_un*)0" verbose="Null pointer dereference: (struct sockaddr_un*)0" cwe="476" inconclusive="true">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/watchgnupg.c" line="416" column="20" info="Null pointer dereference"/>
            <symbol>(struct sockaddr_un*)0</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;AF_LOCAL;PF_LOCAL;SUN_LEN&apos; since the value of &apos;AF_LOCAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;AF_LOCAL;PF_LOCAL;SUN_LEN&apos; since the value of &apos;AF_LOCAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/watchgnupg.c" line="412" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;AF_LOCAL;PF_LOCAL;SUN_LEN&apos; since the value of &apos;PF_LOCAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;AF_LOCAL;PF_LOCAL;SUN_LEN&apos; since the value of &apos;PF_LOCAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/watchgnupg.c" line="371" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;AF_LOCAL;PF_LOCAL;SUN_LEN&apos; since the value of &apos;SUN_LEN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;AF_LOCAL;PF_LOCAL;SUN_LEN&apos; since the value of &apos;SUN_LEN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/watchgnupg.c" line="416" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PF_UNIX&apos; since the value of &apos;PF_UNIX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PF_UNIX&apos; since the value of &apos;PF_UNIX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/watchgnupg.c" line="371" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;VERSION&apos; since the value of &apos;VERSION&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;VERSION&apos; since the value of &apos;VERSION&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/watchgnupg.c" line="255" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-receive.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg&apos; can be reduced." verbose="The scope of the variable &apos;msg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-receive.c" line="265" column="17"/>
            <symbol>msg</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-receive.c" line="266" column="9"/>
            <symbol>value</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="0" column="0"/>
        </error>
        <error id="identicalConditionAfterEarlyExit" severity="warning" msg="Identical condition and return expression &apos;err&apos;, return value is always 0" verbose="Identical condition and return expression &apos;err&apos;, return value is always 0" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="1205" column="10" info="Returning identical expression &apos;err&apos;"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="1198" column="7" info="If condition &apos;err&apos; is true, the function will return/exit"/>
        </error>
        <error id="identicalConditionAfterEarlyExit" severity="warning" msg="Identical condition and return expression &apos;err&apos;, return value is always 0" verbose="Identical condition and return expression &apos;err&apos;, return value is always 0" cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="1230" column="10" info="Returning identical expression &apos;err&apos;"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="1218" column="7" info="If condition &apos;err&apos; is true, the function will return/exit"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_ptr&apos; can be reduced." verbose="The scope of the variable &apos;arg_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="80" column="11"/>
            <symbol>arg_ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nread&apos; can be reduced." verbose="The scope of the variable &apos;nread&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="717" column="10"/>
            <symbol>nread</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;written&apos; can be reduced." verbose="The scope of the variable &apos;written&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="717" column="17"/>
            <symbol>written</symbol>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: filepath" verbose="Null pointer dereference: filepath" cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="318" column="22" info="Dereferencing argument filepath that is null"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/plaintext.c" line="799" column="20" info="Calling function make_basename, 1st argument is null"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/plaintext.c" line="792" column="16" info="Assuming that condition &apos;filename&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="error" msg="Null pointer dereference: pk" verbose="Null pointer dereference: pk" cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyid.c" line="150" column="33" info="Dereferencing argument pk that is null"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1546" column="2" info="Calling function hash_public_key, 2nd argument is null"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="1011" column="27" info="Calling function make_keysig_packet, 5th argument is null"/>
        </error>
        <error id="ctunullpointer" severity="error" msg="Null pointer dereference: uid" verbose="Null pointer dereference: uid" cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="198" column="7" info="Dereferencing argument uid that is null"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1551" column="9" info="Calling function hash_uid, 3rd argument is null"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keyedit.c" line="4364" column="27" info="Calling function make_keysig_packet, 4th argument is null"/>
        </error>
        <error id="ctunullpointer" severity="error" msg="Null pointer dereference: pksk" verbose="Null pointer dereference: pksk" cwe="476">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sign.c" line="1501" column="22" info="Dereferencing argument pksk that is null"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="877" column="9" info="Calling function make_keysig_packet, 6th argument is null"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="1113" column="26" info="Calling function make_backsig, 5th argument is null"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="5091" column="58" info="Calling function &apos;write_keybinding&apos;, 4th argument &apos;NULL&apos; value is 0"/>
        </error>
        <error id="ctuuninitvar" severity="error" msg="Using argument ret_len that points at uninitialized variable len" verbose="Using argument ret_len that points at uninitialized variable len" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="446" column="18" info="Using argument ret_len"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1346" column="15" info="Calling function file_filter, 5th argument is uninitialized"/>
        </error>
        <error id="ctuuninitvar" severity="error" msg="Using argument length_of_buffer that points at uninitialized variable nline" verbose="Using argument length_of_buffer that points at uninitialized variable nline" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="2551" column="22" info="Using argument length_of_buffer"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keygen.c" line="4042" column="29" info="Calling function iobuf_read_line, 3rd argument is uninitialized"/>
        </error>
        <error id="ctuuninitvar" severity="error" msg="Using argument ret_len that points at uninitialized variable len" verbose="Using argument ret_len that points at uninitialized variable len" cwe="908">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="693" column="18" info="Using argument ret_len"/>
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1408" column="15" info="Calling function sock_filter, 5th argument is uninitialized"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;DllMain&apos; is never used." verbose="The function &apos;DllMain&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="45" column="0"/>
            <symbol>DllMain</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;add_days_to_timestamp&apos; is never used." verbose="The function &apos;add_days_to_timestamp&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/gettime.c" line="554" column="0"/>
            <symbol>add_days_to_timestamp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;agent_cache_housekeeping&apos; is never used." verbose="The function &apos;agent_cache_housekeeping&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cache.c" line="263" column="0"/>
            <symbol>agent_cache_housekeeping</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;agent_card_killscd&apos; is never used." verbose="The function &apos;agent_card_killscd&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="1329" column="0"/>
            <symbol>agent_card_killscd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;agent_flush_cache&apos; is never used." verbose="The function &apos;agent_flush_cache&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cache.c" line="283" column="0"/>
            <symbol>agent_flush_cache</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;agent_query_dump_state&apos; is never used." verbose="The function &apos;agent_query_dump_state&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="118" column="0"/>
            <symbol>agent_query_dump_state</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;agent_reload_trustlist&apos; is never used." verbose="The function &apos;agent_reload_trustlist&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/trustlist.c" line="817" column="0"/>
            <symbol>agent_reload_trustlist</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;agent_scd_check_aliveness&apos; is never used." verbose="The function &apos;agent_scd_check_aliveness&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="449" column="0"/>
            <symbol>agent_scd_check_aliveness</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;agent_scd_dump_state&apos; is never used." verbose="The function &apos;agent_scd_dump_state&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="150" column="0"/>
            <symbol>agent_scd_dump_state</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;apdu_enum_reader&apos; is never used." verbose="The function &apos;apdu_enum_reader&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="2262" column="0"/>
            <symbol>apdu_enum_reader</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;apdu_open_remote_reader&apos; is never used." verbose="The function &apos;apdu_open_remote_reader&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/apdu.c" line="2150" column="0"/>
            <symbol>apdu_open_remote_reader</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ascii_islower&apos; is never used." verbose="The function &apos;ascii_islower&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="779" column="0"/>
            <symbol>ascii_islower</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ascii_isupper&apos; is never used." verbose="The function &apos;ascii_isupper&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="773" column="0"/>
            <symbol>ascii_isupper</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ascii_strcmp&apos; is never used." verbose="The function &apos;ascii_strcmp&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="883" column="0"/>
            <symbol>ascii_strcmp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;attr_fetch_ldap&apos; is never used." verbose="The function &apos;attr_fetch_ldap&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap.c" line="276" column="0"/>
            <symbol>attr_fetch_ldap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;be_parse_conttype_name&apos; is never used." verbose="The function &apos;be_parse_conttype_name&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/backend.c" line="52" column="0"/>
            <symbol>be_parse_conttype_name</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;bump_card_eventcounter&apos; is never used." verbose="The function &apos;bump_card_eventcounter&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command.c" line="448" column="0"/>
            <symbol>bump_card_eventcounter</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;call_syshelp_release&apos; is never used." verbose="The function &apos;call_syshelp_release&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/call-syshelp.c" line="162" column="0"/>
            <symbol>call_syshelp_release</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;catch_alarm&apos; is never used." verbose="The function &apos;catch_alarm&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr_ldap.c" line="377" column="0"/>
            <symbol>catch_alarm</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cdb_make_exists&apos; is never used." verbose="The function &apos;cdb_make_exists&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/cdblib.c" line="733" column="0"/>
            <symbol>cdb_make_exists</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cdb_make_put&apos; is never used." verbose="The function &apos;cdb_make_put&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/cdblib.c" line="590" column="0"/>
            <symbol>cdb_make_put</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cdb_seek&apos; is never used." verbose="The function &apos;cdb_seek&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/cdblib.c" line="472" column="0"/>
            <symbol>cdb_seek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cert_cache_any_in_class&apos; is never used." verbose="The function &apos;cert_cache_any_in_class&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="832" column="0"/>
            <symbol>cert_cache_any_in_class</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cert_cache_deinit&apos; is never used." verbose="The function &apos;cert_cache_deinit&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="742" column="0"/>
            <symbol>cert_cache_deinit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cert_cache_init&apos; is never used." verbose="The function &apos;cert_cache_init&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/certcache.c" line="702" column="0"/>
            <symbol>cert_cache_init</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;check_backsig&apos; is never used." verbose="The function &apos;check_backsig&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/sig-check.c" line="743" column="0"/>
            <symbol>check_backsig</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;check_secret_key&apos; is never used." verbose="The function &apos;check_secret_key&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="535" column="0"/>
            <symbol>check_secret_key</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;checksum_u16&apos; is never used." verbose="The function &apos;checksum_u16&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" line="228" column="0"/>
            <symbol>checksum_u16</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;compress_filter_bz2&apos; is never used." verbose="The function &apos;compress_filter_bz2&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/compress-bz2.c" line="181" column="0"/>
            <symbol>compress_filter_bz2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;config_fetch&apos; is never used." verbose="The function &apos;config_fetch&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="846" column="0"/>
            <symbol>config_fetch</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;config_fetch_bool&apos; is never used." verbose="The function &apos;config_fetch_bool&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="873" column="0"/>
            <symbol>config_fetch_bool</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cpr_get_answer_okay_cancel&apos; is never used." verbose="The function &apos;cpr_get_answer_okay_cancel&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/cpr.c" line="629" column="0"/>
            <symbol>cpr_get_answer_okay_cancel</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deinitialize_module_cache&apos; is never used." verbose="The function &apos;deinitialize_module_cache&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cache.c" line="87" column="0"/>
            <symbol>deinitialize_module_cache</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deprecated_command&apos; is never used." verbose="The function &apos;deprecated_command&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" line="1097" column="0"/>
            <symbol>deprecated_command</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dirmngr_assuan_log_monitor&apos; is never used." verbose="The function &apos;dirmngr_assuan_log_monitor&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/server.c" line="2821" column="0"/>
            <symbol>dirmngr_assuan_log_monitor</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;disable_dns_tormode&apos; is never used." verbose="The function &apos;disable_dns_tormode&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="244" column="0"/>
            <symbol>disable_dns_tormode</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_ai_clear&apos; is never used." verbose="The function &apos;dns_ai_clear&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9984" column="0"/>
            <symbol>dns_ai_clear</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_ai_events&apos; is never used." verbose="The function &apos;dns_ai_events&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9990" column="0"/>
            <symbol>dns_ai_events</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_ai_pollfd&apos; is never used." verbose="The function &apos;dns_ai_pollfd&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9995" column="0"/>
            <symbol>dns_ai_pollfd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_ai_stat&apos; is never used." verbose="The function &apos;dns_ai_stat&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10071" column="0"/>
            <symbol>dns_ai_stat</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_ai_timeout&apos; is never used." verbose="The function &apos;dns_ai_timeout&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10000" column="0"/>
            <symbol>dns_ai_timeout</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_ai_trace&apos; is never used." verbose="The function &apos;dns_ai_trace&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="10076" column="0"/>
            <symbol>dns_ai_trace</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_anyconf_dump&apos; is never used." verbose="The function &apos;dns_anyconf_dump&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5963" column="0"/>
            <symbol>dns_anyconf_dump</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_b_get32&apos; is never used." verbose="The function &apos;dns_b_get32&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="1647" column="0"/>
            <symbol>dns_b_get32</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_b_put32&apos; is never used." verbose="The function &apos;dns_b_put32&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="1496" column="0"/>
            <symbol>dns_b_put32</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_cache_init&apos; is never used." verbose="The function &apos;dns_cache_init&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="7017" column="0"/>
            <symbol>dns_cache_init</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_hosts_mortal&apos; is never used." verbose="The function &apos;dns_hosts_mortal&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5100" column="0"/>
            <symbol>dns_hosts_mortal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_k_permutor_D&apos; is never used." verbose="The function &apos;dns_k_permutor_D&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="616" column="0"/>
            <symbol>dns_k_permutor_D</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_res_mortal&apos; is never used." verbose="The function &apos;dns_res_mortal&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="8404" column="0"/>
            <symbol>dns_res_mortal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_res_query&apos; is never used." verbose="The function &apos;dns_res_query&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9406" column="0"/>
            <symbol>dns_res_query</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_res_sethints&apos; is never used." verbose="The function &apos;dns_res_sethints&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9436" column="0"/>
            <symbol>dns_res_sethints</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_res_stub&apos; is never used." verbose="The function &apos;dns_res_stub&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="8288" column="0"/>
            <symbol>dns_res_stub</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_res_trace&apos; is never used." verbose="The function &apos;dns_res_trace&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="9443" column="0"/>
            <symbol>dns_res_trace</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_resconf_mortal&apos; is never used." verbose="The function &apos;dns_resconf_mortal&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5417" column="0"/>
            <symbol>dns_resconf_mortal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_resconf_root&apos; is never used." verbose="The function &apos;dns_resconf_root&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="5459" column="0"/>
            <symbol>dns_resconf_root</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_sigmask&apos; is never used." verbose="The function &apos;dns_sigmask&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="1153" column="0"/>
            <symbol>dns_sigmask</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_so_events&apos; is never used." verbose="The function &apos;dns_so_events&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="8083" column="0"/>
            <symbol>dns_so_events</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_so_trace&apos; is never used." verbose="The function &apos;dns_so_trace&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="8114" column="0"/>
            <symbol>dns_so_trace</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_strnlcpy&apos; is never used." verbose="The function &apos;dns_strnlcpy&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="784" column="0"/>
            <symbol>dns_strnlcpy</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_stuff_housekeeping&apos; is never used." verbose="The function &apos;dns_stuff_housekeeping&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="696" column="0"/>
            <symbol>dns_stuff_housekeeping</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_trace_abi&apos; is never used." verbose="The function &apos;dns_trace_abi&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4493" column="0"/>
            <symbol>dns_trace_abi</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_trace_get&apos; is never used." verbose="The function &apos;dns_trace_get&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4553" column="0"/>
            <symbol>dns_trace_get</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_trace_id&apos; is never used." verbose="The function &apos;dns_trace_id&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4544" column="0"/>
            <symbol>dns_trace_id</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dns_trace_setid&apos; is never used." verbose="The function &apos;dns_trace_setid&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns.c" line="4548" column="0"/>
            <symbol>dns_trace_setid</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;domaininfo_print_stats&apos; is never used." verbose="The function &apos;domaininfo_print_stats&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/domaininfo.c" line="84" column="0"/>
            <symbol>domaininfo_print_stats</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dotlock_get_fd&apos; is never used." verbose="The function &apos;dotlock_get_fd&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/dotlock.c" line="927" column="0"/>
            <symbol>dotlock_get_fd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;dotlock_set_fd&apos; is never used." verbose="The function &apos;dotlock_set_fd&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/dotlock.c" line="919" column="0"/>
            <symbol>dotlock_set_fd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;end_cert_fetch_ldap&apos; is never used." verbose="The function &apos;end_cert_fetch_ldap&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap.c" line="863" column="0"/>
            <symbol>end_cert_fetch_ldap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;enum_cert_paths&apos; is never used." verbose="The function &apos;enum_cert_paths&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/trustdb.c" line="1347" column="0"/>
            <symbol>enum_cert_paths</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;enum_cert_paths_print&apos; is never used." verbose="The function &apos;enum_cert_paths_print&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/trustdb.c" line="1362" column="0"/>
            <symbol>enum_cert_paths_print</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;fetch_next_cert&apos; is never used." verbose="The function &apos;fetch_next_cert&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlfetch.c" line="344" column="0"/>
            <symbol>fetch_next_cert</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;fetch_next_cert_ldap&apos; is never used." verbose="The function &apos;fetch_next_cert_ldap&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap.c" line="692" column="0"/>
            <symbol>fetch_next_cert_ldap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;g13_proxy_pinentry_notify&apos; is never used." verbose="The function &apos;g13_proxy_pinentry_notify&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/server.c" line="753" column="0"/>
            <symbol>g13_proxy_pinentry_notify</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;g13_server&apos; is never used." verbose="The function &apos;g13_server&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/server.c" line="597" column="0"/>
            <symbol>g13_server</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_h_errno_as_gpg_error&apos; is never used." verbose="The function &apos;get_h_errno_as_gpg_error&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="325" column="0"/>
            <symbol>get_h_errno_as_gpg_error</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_option_value&apos; is never used." verbose="The function &apos;get_option_value&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/server-help.c" line="139" column="0"/>
            <symbol>get_option_value</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gnupg_cachedir&apos; is never used." verbose="The function &apos;gnupg_cachedir&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/homedir.c" line="884" column="0"/>
            <symbol>gnupg_cachedir</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gnupg_clear_passphrase&apos; is never used." verbose="The function &apos;gnupg_clear_passphrase&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/get-passphrase.c" line="240" column="0"/>
            <symbol>gnupg_clear_passphrase</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gnupg_get_socket_name&apos; is never used." verbose="The function &apos;gnupg_get_socket_name&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="1292" column="0"/>
            <symbol>gnupg_get_socket_name</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gnupg_inotify_has_name&apos; is never used." verbose="The function &apos;gnupg_inotify_has_name&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="1232" column="0"/>
            <symbol>gnupg_inotify_has_name</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gnupg_inotify_watch_delete_self&apos; is never used." verbose="The function &apos;gnupg_inotify_watch_delete_self&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="1138" column="0"/>
            <symbol>gnupg_inotify_watch_delete_self</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gnupg_inotify_watch_socket&apos; is never used." verbose="The function &apos;gnupg_inotify_watch_socket&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="1175" column="0"/>
            <symbol>gnupg_inotify_watch_socket</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gnupg_mkdir_p&apos; is never used." verbose="The function &apos;gnupg_mkdir_p&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/mkdir_p.c" line="146" column="0"/>
            <symbol>gnupg_mkdir_p</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gnupg_module_name_flush_some&apos; is never used." verbose="The function &apos;gnupg_module_name_flush_some&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/homedir.c" line="1159" column="0"/>
            <symbol>gnupg_module_name_flush_some</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gpg_agent_get_confirmation&apos; is never used." verbose="The function &apos;gpg_agent_get_confirmation&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/call-agent.c" line="1636" column="0"/>
            <symbol>gpg_agent_get_confirmation</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gpg_decrypt_stream&apos; is never used." verbose="The function &apos;gpg_decrypt_stream&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/call-gpg.c" line="744" column="0"/>
            <symbol>gpg_decrypt_stream</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gpg_encrypt_stream&apos; is never used." verbose="The function &apos;gpg_encrypt_stream&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/call-gpg.c" line="576" column="0"/>
            <symbol>gpg_encrypt_stream</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gpgsm_format_name&apos; is never used." verbose="The function &apos;gpgsm_format_name&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/certdump.c" line="742" column="0"/>
            <symbol>gpgsm_format_name</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;have_trustdb&apos; is never used." verbose="The function &apos;have_trustdb&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/trustdb.c" line="521" column="0"/>
            <symbol>have_trustdb</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;http_escape_data&apos; is never used." verbose="The function &apos;http_escape_data&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="1654" column="0"/>
            <symbol>http_escape_data</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;http_register_netactivity_cb&apos; is never used." verbose="The function &apos;http_register_netactivity_cb&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="635" column="0"/>
            <symbol>http_register_netactivity_cb</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;http_register_tls_ca&apos; is never used." verbose="The function &apos;http_register_tls_ca&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="580" column="0"/>
            <symbol>http_register_tls_ca</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;http_register_tls_callback&apos; is never used." verbose="The function &apos;http_register_tls_callback&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-Only-use-SKS-pool-CA-for-SKS-pool.patch/dirmngr/http.c" line="569" column="0"/>
            <symbol>http_register_tls_callback</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;initialize_module_cache&apos; is never used." verbose="The function &apos;initialize_module_cache&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/cache.c" line="75" column="0"/>
            <symbol>initialize_module_cache</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;initialize_module_call_pinentry&apos; is never used." verbose="The function &apos;initialize_module_call_pinentry&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/call-pinentry.c" line="98" column="0"/>
            <symbol>initialize_module_call_pinentry</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;initialize_module_call_scd&apos; is never used." verbose="The function &apos;initialize_module_call_scd&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/gpg-agent-idling/agent-Avoid-tight-timer-tick-when-possible.patch/agent/call-scd.c" line="132" column="0"/>
            <symbol>initialize_module_call_scd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;initialize_module_trustlist&apos; is never used." verbose="The function &apos;initialize_module_trustlist&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/trustlist.c" line="81" column="0"/>
            <symbol>initialize_module_trustlist</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;iobuf_openrw&apos; is never used." verbose="The function &apos;iobuf_openrw&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1321" column="0"/>
            <symbol>iobuf_openrw</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;iobuf_print_chain&apos; is never used." verbose="The function &apos;iobuf_print_chain&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1091" column="0"/>
            <symbol>iobuf_print_chain</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;iobuf_set_limit&apos; is never used." verbose="The function &apos;iobuf_set_limit&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="2265" column="0"/>
            <symbol>iobuf_set_limit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;iobuf_sockopen&apos; is never used." verbose="The function &apos;iobuf_sockopen&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/iobuf.c" line="1393" column="0"/>
            <symbol>iobuf_sockopen</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;iso7816_general_authenticate&apos; is never used." verbose="The function &apos;iso7816_general_authenticate&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/iso7816.c" line="592" column="0"/>
            <symbol>iso7816_general_authenticate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;iso7816_list_directory&apos; is never used." verbose="The function &apos;iso7816_list_directory&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/iso7816.c" line="186" column="0"/>
            <symbol>iso7816_list_directory</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;iso7816_read_public_key&apos; is never used." verbose="The function &apos;iso7816_read_public_key&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/iso7816.c" line="674" column="0"/>
            <symbol>iso7816_read_public_key</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;keydb_search_issuer&apos; is never used." verbose="The function &apos;keydb_search_issuer&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keydb.c" line="1059" column="0"/>
            <symbol>keydb_search_issuer</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;keydb_search_kid&apos; is never used." verbose="The function &apos;keydb_search_kid&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/keydb.c" line="2087" column="0"/>
            <symbol>keydb_search_kid</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;keydb_update_cert&apos; is never used." verbose="The function &apos;keydb_update_cert&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/keydb.c" line="804" column="0"/>
            <symbol>keydb_update_cert</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;keyid_from_sig&apos; is never used." verbose="The function &apos;keyid_from_sig&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/from-master/gpg-default-to-3072-bit-RSA-keys.patch/g10/keyid.c" line="578" column="0"/>
            <symbol>keyid_from_sig</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;keyserver_import_cert&apos; is never used." verbose="The function &apos;keyserver_import_cert&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="437" column="0"/>
            <symbol>keyserver_import_cert</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;keyserver_import_ldap&apos; is never used." verbose="The function &apos;keyserver_import_ldap&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="472" column="0"/>
            <symbol>keyserver_import_ldap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;keyserver_import_name&apos; is never used." verbose="The function &apos;keyserver_import_name&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="464" column="0"/>
            <symbol>keyserver_import_name</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;keyserver_import_pka&apos; is never used." verbose="The function &apos;keyserver_import_pka&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="444" column="0"/>
            <symbol>keyserver_import_pka</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;keyserver_match&apos; is never used." verbose="The function &apos;keyserver_match&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="402" column="0"/>
            <symbol>keyserver_match</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ks_hkp_housekeeping&apos; is never used." verbose="The function &apos;ks_hkp_housekeeping&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/ks-engine-hkp.c" line="1100" column="0"/>
            <symbol>ks_hkp_housekeeping</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ks_hkp_reload&apos; is never used." verbose="The function &apos;ks_hkp_reload&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/dirmngr-idling/dirmngr-Avoid-need-for-hkp-housekeeping.patch/dirmngr/ks-engine-hkp.c" line="1127" column="0"/>
            <symbol>ks_hkp_reload</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ks_ldap_get&apos; is never used." verbose="The function &apos;ks_ldap_get&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="834" column="0"/>
            <symbol>ks_ldap_get</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ks_ldap_help&apos; is never used." verbose="The function &apos;ks_ldap_help&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="290" column="0"/>
            <symbol>ks_ldap_help</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ks_ldap_put&apos; is never used." verbose="The function &apos;ks_ldap_put&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="1867" column="0"/>
            <symbol>ks_ldap_put</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ks_ldap_search&apos; is never used." verbose="The function &apos;ks_ldap_search&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ks-engine-ldap.c" line="1020" column="0"/>
            <symbol>ks_ldap_search</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ldap_charray2str&apos; is never used." verbose="The function &apos;ldap_charray2str&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-url.c" line="318" column="0"/>
            <symbol>ldap_charray2str</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ldap_charray_add&apos; is never used." verbose="The function &apos;ldap_charray_add&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-url.c" line="113" column="0"/>
            <symbol>ldap_charray_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ldap_charray_dup&apos; is never used." verbose="The function &apos;ldap_charray_dup&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-url.c" line="235" column="0"/>
            <symbol>ldap_charray_dup</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ldap_charray_free&apos; is never used." verbose="The function &apos;ldap_charray_free&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-url.c" line="198" column="0"/>
            <symbol>ldap_charray_free</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ldap_charray_inlist&apos; is never used." verbose="The function &apos;ldap_charray_inlist&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-url.c" line="216" column="0"/>
            <symbol>ldap_charray_inlist</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ldap_charray_merge&apos; is never used." verbose="The function &apos;ldap_charray_merge&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap-url.c" line="158" column="0"/>
            <symbol>ldap_charray_merge</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ldap_wrapper_main&apos; is never used." verbose="The function &apos;ldap_wrapper_main&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dirmngr_ldap.c" line="227" column="0"/>
            <symbol>ldap_wrapper_main</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ldapserver_parse_one&apos; is never used." verbose="The function &apos;ldapserver_parse_one&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldapserver.c" line="62" column="0"/>
            <symbol>ldapserver_parse_one</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;log_logv_with_prefix&apos; is never used." verbose="The function &apos;log_logv_with_prefix&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/logging.c" line="888" column="0"/>
            <symbol>log_logv_with_prefix</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;log_printcanon&apos; is never used." verbose="The function &apos;log_printcanon&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" line="101" column="0"/>
            <symbol>log_printcanon</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;log_printsexp&apos; is never used." verbose="The function &apos;log_printsexp&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sexputil.c" line="121" column="0"/>
            <symbol>log_printsexp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;memrchr&apos; is never used." verbose="The function &apos;memrchr&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/stringhelp.c" line="1044" column="0"/>
            <symbol>memrchr</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mime_maker_add_body_data&apos; is never used." verbose="The function &apos;mime_maker_add_body_data&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-maker.c" line="458" column="0"/>
            <symbol>mime_maker_add_body_data</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mime_maker_dump_tree&apos; is never used." verbose="The function &apos;mime_maker_dump_tree&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-maker.c" line="180" column="0"/>
            <symbol>mime_maker_dump_tree</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mime_maker_set_verbose&apos; is never used." verbose="The function &apos;mime_maker_set_verbose&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/mime-maker.c" line="139" column="0"/>
            <symbol>mime_maker_set_verbose</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mountinfo_dump_all&apos; is never used." verbose="The function &apos;mountinfo_dump_all&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/mountinfo.c" line="188" column="0"/>
            <symbol>mountinfo_dump_all</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;move_kbnode&apos; is never used." verbose="The function &apos;move_kbnode&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/kbnode.c" line="330" column="0"/>
            <symbol>move_kbnode</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;path_add&apos; is never used." verbose="The function &apos;path_add&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="976" column="0"/>
            <symbol>path_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;path_remove&apos; is never used." verbose="The function &apos;path_remove&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="1088" column="0"/>
            <symbol>path_remove</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;percent_unescape&apos; is never used." verbose="The function &apos;percent_unescape&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/percent.c" line="179" column="0"/>
            <symbol>percent_unescape</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;percent_unescape_inplace&apos; is never used." verbose="The function &apos;percent_unescape_inplace&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/percent.c" line="235" column="0"/>
            <symbol>percent_unescape_inplace</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;pk_check_secret_key&apos; is never used." verbose="The function &apos;pk_check_secret_key&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkglue.c" line="362" column="0"/>
            <symbol>pk_check_secret_key</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;playsound&apos; is never used." verbose="The function &apos;playsound&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="120" column="0"/>
            <symbol>playsound</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;print_assuan_status_strings&apos; is never used." verbose="The function &apos;print_assuan_status_strings&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/asshelp2.c" line="127" column="0"/>
            <symbol>print_assuan_status_strings</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;print_fname_stdout&apos; is never used." verbose="The function &apos;print_fname_stdout&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" line="154" column="0"/>
            <symbol>print_fname_stdout</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;print_hexstring&apos; is never used." verbose="The function &apos;print_hexstring&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/miscellaneous.c" line="244" column="0"/>
            <symbol>print_hexstring</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;print_reported_error&apos; is never used." verbose="The function &apos;print_reported_error&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" line="384" column="0"/>
            <symbol>print_reported_error</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;read_key_from_file&apos; is never used." verbose="The function &apos;read_key_from_file&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/import-merge-without-userid/gpg-accept-subkeys-with-a-good-revocation-but-no-self-sig.patch/g10/import.c" line="319" column="0"/>
            <symbol>read_key_from_file</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;read_line&apos; is never used." verbose="The function &apos;read_line&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/xreadline.c" line="58" column="0"/>
            <symbol>read_line</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;recursive_resolver_p&apos; is never used." verbose="The function &apos;recursive_resolver_p&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="213" column="0"/>
            <symbol>recursive_resolver_p</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;remove_kbnode&apos; is never used." verbose="The function &apos;remove_kbnode&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/kbnode.c" line="304" column="0"/>
            <symbol>remove_kbnode</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;rfc822parse_finish&apos; is never used." verbose="The function &apos;rfc822parse_finish&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/rfc822parse.c" line="567" column="0"/>
            <symbol>rfc822parse_finish</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;runner_cancel_all&apos; is never used." verbose="The function &apos;runner_cancel_all&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/runner.c" line="483" column="0"/>
            <symbol>runner_cancel_all</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;runner_get_threads&apos; is never used." verbose="The function &apos;runner_get_threads&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g13/runner.c" line="120" column="0"/>
            <symbol>runner_get_threads</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;runonce&apos; is never used." verbose="The function &apos;runonce&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="105" column="0"/>
            <symbol>runonce</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;scheme_apply0&apos; is never used." verbose="The function &apos;scheme_apply0&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="5875" column="0"/>
            <symbol>scheme_apply0</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;scheme_call&apos; is never used." verbose="The function &apos;scheme_call&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="5902" column="0"/>
            <symbol>scheme_call</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;scheme_init_new&apos; is never used." verbose="The function &apos;scheme_init_new&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="5585" column="0"/>
            <symbol>scheme_init_new</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;scheme_register_foreign_func_list&apos; is never used." verbose="The function &apos;scheme_register_foreign_func_list&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="5864" column="0"/>
            <symbol>scheme_register_foreign_func_list</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;scheme_set_external_data&apos; is never used." verbose="The function &apos;scheme_set_external_data&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="5743" column="0"/>
            <symbol>scheme_set_external_data</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;scheme_set_input_port_string&apos; is never used." verbose="The function &apos;scheme_set_input_port_string&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="5731" column="0"/>
            <symbol>scheme_set_input_port_string</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;scheme_set_output_port_string&apos; is never used." verbose="The function &apos;scheme_set_output_port_string&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tests/gpgscm/scheme.c" line="5739" column="0"/>
            <symbol>scheme_set_output_port_string</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;select_mdc_from_pklist&apos; is never used." verbose="The function &apos;select_mdc_from_pklist&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkclist.c" line="1630" column="0"/>
            <symbol>select_mdc_from_pklist</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;send_status_printf&apos; is never used." verbose="The function &apos;send_status_printf&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/scd/command.c" line="1915" column="0"/>
            <symbol>send_status_printf</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;serve_mmapped_ssh_request&apos; is never used." verbose="The function &apos;serve_mmapped_ssh_request&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="3710" column="0"/>
            <symbol>serve_mmapped_ssh_request</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;service_create&apos; is never used." verbose="The function &apos;service_create&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="290" column="0"/>
            <symbol>service_create</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;service_delete&apos; is never used." verbose="The function &apos;service_delete&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="593" column="0"/>
            <symbol>service_delete</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;service_query&apos; is never used." verbose="The function &apos;service_query&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="383" column="0"/>
            <symbol>service_query</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;service_start&apos; is never used." verbose="The function &apos;service_start&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="453" column="0"/>
            <symbol>service_start</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;service_stop&apos; is never used." verbose="The function &apos;service_stop&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="515" column="0"/>
            <symbol>service_stop</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;set_dirmngr_options&apos; is never used." verbose="The function &apos;set_dirmngr_options&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/call-dirmngr.c" line="49" column="0"/>
            <symbol>set_dirmngr_options</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;set_dns_disable_ipv4&apos; is never used." verbose="The function &apos;set_dns_disable_ipv4&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="262" column="0"/>
            <symbol>set_dns_disable_ipv4</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;set_dns_disable_ipv6&apos; is never used." verbose="The function &apos;set_dns_disable_ipv6&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="271" column="0"/>
            <symbol>set_dns_disable_ipv6</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;set_dns_nameserver&apos; is never used." verbose="The function &apos;set_dns_nameserver&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/dns-stuff.c" line="297" column="0"/>
            <symbol>set_dns_nameserver</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;set_s2k_calibration_time&apos; is never used." verbose="The function &apos;set_s2k_calibration_time&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/protect.c" line="208" column="0"/>
            <symbol>set_s2k_calibration_time</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setup_pinentry_env&apos; is never used." verbose="The function &apos;setup_pinentry_env&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/sm/misc.c" line="42" column="0"/>
            <symbol>setup_pinentry_env</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;showsplash&apos; is never used." verbose="The function &apos;showsplash&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="213" column="0"/>
            <symbol>showsplash</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ssh_get_fingerprint&apos; is never used." verbose="The function &apos;ssh_get_fingerprint&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ssh-utils.c" line="333" column="0"/>
            <symbol>ssh_get_fingerprint</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;start_cert_fetch&apos; is never used." verbose="The function &apos;start_cert_fetch&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/crlfetch.c" line="316" column="0"/>
            <symbol>start_cert_fetch</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;start_cert_fetch_ldap&apos; is never used." verbose="The function &apos;start_cert_fetch_ldap&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap.c" line="514" column="0"/>
            <symbol>start_cert_fetch_ldap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;start_command_handler&apos; is never used." verbose="The function &apos;start_command_handler&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command.c" line="3310" column="0"/>
            <symbol>start_command_handler</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;start_command_handler_ssh&apos; is never used." verbose="The function &apos;start_command_handler_ssh&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/command-ssh.c" line="3649" column="0"/>
            <symbol>start_command_handler_ssh</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;start_default_fetch_ldap&apos; is never used." verbose="The function &apos;start_default_fetch_ldap&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap.c" line="470" column="0"/>
            <symbol>start_default_fetch_ldap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;stopsound&apos; is never used." verbose="The function &apos;stopsound&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/build-aux/speedo/w32/g4wihelp.c" line="135" column="0"/>
            <symbol>stopsound</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;strlist_copy&apos; is never used." verbose="The function &apos;strlist_copy&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/strlist.c" line="181" column="0"/>
            <symbol>strlist_copy</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tdbio_delete_record&apos; is never used." verbose="The function &apos;tdbio_delete_record&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="1759" column="0"/>
            <symbol>tdbio_delete_record</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tdbio_is_dirty&apos; is never used." verbose="The function &apos;tdbio_is_dirty&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tdbio.c" line="425" column="0"/>
            <symbol>tdbio_is_dirty</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tofu_closedbs&apos; is never used." verbose="The function &apos;tofu_closedbs&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="994" column="0"/>
            <symbol>tofu_closedbs</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tofu_get_policy&apos; is never used." verbose="The function &apos;tofu_get_policy&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="737" column="0"/>
            <symbol>tofu_get_policy</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tofu_get_validity&apos; is never used." verbose="The function &apos;tofu_get_validity&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="3741" column="0"/>
            <symbol>tofu_get_validity</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tofu_notice_key_changed&apos; is never used." verbose="The function &apos;tofu_notice_key_changed&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/gpgv.c" line="768" column="0"/>
            <symbol>tofu_notice_key_changed</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tofu_register_encryption&apos; is never used." verbose="The function &apos;tofu_register_encryption&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="3480" column="0"/>
            <symbol>tofu_register_encryption</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tofu_register_signature&apos; is never used." verbose="The function &apos;tofu_register_signature&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="3316" column="0"/>
            <symbol>tofu_register_signature</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tofu_set_policy&apos; is never used." verbose="The function &apos;tofu_set_policy&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="3884" column="0"/>
            <symbol>tofu_set_policy</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tofu_wot_trust_combine&apos; is never used." verbose="The function &apos;tofu_wot_trust_combine&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/tofu.c" line="3629" column="0"/>
            <symbol>tofu_wot_trust_combine</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;trans&apos; is never used." verbose="The function &apos;trans&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/agent/trans.c" line="38" column="0"/>
            <symbol>trans</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tty_cleanup_after_signal&apos; is never used." verbose="The function &apos;tty_cleanup_after_signal&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ttyio.c" line="718" column="0"/>
            <symbol>tty_cleanup_after_signal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tty_cleanup_rl_after_signal&apos; is never used." verbose="The function &apos;tty_cleanup_rl_after_signal&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ttyio.c" line="726" column="0"/>
            <symbol>tty_cleanup_rl_after_signal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tty_disable_completion&apos; is never used." verbose="The function &apos;tty_disable_completion&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ttyio.c" line="705" column="0"/>
            <symbol>tty_disable_completion</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tty_enable_completion&apos; is never used." verbose="The function &apos;tty_enable_completion&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/ttyio.c" line="693" column="0"/>
            <symbol>tty_enable_completion</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;unarmor_pump&apos; is never used." verbose="The function &apos;unarmor_pump&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/armor.c" line="1414" column="0"/>
            <symbol>unarmor_pump</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;unarmor_pump_new&apos; is never used." verbose="The function &apos;unarmor_pump_new&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/armor.c" line="1388" column="0"/>
            <symbol>unarmor_pump_new</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;unarmor_pump_release&apos; is never used." verbose="The function &apos;unarmor_pump_release&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/armor.c" line="1399" column="0"/>
            <symbol>unarmor_pump_release</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;unregister_secured_file&apos; is never used." verbose="The function &apos;unregister_secured_file&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/.pc/update-defaults/gpg-Default-to-SHA-512-for-all-signature-types-on-RS.patch/g10/misc.c" line="124" column="0"/>
            <symbol>unregister_secured_file</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;url_fetch_ldap&apos; is never used." verbose="The function &apos;url_fetch_ldap&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/ldap.c" line="205" column="0"/>
            <symbol>url_fetch_ldap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;w32_get_user_sid&apos; is never used." verbose="The function &apos;w32_get_user_sid&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/common/sysutils.c" line="1079" column="0"/>
            <symbol>w32_get_user_sid</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;warn_missing_mdc_from_pklist&apos; is never used." verbose="The function &apos;warn_missing_mdc_from_pklist&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/g10/pkclist.c" line="1654" column="0"/>
            <symbol>warn_missing_mdc_from_pklist</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;wkd_get_key&apos; is never used." verbose="The function &apos;wkd_get_key&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/call-dirmngr.c" line="267" column="0"/>
            <symbol>wkd_get_key</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;wkd_get_policy_flags&apos; is never used." verbose="The function &apos;wkd_get_policy_flags&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/call-dirmngr.c" line="213" column="0"/>
            <symbol>wkd_get_policy_flags</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;wkd_get_submission_address&apos; is never used." verbose="The function &apos;wkd_get_submission_address&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/call-dirmngr.c" line="139" column="0"/>
            <symbol>wkd_get_submission_address</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;wks_cmd_print_wkd_hash&apos; is never used." verbose="The function &apos;wks_cmd_print_wkd_hash&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="1192" column="0"/>
            <symbol>wks_cmd_print_wkd_hash</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;wks_cmd_print_wkd_url&apos; is never used." verbose="The function &apos;wks_cmd_print_wkd_url&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="1211" column="0"/>
            <symbol>wks_cmd_print_wkd_url</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;wks_set_status_fd&apos; is never used." verbose="The function &apos;wks_set_status_fd&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="46" column="0"/>
            <symbol>wks_set_status_fd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;wks_write_status&apos; is never used." verbose="The function &apos;wks_write_status&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/tools/wks-util.c" line="78" column="0"/>
            <symbol>wks_write_status</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;workqueue_run_global_tasks&apos; is never used." verbose="The function &apos;workqueue_run_global_tasks&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="141" column="0"/>
            <symbol>workqueue_run_global_tasks</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;workqueue_run_post_session_tasks&apos; is never used." verbose="The function &apos;workqueue_run_post_session_tasks&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/gnupg2-2.2.19/dirmngr/workqueue.c" line="176" column="0"/>
            <symbol>workqueue_run_post_session_tasks</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
