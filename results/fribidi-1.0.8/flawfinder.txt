/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-benchmark.c:80:5:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    fprintf (stderr, fmt, arg);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-benchmark.c:120:3:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  printf (appname " %s", fribidi_version_info);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:77:5:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    fprintf (stderr, fmt, arg);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:168:3:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  printf (appname " %s", fribidi_version_info);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:183:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy (m, s);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-arabic-shaping-tab.c:65:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": %s\n", msg);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-arabic-shaping-tab.c:75:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-arabic-shaping-tab.c:76:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, p);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-arabic-shaping-tab.c:88:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-arabic-shaping-tab.c:89:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, p, q);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-arabic-shaping-tab.c:101:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-arabic-shaping-tab.c:102:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, l, p);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-bidi-type-tab.c:65:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": %s\n", msg);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-bidi-type-tab.c:75:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-bidi-type-tab.c:76:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, p);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-bidi-type-tab.c:88:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-bidi-type-tab.c:89:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, l, p);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:67:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": %s\n", msg);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:77:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:78:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, p);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:90:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:91:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, p, q);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:104:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:105:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, l, p, q);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-type-tab.c:67:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": %s\n", msg);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-type-tab.c:77:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-type-tab.c:78:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, p);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-type-tab.c:91:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-type-tab.c:92:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, l, p, q);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:65:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": %s\n", msg);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:75:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:76:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, p);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:88:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:89:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, p, q);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:101:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:102:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, l, p);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-mirroring-tab.c:65:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": %s\n", msg);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-mirroring-tab.c:75:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-mirroring-tab.c:76:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, p);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-mirroring-tab.c:89:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-mirroring-tab.c:90:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, l, p, q);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-unicode-version.c:63:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": %s\n", msg);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-unicode-version.c:73:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, appname ": ");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-unicode-version.c:74:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, fmt, p);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-unicode-version.c:93:16:  [4] (buffer) sscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. If the scanf format is influenceable by an attacker, it's exploitable.
			      (3 == sscanf (where, \
/home/capstone/Desktop/root/fribidi-1.0.8/lib/debug.h:50:26:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define FRIBIDI_FPRINTF fprintf
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-char-sets-cap-rtl.c:331:8:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
  i += sprintf (s + i,		/*l - i, */
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-char-sets-cap-rtl.c:343:12:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
      i += sprintf (s + i, /*l - i, */ "  * 0x%02x %c%c %-3s ", j,
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-char-sets-cap-rtl.c:348:8:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
  i += sprintf (s + i,		/*l - i, */
/home/capstone/Desktop/root/fribidi-1.0.8/test/unicode-conformance/BidiCharacterTest.c:113:3:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  vfprintf(stderr, fmt, ap);
/home/capstone/Desktop/root/fribidi-1.0.8/test/unicode-conformance/BidiTest.c:114:5:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    vfprintf(stderr, fmt, ap);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-benchmark.c:265:11:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
      c = getopt_long (argc, argv, "hVn:", long_options, &option_index);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:216:21:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  if ((s = (char *) getenv ("COLUMNS")))
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:267:2:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
	getopt_long (argc, argv, "hVvdtc:w:B:E:", long_options,
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:145:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#ifndef getenv
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:146:14:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
extern char *getenv (
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:291:28:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  d->__posixly_correct = !!getenv ("POSIXLY_CORRECT");
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:1185:1:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
getopt (
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:1215:11:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
      c = getopt (argc, argv, "abc:d:0123456789");
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.h:152:14:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
  extern int getopt (
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.h:158:14:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
  extern int getopt (
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.h:163:14:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
  extern int getopt_long (
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt1.c:63:1:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
getopt_long (
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt1.c:148:11:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
      c = getopt_long (argc, argv, "abc:d:0123456789",
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-benchmark.c:280:12:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
	  niter = atoi (optarg);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-caprtl2utf8.c:5:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char buf[BUFSIZ];
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-caprtl2utf8.c:18:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char eol[5];
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:220:11:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      i = atoi (s);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:286:17:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
	  text_width = atoi (optarg);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:363:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	  IN = fopen (filename, "r");
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:375:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char S_[MAX_STR_LEN];
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:385:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char outstring[MAX_STR_LEN];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-arabic-shaping-tab.c:135:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char buf[4000];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-arabic-shaping-tab.c:136:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char tag[sizeof (buf)], buf2[sizeof (buf)];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-arabic-shaping-tab.c:215:17:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      if (!(f = fopen (data_file_name[0], "rt")))
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-arabic-shaping-tab.c:292:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    int max_depth = atoi (argv[1]);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-bidi-type-tab.c:120:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const char *names[type_names_count];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-bidi-type-tab.c:140:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char buf[4000];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-bidi-type-tab.c:141:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char tp[sizeof (buf)];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-bidi-type-tab.c:299:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if (!(f = fopen (data_file_name, "rt")))
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-bidi-type-tab.c:350:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    int max_depth = atoi (argv[1]);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:115:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char buf[4000];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:141:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char buf[4000];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:157:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char ce_string[256]; /* For parsing the equivalence */
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:265:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if (!(f = fopen (uni_datafile_name, "rt")))
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:274:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if (!(f = fopen (bracket_datafile_name, "rt")))
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-tab.c:334:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    int max_depth = atoi (argv[1]);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-type-tab.c:101:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char buf[4000];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-type-tab.c:171:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if (!(f = fopen (data_file_name, "rt")))
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-brackets-type-tab.c:227:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    int max_depth = atoi (argv[1]);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:129:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const char *names[type_names_count];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:182:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char buf[4000];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:183:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char tp[sizeof (buf)], tp_gen[sizeof (buf)], tp_bidi[sizeof (buf)];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:291:17:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      if (!(f = fopen (data_file_name[0], "rt")))
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-joining-type-tab.c:346:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    int max_depth = atoi (argv[1]);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-mirroring-tab.c:99:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char buf[4000];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-mirroring-tab.c:174:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if (!(f = fopen (data_file_name, "rt")))
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-mirroring-tab.c:232:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    int max_depth = atoi (argv[1]);
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-unicode-version.c:80:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char unicode_version[100];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-unicode-version.c:81:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char buf[4000];
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-unicode-version.c:89:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
  strcpy (unicode_version, "(unknown)");
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-unicode-version.c:119:3:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
  sprintf (unicode_version, "%d.%d.%d", version_major, version_minor,
/home/capstone/Desktop/root/fribidi-1.0.8/gen.tab/gen-unicode-version.c:133:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if (!(f = fopen (data_file_name, "rt")))
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-bidi.c:64:15:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FriBidiRun *open;
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-bidi.c:408:60:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
                                               FriBidiRun *open,
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-bidi.c:412:16:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  node->open = open;
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-bidi.c:1104:30:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
          for (ppn = ppairs->open; ppn!= ppairs->close; ppn = ppn->next)
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-bidi.c:1116:35:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
                  RL_TYPE(ppairs->open) = RL_TYPE(ppairs->close) = this_level%2 ? FRIBIDI_TYPE_RTL : FRIBIDI_TYPE_LTR;
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-bidi.c:1128:56:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
              int iso_level = RL_ISOLATE_LEVEL(ppairs->open);
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-bidi.c:1141:34:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
              for (ppn = ppairs->open; ppn!= ppairs->close; ppn = ppn->next)
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-bidi.c:1150:39:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
                      RL_TYPE(ppairs->open) = RL_TYPE(ppairs->close) = prec_strong_level % 2 ? FRIBIDI_TYPE_RTL : FRIBIDI_TYPE_LTR;
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi-char-sets-cap-rtl.c:84:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char mark[CAPRTL_CHARS];
/home/capstone/Desktop/root/fribidi-1.0.8/lib/fribidi.c:245:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (visual_str, str, len * sizeof (*visual_str));
/home/capstone/Desktop/root/fribidi-1.0.8/test/unicode-conformance/BidiCharacterTest.c:173:20:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
  *paragraph_dir = atoi(line);
/home/capstone/Desktop/root/fribidi-1.0.8/test/unicode-conformance/BidiCharacterTest.c:185:41:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
  *resolved_paragraph_embedding_level = atoi(line);
/home/capstone/Desktop/root/fribidi-1.0.8/test/unicode-conformance/BidiCharacterTest.c:250:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char line[LINE_SIZE];
/home/capstone/Desktop/root/fribidi-1.0.8/test/unicode-conformance/BidiCharacterTest.c:287:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    channel = fopen(filename, "r");
/home/capstone/Desktop/root/fribidi-1.0.8/test/unicode-conformance/BidiTest.c:256:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char line[LINE_SIZE];
/home/capstone/Desktop/root/fribidi-1.0.8/test/unicode-conformance/BidiTest.c:286:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    channel = fopen(filename, "r");
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-benchmark.c:167:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen (S_);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-caprtl2utf8.c:20:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      FriBidiStrIndex len = strlen (buf);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-caprtl2utf8.c:23:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy (eol, buf + len, sizeof eol);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:179:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  m = fribidi_malloc (strlen (s) + 1);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:391:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    len = strlen (S_);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/fribidi-main.c:485:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
						       strlen (outstring) -
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:321:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	      int len = d->__nonoption_flags_max_len = strlen (orig_str);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:554:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		== (unsigned int) strlen (p->name))
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:605:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:675:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		  d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:717:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		  d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:722:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:935:5:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		  strlen (p->name))
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:983:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:1028:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:1068:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/fribidi-1.0.8/bin/getopt.c:1072:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/fribidi-1.0.8/test/unicode-conformance/BidiCharacterTest.c:294:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      len = strlen(line);
/home/capstone/Desktop/root/fribidi-1.0.8/test/unicode-conformance/BidiTest.c:293:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen(line);
