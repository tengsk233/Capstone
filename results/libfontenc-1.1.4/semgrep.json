{"version":"1.99.0","results":[{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":39,"col":25,"offset":1530},"end":{"line":39,"col":34,"offset":1539},"extra":{"metavars":{"$1":{"start":{"line":2,"col":3,"offset":5},"end":{"line":2,"col":4,"offset":6},"abstract_content":"c"},"$FUN":{"start":{"line":39,"col":25,"offset":1530},"end":{"line":39,"col":31,"offset":1536},"abstract_content":"gzgetc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"6f3a4ac03734b81c7cd1596e8821cff2e3b4ff4edc3f59818a18f3beef65fb12198651169760471f6796679a0da9162bbb6f7b3703a1dbf0cc4fbc70265ea65a_0","lines":"#define FontFileGetc(f) gzgetc(f)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":40,"col":32,"offset":1571},"end":{"line":40,"col":54,"offset":1593},"extra":{"metavars":{"$FUN":{"start":{"line":40,"col":32,"offset":1571},"end":{"line":40,"col":38,"offset":1577},"abstract_content":"gzopen"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"679308d614494182712d49965e3c17243591ed4ac0b8a1afb0cd4c951fbba5f81dd7d89024f2312c636de1d3bb6c7c65bc8fa57579ac27cbab2823a35f7b035f_0","lines":"#define FontFileOpen(filename) gzopen(filename, \"rb\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":98,"col":14,"offset":2715},"end":{"line":98,"col":19,"offset":2720},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":98,"col":14,"offset":2715},"end":{"line":98,"col":15,"offset":2716},"abstract_content":"n"},"$SIGNED":{"start":{"line":98,"col":18,"offset":2719},"end":{"line":98,"col":19,"offset":2720},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"dc37e93d1f8321c14e6932cab663d9529854adc7941fd4e6144495c9fe3af9f6e0f29fe7e881eee983cb1c9a74f85331472ca63f7b4f46bfe3f3490251601073_0","lines":"    unsigned n = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-missing-break-in-switch","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":218,"col":13,"offset":5178},"end":{"line":218,"col":18,"offset":5183},"extra":{"metavars":{"$VAR":{"start":{"line":218,"col":13,"offset":5178},"end":{"line":218,"col":18,"offset":5183},"abstract_content":"token"},"$VAL2":{"start":{"line":219,"col":10,"offset":5196},"end":{"line":219,"col":19,"offset":5205},"abstract_content":"EOF_TOKEN"},"$VAL1":{"start":{"line":251,"col":10,"offset":6099},"end":{"line":251,"col":23,"offset":6112},"abstract_content":"KEYWORD_TOKEN"}},"message":"The software omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/484","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://github.com/returntocorp/semgrep/issues/4939"],"confidence":"LOW"},"severity":"INFO","fingerprint":"d87b819d67dfc795aa33064512d9d814892f8d606fc1ff445e99d19914d6e002c7befae6faced842fc6092022bd3dff6cfb0f709b0871ecd092f03ffffba6e97_0","lines":"    switch (token) {","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-missing-break-in-switch","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":228,"col":17,"offset":5432},"end":{"line":228,"col":22,"offset":5437},"extra":{"metavars":{"$VAR":{"start":{"line":228,"col":17,"offset":5432},"end":{"line":228,"col":22,"offset":5437},"abstract_content":"token"},"$VAL2":{"start":{"line":229,"col":14,"offset":5454},"end":{"line":229,"col":26,"offset":5466},"abstract_content":"NUMBER_TOKEN"},"$VAL1":{"start":{"line":242,"col":14,"offset":5864},"end":{"line":242,"col":27,"offset":5877},"abstract_content":"KEYWORD_TOKEN"}},"message":"The software omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/484","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://github.com/returntocorp/semgrep/issues/4939"],"confidence":"LOW"},"severity":"INFO","fingerprint":"a651891af90a176383f076a8a5a62cb7ce20754b008a96f9fe9985ef2084d6cdca7a4d9a871bb0626ff16bdf1a92b7bf94bce33b4a93aefc2eb5b05d5c556db8_0","lines":"        switch (token) {","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":447,"col":9,"offset":11874},"end":{"line":447,"col":54,"offset":11919},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":447,"col":9,"offset":11874},"end":{"line":447,"col":14,"offset":11879},"abstract_content":"index"},"$SIGNED":{"start":{"line":447,"col":26,"offset":11891},"end":{"line":447,"col":27,"offset":11892},"abstract_content":"8"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"144411cc71635b3e7c776776fbed96fca1ee6e9b2f7f505e424b08855dd4cc9b27ebad6f0534d89c0918de1b250abfc67dc3633e7113eb60ff51ec2eb2be8dd5_0","lines":"        index = (from >> 8) * row_size + (from & 0xFF);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-wraparound","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":456,"col":16,"offset":12212},"end":{"line":456,"col":59,"offset":12255},"extra":{"metavars":{"$FUN":{"start":{"line":456,"col":16,"offset":12212},"end":{"line":456,"col":22,"offset":12218},"abstract_content":"malloc"},"$X":{"start":{"line":456,"col":24,"offset":12220},"end":{"line":456,"col":32,"offset":12228},"abstract_content":"*encsize"},"$Y":{"start":{"line":456,"col":36,"offset":12232},"end":{"line":456,"col":58,"offset":12254},"abstract_content":"sizeof(unsigned short)"}},"message":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/190","https://cwe.mitre.org/data/definitions/128","https://cwe.mitre.org/data/definitions/131","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples","https://dustri.org/b/playing-with-weggli.html"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"5acc1cf29f8805af532d24e85dd21d77ce02b583a776c93207c8933a898e70067c3ed7c32e452b5a68facefa289d4adb98449695f65c111279763a0d883a97d0_0","lines":"        *enc = malloc((*encsize) * sizeof(unsigned short));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":456,"col":16,"offset":12212},"end":{"line":456,"col":59,"offset":12255},"extra":{"metavars":{"$FUN":{"start":{"line":456,"col":16,"offset":12212},"end":{"line":456,"col":22,"offset":12218},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_0","lines":"        *enc = malloc((*encsize) * sizeof(unsigned short));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-wraparound","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":465,"col":14,"offset":12446},"end":{"line":465,"col":64,"offset":12496},"extra":{"metavars":{"$FUN":{"start":{"line":465,"col":14,"offset":12446},"end":{"line":465,"col":21,"offset":12453},"abstract_content":"realloc"},"$ARG1":{"start":{"line":465,"col":22,"offset":12454},"end":{"line":465,"col":26,"offset":12458},"abstract_content":"*enc"},"$X":{"start":{"line":465,"col":29,"offset":12461},"end":{"line":465,"col":37,"offset":12469},"abstract_content":"*encsize"},"$Y":{"start":{"line":465,"col":41,"offset":12473},"end":{"line":465,"col":63,"offset":12495},"abstract_content":"sizeof(unsigned short)"}},"message":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/190","https://cwe.mitre.org/data/definitions/128","https://cwe.mitre.org/data/definitions/131","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples","https://dustri.org/b/playing-with-weggli.html"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"cb93c0cdfd5de9405c6e8a41ead28a8b9877e84b93de79a38957651a6a739b8e2585454aca3876232aa3e2f37e081f08deefc78aa2bb5f3960d4d2a0dca37b0d_0","lines":"             realloc(*enc, (*encsize) * sizeof(unsigned short))) == NULL)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":465,"col":14,"offset":12446},"end":{"line":465,"col":64,"offset":12496},"extra":{"metavars":{"$FUN":{"start":{"line":465,"col":14,"offset":12446},"end":{"line":465,"col":21,"offset":12453},"abstract_content":"realloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"c2f6ca78128b7f5c8316d0e234cdcd43a24d85712df8bad0badaf8e760ec905630bf432074177e6d9f5400dbdf7e39c0c91c19275770f3a68c643a58f083ce53_0","lines":"             realloc(*enc, (*encsize) * sizeof(unsigned short))) == NULL)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":478,"col":14,"offset":12784},"end":{"line":478,"col":27,"offset":12797},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":478,"col":14,"offset":12784},"end":{"line":478,"col":15,"offset":12785},"abstract_content":"i"},"$SIGNED":{"start":{"line":478,"col":26,"offset":12796},"end":{"line":478,"col":27,"offset":12797},"abstract_content":"1"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"8a2387c5bd3b41fac24ed485b53d45281c4a65545e0fe4b0ec1d4352d12fc9811d25ee273c21b878c1369e8e237c657f8712ae03929b750530598f7be3550331_0","lines":"        for (i = *last + 1; i <= index; i++)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":503,"col":17,"offset":13506},"end":{"line":503,"col":31,"offset":13520},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":503,"col":17,"offset":13506},"end":{"line":503,"col":22,"offset":13511},"abstract_content":"first"},"$SIGNED":{"start":{"line":503,"col":25,"offset":13514},"end":{"line":503,"col":31,"offset":13520},"abstract_content":"0xFFFF"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"61ad0843a72f7888215fa6f0b1db0f91b5de39e8a584651ebcbe6bc75c6e24e69684bcc862f65efade65f9981272d5c1fe9d6d802875afad2eeb5ba41b450fc5_0","lines":"    unsigned i, first = 0xFFFF, last = 0, encsize = 0, namsize = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":503,"col":33,"offset":13522},"end":{"line":503,"col":41,"offset":13530},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":503,"col":33,"offset":13522},"end":{"line":503,"col":37,"offset":13526},"abstract_content":"last"},"$SIGNED":{"start":{"line":503,"col":40,"offset":13529},"end":{"line":503,"col":41,"offset":13530},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"b9ba5fdcb990605e4cd0c2a705be8e74b61cd41ca292e685847ab21c87445fa5e90a23a8814554375f697cb5a47d18cfdb9da7f2d78f2e1b142d4167cb8754a4_0","lines":"    unsigned i, first = 0xFFFF, last = 0, encsize = 0, namsize = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":503,"col":43,"offset":13532},"end":{"line":503,"col":54,"offset":13543},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":503,"col":43,"offset":13532},"end":{"line":503,"col":50,"offset":13539},"abstract_content":"encsize"},"$SIGNED":{"start":{"line":503,"col":53,"offset":13542},"end":{"line":503,"col":54,"offset":13543},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"d81df674fced0b2ec597bfa8bd26288b8c96dda95aeb9abf6bc34510a627ad88774621b94ebdc52b49d45f8f4573b26940714365f28e4d6381096e47c58eaf9d_0","lines":"    unsigned i, first = 0xFFFF, last = 0, encsize = 0, namsize = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":503,"col":56,"offset":13545},"end":{"line":503,"col":67,"offset":13556},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":503,"col":56,"offset":13545},"end":{"line":503,"col":63,"offset":13552},"abstract_content":"namsize"},"$SIGNED":{"start":{"line":503,"col":66,"offset":13555},"end":{"line":503,"col":67,"offset":13556},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"a719e75d431d48f949bd3d8273b5add7a133a02bada0d9e7d01db1b1eeb5c7012d63247267806978c56270a1c5a7a71efb16f0f279e13c209cf0b136377e9932_0","lines":"    unsigned i, first = 0xFFFF, last = 0, encsize = 0, namsize = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":521,"col":20,"offset":14007},"end":{"line":521,"col":46,"offset":14033},"extra":{"metavars":{"$FUN":{"start":{"line":521,"col":20,"offset":14007},"end":{"line":521,"col":26,"offset":14013},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_1","lines":"        encoding = malloc(sizeof(FontEncRec));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":562,"col":23,"offset":15178},"end":{"line":562,"col":49,"offset":15204},"extra":{"metavars":{"$FUN":{"start":{"line":562,"col":23,"offset":15178},"end":{"line":562,"col":29,"offset":15184},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_2","lines":"            mapping = malloc(sizeof(FontMapRec));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":575,"col":23,"offset":15636},"end":{"line":575,"col":49,"offset":15662},"extra":{"metavars":{"$FUN":{"start":{"line":575,"col":23,"offset":15636},"end":{"line":575,"col":29,"offset":15642},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_3","lines":"            mapping = malloc(sizeof(FontMapRec));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":588,"col":23,"offset":16111},"end":{"line":588,"col":49,"offset":16137},"extra":{"metavars":{"$FUN":{"start":{"line":588,"col":23,"offset":16111},"end":{"line":588,"col":29,"offset":16117},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_4","lines":"            mapping = malloc(sizeof(FontMapRec));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":628,"col":37,"offset":17183},"end":{"line":628,"col":72,"offset":17218},"extra":{"metavars":{"$FUN":{"start":{"line":628,"col":37,"offset":17183},"end":{"line":628,"col":43,"offset":17189},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_5","lines":"        mapping->client_data = sm = malloc(sizeof(FontEncSimpleMapRec));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-wraparound","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":637,"col":22,"offset":17469},"end":{"line":637,"col":62,"offset":17509},"extra":{"metavars":{"$FUN":{"start":{"line":637,"col":22,"offset":17469},"end":{"line":637,"col":28,"offset":17475},"abstract_content":"malloc"},"$X":{"start":{"line":637,"col":29,"offset":17476},"end":{"line":637,"col":36,"offset":17483},"abstract_content":"sm->->len"},"$Y":{"start":{"line":637,"col":39,"offset":17486},"end":{"line":637,"col":61,"offset":17508},"abstract_content":"sizeof(unsigned short)"}},"message":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/190","https://cwe.mitre.org/data/definitions/128","https://cwe.mitre.org/data/definitions/131","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples","https://dustri.org/b/playing-with-weggli.html"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"c6e9122acc4971ee3b02ded9b2b752654fdff7441d370aece20a181e7dbbb2528987392b7e96846936c1b656485b650bfb82a411d84700841eef531fed105cee_0","lines":"            newmap = malloc(sm->len * sizeof(unsigned short));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":637,"col":22,"offset":17469},"end":{"line":637,"col":62,"offset":17509},"extra":{"metavars":{"$FUN":{"start":{"line":637,"col":22,"offset":17469},"end":{"line":637,"col":28,"offset":17475},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_6","lines":"            newmap = malloc(sm->len * sizeof(unsigned short));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":643,"col":18,"offset":17680},"end":{"line":643,"col":23,"offset":17685},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":643,"col":18,"offset":17680},"end":{"line":643,"col":19,"offset":17681},"abstract_content":"i"},"$SIGNED":{"start":{"line":643,"col":22,"offset":17684},"end":{"line":643,"col":23,"offset":17685},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"6f6ec4469800e87d5de2b32b6d753ddd2f9b10eee7177d9307f7f012a70ebd0b901ed1ca55085b2fc0906c192d6473f394080844fd2f7650ea93a7c759ac7914_0","lines":"            for (i = 0; i < sm->len; i++)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":654,"col":9,"offset":17970},"end":{"line":654,"col":23,"offset":17984},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":654,"col":9,"offset":17970},"end":{"line":654,"col":14,"offset":17975},"abstract_content":"first"},"$SIGNED":{"start":{"line":654,"col":17,"offset":17978},"end":{"line":654,"col":23,"offset":17984},"abstract_content":"0xFFFF"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"61ad0843a72f7888215fa6f0b1db0f91b5de39e8a584651ebcbe6bc75c6e24e69684bcc862f65efade65f9981272d5c1fe9d6d802875afad2eeb5ba41b450fc5_1","lines":"        first = 0xFFFF;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":655,"col":9,"offset":17994},"end":{"line":655,"col":17,"offset":18002},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":655,"col":9,"offset":17994},"end":{"line":655,"col":13,"offset":17998},"abstract_content":"last"},"$SIGNED":{"start":{"line":655,"col":16,"offset":18001},"end":{"line":655,"col":17,"offset":18002},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"b9ba5fdcb990605e4cd0c2a705be8e74b61cd41ca292e685847ab21c87445fa5e90a23a8814554375f697cb5a47d18cfdb9da7f2d78f2e1b142d4167cb8754a4_1","lines":"        last = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":712,"col":37,"offset":19802},"end":{"line":712,"col":73,"offset":19838},"extra":{"metavars":{"$FUN":{"start":{"line":712,"col":37,"offset":19802},"end":{"line":712,"col":43,"offset":19808},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_7","lines":"        mapping->client_data = sn = malloc(sizeof(FontEncSimpleNameRec));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-wraparound","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":722,"col":19,"offset":20099},"end":{"line":722,"col":51,"offset":20131},"extra":{"metavars":{"$FUN":{"start":{"line":722,"col":19,"offset":20099},"end":{"line":722,"col":25,"offset":20105},"abstract_content":"malloc"},"$X":{"start":{"line":722,"col":26,"offset":20106},"end":{"line":722,"col":33,"offset":20113},"abstract_content":"sn->->len"},"$Y":{"start":{"line":722,"col":36,"offset":20116},"end":{"line":722,"col":50,"offset":20130},"abstract_content":"sizeof(char*)"}},"message":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/190","https://cwe.mitre.org/data/definitions/128","https://cwe.mitre.org/data/definitions/131","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples","https://dustri.org/b/playing-with-weggli.html"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"e90e9cfe4ce902f865ee99cad4abfb275ccd9a39ecaa2e8ab907faa664590db65d63c8c44b63047f053a632408f7a3f8e6eedef989f9e38c92855460270f113c_0","lines":"        sn->map = malloc(sn->len * sizeof(char *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":722,"col":19,"offset":20099},"end":{"line":722,"col":51,"offset":20131},"extra":{"metavars":{"$FUN":{"start":{"line":722,"col":19,"offset":20099},"end":{"line":722,"col":25,"offset":20105},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_8","lines":"        sn->map = malloc(sn->len * sizeof(char *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":728,"col":14,"offset":20279},"end":{"line":728,"col":19,"offset":20284},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":728,"col":14,"offset":20279},"end":{"line":728,"col":15,"offset":20280},"abstract_content":"i"},"$SIGNED":{"start":{"line":728,"col":18,"offset":20283},"end":{"line":728,"col":19,"offset":20284},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"6f6ec4469800e87d5de2b32b6d753ddd2f9b10eee7177d9307f7f012a70ebd0b901ed1ca55085b2fc0906c192d6473f394080844fd2f7650ea93a7c759ac7914_1","lines":"        for (i = 0; i < sn->len; i++)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":732,"col":9,"offset":20421},"end":{"line":732,"col":23,"offset":20435},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":732,"col":9,"offset":20421},"end":{"line":732,"col":14,"offset":20426},"abstract_content":"first"},"$SIGNED":{"start":{"line":732,"col":17,"offset":20429},"end":{"line":732,"col":23,"offset":20435},"abstract_content":"0xFFFF"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"61ad0843a72f7888215fa6f0b1db0f91b5de39e8a584651ebcbe6bc75c6e24e69684bcc862f65efade65f9981272d5c1fe9d6d802875afad2eeb5ba41b450fc5_2","lines":"        first = 0xFFFF;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":733,"col":9,"offset":20445},"end":{"line":733,"col":17,"offset":20453},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":733,"col":9,"offset":20445},"end":{"line":733,"col":13,"offset":20449},"abstract_content":"last"},"$SIGNED":{"start":{"line":733,"col":16,"offset":20452},"end":{"line":733,"col":17,"offset":20453},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"b9ba5fdcb990605e4cd0c2a705be8e74b61cd41ca292e685847ab21c87445fa5e90a23a8814554375f697cb5a47d18cfdb9da7f2d78f2e1b142d4167cb8754a4_2","lines":"        last = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":739,"col":13,"offset":20604},"end":{"line":739,"col":53,"offset":20644},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":739,"col":13,"offset":20604},"end":{"line":739,"col":20,"offset":20611},"abstract_content":"namsize"},"$SIGNED":{"start":{"line":739,"col":24,"offset":20615},"end":{"line":739,"col":53,"offset":20644},"abstract_content":"value1<256 256 0x10000"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"a3fed4447099818dfc9ca9eb7fb5787e0e3172d7407a8e4e445b9c86242bb3a1fc76214a84be20e29a1b022330e130851d05983b05f9e42f52d40e6f38c4aaa7_0","lines":"            namsize = (value1) < 256 ? 256 : 0x10000;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-wraparound","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":740,"col":19,"offset":20664},"end":{"line":740,"col":51,"offset":20696},"extra":{"metavars":{"$FUN":{"start":{"line":740,"col":19,"offset":20664},"end":{"line":740,"col":25,"offset":20670},"abstract_content":"malloc"},"$X":{"start":{"line":740,"col":26,"offset":20671},"end":{"line":740,"col":33,"offset":20678},"abstract_content":"namsize"},"$Y":{"start":{"line":740,"col":36,"offset":20681},"end":{"line":740,"col":50,"offset":20695},"abstract_content":"sizeof(char*)"}},"message":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/190","https://cwe.mitre.org/data/definitions/128","https://cwe.mitre.org/data/definitions/131","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples","https://dustri.org/b/playing-with-weggli.html"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"89448d1c8d80c5b97ee9402ee62f2731bf1752683041f593ce97bfcbec6612db3ae32d35150a0cffa036e02dab7c8151253fbce355bd897f4db9cca1693704a6_0","lines":"            nam = malloc(namsize * sizeof(char *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":740,"col":19,"offset":20664},"end":{"line":740,"col":51,"offset":20696},"extra":{"metavars":{"$FUN":{"start":{"line":740,"col":19,"offset":20664},"end":{"line":740,"col":25,"offset":20670},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_9","lines":"            nam = malloc(namsize * sizeof(char *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":742,"col":17,"offset":20745},"end":{"line":742,"col":28,"offset":20756},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":742,"col":17,"offset":20745},"end":{"line":742,"col":24,"offset":20752},"abstract_content":"namsize"},"$SIGNED":{"start":{"line":742,"col":27,"offset":20755},"end":{"line":742,"col":28,"offset":20756},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"a719e75d431d48f949bd3d8273b5add7a133a02bada0d9e7d01db1b1eeb5c7012d63247267806978c56270a1c5a7a71efb16f0f279e13c209cf0b136377e9932_1","lines":"                namsize = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":747,"col":13,"offset":20860},"end":{"line":747,"col":30,"offset":20877},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":747,"col":13,"offset":20860},"end":{"line":747,"col":20,"offset":20867},"abstract_content":"namsize"},"$SIGNED":{"start":{"line":747,"col":23,"offset":20870},"end":{"line":747,"col":30,"offset":20877},"abstract_content":"0x10000"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"84fd2e03fa1c133b49cee001106246607b4f81aab6adb32dbcdf7dcc453735cfafd814705ff754c7332f494ccd0704bbde579df30a3f59166967ddf33ef7588f_0","lines":"            namsize = 0x10000;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":748,"col":37,"offset":20915},"end":{"line":748,"col":58,"offset":20936},"extra":{"metavars":{"$FUN":{"start":{"line":748,"col":37,"offset":20915},"end":{"line":748,"col":44,"offset":20922},"abstract_content":"realloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"c2f6ca78128b7f5c8316d0e234cdcd43a24d85712df8bad0badaf8e760ec905630bf432074177e6d9f5400dbdf7e39c0c91c19275770f3a68c643a58f083ce53_1","lines":"            if ((newnam = (char **) realloc(nam, namsize)) == NULL)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":748,"col":37,"offset":20915},"end":{"line":748,"col":58,"offset":20936},"extra":{"metavars":{"$PTR":{"start":{"line":748,"col":45,"offset":20923},"end":{"line":748,"col":48,"offset":20926},"abstract_content":"nam"},"$LEN":{"start":{"line":748,"col":50,"offset":20928},"end":{"line":748,"col":57,"offset":20935},"abstract_content":"namsize","propagated_value":{"svalue_start":{"line":747,"col":23,"offset":20870},"svalue_end":{"line":747,"col":30,"offset":20877},"svalue_abstract_content":"0x10000"}}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"3cc5a1d711c27ce23562fc3c83b9aa72f030133173d9587801c19b9d8dce0d92ce0d80c726a630dca1f0a881d762a6ed3f94b0603bc4539bfc23d8a7ecfa7768_0","lines":"            if ((newnam = (char **) realloc(nam, namsize)) == NULL)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":761,"col":18,"offset":21274},"end":{"line":761,"col":30,"offset":21286},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":761,"col":18,"offset":21274},"end":{"line":761,"col":19,"offset":21275},"abstract_content":"i"},"$SIGNED":{"start":{"line":761,"col":29,"offset":21285},"end":{"line":761,"col":30,"offset":21286},"abstract_content":"1"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"8a2387c5bd3b41fac24ed485b53d45281c4a65545e0fe4b0ec1d4352d12fc9811d25ee273c21b878c1369e8e237c657f8712ae03929b750530598f7be3550331_1","lines":"            for (i = last + 1; i <= value1; i++)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":777,"col":9,"offset":21631},"end":{"line":777,"col":19,"offset":21641},"extra":{"metavars":{"$PTR":{"start":{"line":777,"col":14,"offset":21636},"end":{"line":777,"col":17,"offset":21639},"abstract_content":"enc"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"717ea47b73d1ad5d140957b2992b6b38ce2f31ce2e7b3fa61de3fbdf4bd7ffd8cf2da46ab4041958f99e262bd0bd4500ef54834c38e2a8d162dada98515de646_0","lines":"        free(enc);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":778,"col":9,"offset":21650},"end":{"line":778,"col":20,"offset":21661},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":778,"col":9,"offset":21650},"end":{"line":778,"col":16,"offset":21657},"abstract_content":"encsize"},"$SIGNED":{"start":{"line":778,"col":19,"offset":21660},"end":{"line":778,"col":20,"offset":21661},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"d81df674fced0b2ec597bfa8bd26288b8c96dda95aeb9abf6bc34510a627ad88774621b94ebdc52b49d45f8f4573b26940714365f28e4d6381096e47c58eaf9d_1","lines":"        encsize = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":782,"col":9,"offset":21716},"end":{"line":782,"col":19,"offset":21726},"extra":{"metavars":{"$PTR":{"start":{"line":782,"col":14,"offset":21721},"end":{"line":782,"col":17,"offset":21724},"abstract_content":"nam"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"6a9df23f8f1a6315c1d20addd46d6826267f0cf84dd51d7f236a0e5c347e2dd62be5e4848f2ec63f1a641713ff22ac00fd6c920d30c374d0a0f04222dfd77dc6_0","lines":"        free(nam);             /* don't free entries! */","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":783,"col":9,"offset":21773},"end":{"line":783,"col":20,"offset":21784},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":783,"col":9,"offset":21773},"end":{"line":783,"col":16,"offset":21780},"abstract_content":"namsize"},"$SIGNED":{"start":{"line":783,"col":19,"offset":21783},"end":{"line":783,"col":20,"offset":21784},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"a719e75d431d48f949bd3d8273b5add7a133a02bada0d9e7d01db1b1eeb5c7012d63247267806978c56270a1c5a7a71efb16f0f279e13c209cf0b136377e9932_2","lines":"        namsize = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-wraparound","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":789,"col":29,"offset":21893},"end":{"line":789,"col":70,"offset":21934},"extra":{"metavars":{"$FUN":{"start":{"line":789,"col":29,"offset":21893},"end":{"line":789,"col":35,"offset":21899},"abstract_content":"malloc"},"$X":{"start":{"line":789,"col":37,"offset":21901},"end":{"line":789,"col":51,"offset":21915},"abstract_content":"numaliases+1"},"$Y":{"start":{"line":789,"col":55,"offset":21919},"end":{"line":789,"col":69,"offset":21933},"abstract_content":"sizeof(char*)"}},"message":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/190","https://cwe.mitre.org/data/definitions/128","https://cwe.mitre.org/data/definitions/131","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples","https://dustri.org/b/playing-with-weggli.html"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"8502603d910573d1aba83f6933df343bf511eacdc251e0ba8ade5c8790d2f518e13779df180a8fb518bff39943760f5d15ce1bd9673a3ab9f7949f26b30ea4f4_0","lines":"        encoding->aliases = malloc((numaliases + 1) * sizeof(char *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":789,"col":29,"offset":21893},"end":{"line":789,"col":70,"offset":21934},"extra":{"metavars":{"$FUN":{"start":{"line":789,"col":29,"offset":21893},"end":{"line":789,"col":35,"offset":21899},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_10","lines":"        encoding->aliases = malloc((numaliases + 1) * sizeof(char *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":792,"col":14,"offset":22012},"end":{"line":792,"col":19,"offset":22017},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":792,"col":14,"offset":22012},"end":{"line":792,"col":15,"offset":22013},"abstract_content":"i"},"$SIGNED":{"start":{"line":792,"col":18,"offset":22016},"end":{"line":792,"col":19,"offset":22017},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"6f6ec4469800e87d5de2b32b6d753ddd2f9b10eee7177d9307f7f012a70ebd0b901ed1ca55085b2fc0906c192d6473f394080844fd2f7650ea93a7c759ac7914_2","lines":"        for (i = 0; i < numaliases; i++)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":801,"col":9,"offset":22197},"end":{"line":801,"col":19,"offset":22207},"extra":{"metavars":{"$PTR":{"start":{"line":801,"col":14,"offset":22202},"end":{"line":801,"col":17,"offset":22205},"abstract_content":"enc"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"717ea47b73d1ad5d140957b2992b6b38ce2f31ce2e7b3fa61de3fbdf4bd7ffd8cf2da46ab4041958f99e262bd0bd4500ef54834c38e2a8d162dada98515de646_1","lines":"        free(enc);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":802,"col":9,"offset":22216},"end":{"line":802,"col":20,"offset":22227},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":802,"col":9,"offset":22216},"end":{"line":802,"col":16,"offset":22223},"abstract_content":"encsize"},"$SIGNED":{"start":{"line":802,"col":19,"offset":22226},"end":{"line":802,"col":20,"offset":22227},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"d81df674fced0b2ec597bfa8bd26288b8c96dda95aeb9abf6bc34510a627ad88774621b94ebdc52b49d45f8f4573b26940714365f28e4d6381096e47c58eaf9d_2","lines":"        encsize = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":806,"col":13,"offset":22306},"end":{"line":806,"col":26,"offset":22319},"extra":{"metavars":{"$PTR":{"start":{"line":806,"col":18,"offset":22311},"end":{"line":806,"col":24,"offset":22317},"abstract_content":"nam[i]"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"c57bb0143874622849534d37082595d678e02b45cd270ca33ef27bafd4710528dd7e10ab2b24b529c6381657d683209f8dc8b21e6ccbf9eae2c709cf01328e0a_0","lines":"            free(nam[i]);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":807,"col":9,"offset":22328},"end":{"line":807,"col":19,"offset":22338},"extra":{"metavars":{"$PTR":{"start":{"line":807,"col":14,"offset":22333},"end":{"line":807,"col":17,"offset":22336},"abstract_content":"nam"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"6a9df23f8f1a6315c1d20addd46d6826267f0cf84dd51d7f236a0e5c347e2dd62be5e4848f2ec63f1a641713ff22ac00fd6c920d30c374d0a0f04222dfd77dc6_1","lines":"        free(nam);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":810,"col":9,"offset":22372},"end":{"line":810,"col":36,"offset":22399},"extra":{"metavars":{"$PTR":{"start":{"line":810,"col":14,"offset":22377},"end":{"line":810,"col":34,"offset":22397},"abstract_content":"mapping->->client_data"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"47d3ad52f54c154764688bce89f588a4ea076a3d707489860bc1ff4c05646dbd32c55040d53565d63fc9e3ff9dbc5597f4d59f77d9be9c4a353ae0b59562ec0a_0","lines":"        free(mapping->client_data);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":811,"col":9,"offset":22408},"end":{"line":811,"col":23,"offset":22422},"extra":{"metavars":{"$PTR":{"start":{"line":811,"col":14,"offset":22413},"end":{"line":811,"col":21,"offset":22420},"abstract_content":"mapping"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"dc80b5e2c104f43fd5497385fadfce236968f767ee231bbadab2ccd56d5c4065b1e51631aa4e0cd02146739df3c567822aa187ed4fe39b6373d913f7e0c5b416_0","lines":"        free(mapping);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":816,"col":9,"offset":22486},"end":{"line":816,"col":30,"offset":22507},"extra":{"metavars":{"$PTR":{"start":{"line":816,"col":14,"offset":22491},"end":{"line":816,"col":28,"offset":22505},"abstract_content":"encoding->->name"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"b3b9ec074a04b3eb074c49792a40389acd711f261c96ed7145085656ea844d9d9bd7d5dc8cabbce8c0a600ed4155c07e12a3c7260732e72119185883dd0e3a9c_0","lines":"        free(encoding->name);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":818,"col":13,"offset":22593},"end":{"line":818,"col":40,"offset":22620},"extra":{"metavars":{"$PTR":{"start":{"line":818,"col":18,"offset":22598},"end":{"line":818,"col":38,"offset":22618},"abstract_content":"mapping->->client_data"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"47d3ad52f54c154764688bce89f588a4ea076a3d707489860bc1ff4c05646dbd32c55040d53565d63fc9e3ff9dbc5597f4d59f77d9be9c4a353ae0b59562ec0a_1","lines":"            free(mapping->client_data);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":820,"col":13,"offset":22670},"end":{"line":820,"col":27,"offset":22684},"extra":{"metavars":{"$PTR":{"start":{"line":820,"col":18,"offset":22675},"end":{"line":820,"col":25,"offset":22682},"abstract_content":"mapping"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"dc80b5e2c104f43fd5497385fadfce236968f767ee231bbadab2ccd56d5c4065b1e51631aa4e0cd02146739df3c567822aa187ed4fe39b6373d913f7e0c5b416_1","lines":"            free(mapping);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":822,"col":9,"offset":22703},"end":{"line":822,"col":24,"offset":22718},"extra":{"metavars":{"$PTR":{"start":{"line":822,"col":14,"offset":22708},"end":{"line":822,"col":22,"offset":22716},"abstract_content":"encoding"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"4376359514021a0301e815b01ef6e74de6314c102339f4221ff68494a16e41ad2d3a32b472009472d43184daed43ad03cdfaf451e08ef8fb9ac75476182b6328_0","lines":"        free(encoding);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":824,"col":10,"offset":22734},"end":{"line":824,"col":15,"offset":22739},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":824,"col":10,"offset":22734},"end":{"line":824,"col":11,"offset":22735},"abstract_content":"i"},"$SIGNED":{"start":{"line":824,"col":14,"offset":22738},"end":{"line":824,"col":15,"offset":22739},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"6f6ec4469800e87d5de2b32b6d753ddd2f9b10eee7177d9307f7f012a70ebd0b901ed1ca55085b2fc0906c192d6473f394080844fd2f7650ea93a7c759ac7914_3","lines":"    for (i = 0; i < numaliases; i++)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":825,"col":9,"offset":22770},"end":{"line":825,"col":26,"offset":22787},"extra":{"metavars":{"$PTR":{"start":{"line":825,"col":14,"offset":22775},"end":{"line":825,"col":24,"offset":22785},"abstract_content":"aliases[i]"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"94a604d1ca801759b2e8001780033a0277070c24ee192e9c585dd8a1eadb8083a1af4c079dde4eff517635592e145a22ee35d5a704b961662b20a7953f5c3ddd_0","lines":"        free(aliases[i]);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-typos","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":835,"col":9,"offset":22969},"end":{"line":835,"col":20,"offset":22980},"extra":{"metavars":{"$EXPR":{"start":{"line":835,"col":9,"offset":22969},"end":{"line":835,"col":12,"offset":22972},"abstract_content":"dir","propagated_value":{"svalue_start":{"line":833,"col":30,"offset":22954},"svalue_end":{"line":833,"col":34,"offset":22958},"svalue_abstract_content":"NULL"}}},"message":"The programmer accidentally uses the wrong operator, which changes the application logic in security-relevant ways. This rule also covers some other common typo patterns.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/480","https://cwe.mitre.org/data/definitions/481","https://cwe.mitre.org/data/definitions/482","https://cwe.mitre.org/data/definitions/483","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"],"confidence":"LOW"},"severity":"INFO","fingerprint":"94fc67c5bd3e359faf255a278201252acf0d162f9ffcaffaddc36aca7265a57b8f644d89455230d862d35504fe460a9ccb5df233375bce9ba0efa2b94c27c43d_0","lines":"    if (dir == NULL) {","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":836,"col":25,"offset":23008},"end":{"line":836,"col":59,"offset":23042},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$FUN":{"start":{"line":836,"col":25,"offset":23008},"end":{"line":836,"col":31,"offset":23014},"abstract_content":"getenv"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"c0e30a9861726aae59105a0e4c60dd93968c4cbdb7b3550b29540d0f3e4222a7d5f179ce13631c97fa2654453798d304918f4dd81d24c0eae703a63adac9b72e_0","lines":"        const char *c = getenv(\"FONT_ENCODINGS_DIRECTORY\");","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":868,"col":9,"offset":23653},"end":{"line":868,"col":72,"offset":23716},"extra":{"metavars":{"$FUN":{"start":{"line":868,"col":9,"offset":23653},"end":{"line":868,"col":17,"offset":23661},"abstract_content":"snprintf"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"ce3045956b5a0c7377bfe5dd2c4664e4915bb754de610e2dfa28243c59b12c4cc9389a725156966cc6587e749e2e67deb745c47a5e9a4c9385a3ffea9ab3ed2b_0","lines":"        snprintf(buf, MAXFONTFILENAMELEN, \"%s%s\", dir, \"encodings.dir\");","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":868,"col":9,"offset":23653},"end":{"line":868,"col":72,"offset":23716},"extra":{"metavars":{"$BUF":{"start":{"line":868,"col":18,"offset":23662},"end":{"line":868,"col":21,"offset":23665},"abstract_content":"buf"},"$LEN":{"start":{"line":868,"col":23,"offset":23667},"end":{"line":868,"col":41,"offset":23685},"abstract_content":"MAXFONTFILENAMELEN"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"d8b99d3faa7a8cbaa04333b21503fbf7f882c63ea885cfd3d64688354d284810813429936877afccdf7afab91e214a25bf77853187488811d89fb9a181a3cc0d_0","lines":"        snprintf(buf, MAXFONTFILENAMELEN, \"%s%s\", dir, \"encodings.dir\");","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":887,"col":17,"offset":24220},"end":{"line":887,"col":36,"offset":24239},"extra":{"metavars":{"$FUN":{"start":{"line":887,"col":17,"offset":24220},"end":{"line":887,"col":22,"offset":24225},"abstract_content":"fopen"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"10d297798dc100d08050f2f7cb48f3aca72e1246c450164eaac319b45da1ddbc15d007e02acc03fcc7a0b2faacf2fbdd53900ec0ee722625459f71392b3e6dcf_0","lines":"    if ((file = fopen(dirname, \"r\")) == NULL) {","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":891,"col":13,"offset":24292},"end":{"line":891,"col":37,"offset":24316},"extra":{"metavars":{"$FUN":{"start":{"line":891,"col":13,"offset":24292},"end":{"line":891,"col":19,"offset":24298},"abstract_content":"fscanf"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"a4f2d62419b31e0c798ed92b3d5b7bf98ce167e7e5cee06c94d2c097271a545afaadcaad43b5f2bb4e518d284e755902f45159f0b70c2ea1ee2f6e8c8ff5a1c1_0","lines":"    count = fscanf(file, \"%d\\n\", &n);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":899,"col":9,"offset":24457},"end":{"line":900,"col":79,"offset":24589},"extra":{"metavars":{"$FUN":{"start":{"line":899,"col":9,"offset":24457},"end":{"line":899,"col":17,"offset":24465},"abstract_content":"snprintf"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"ce3045956b5a0c7377bfe5dd2c4664e4915bb754de610e2dfa28243c59b12c4cc9389a725156966cc6587e749e2e67deb745c47a5e9a4c9385a3ffea9ab3ed2b_1","lines":"        snprintf(format, sizeof(format), \"%%%ds %%%d[^\\n]\\n\",\n                 (int) sizeof(encoding_name) - 1, (int) sizeof(file_name) - 1);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-format-string-bugs","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":903,"col":17,"offset":24628},"end":{"line":903,"col":63,"offset":24674},"extra":{"metavars":{},"message":"The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/134","https://julianor.tripod.com/bc/formatstring-1.2.pdf","http://phrack.org/issues/70/13.html#article","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"],"confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"3ebcf70e724555b94c6cf907d871e6cd77d41ba5b8f7cfdfc2e5b68c9ad47df62a952fb560bea9f84e09c3b16ecd82e88c57a5bf11a7a37ef22b7d182147834f_0","lines":"        count = fscanf(file, format, encoding_name, file_name);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-insecure-api-scanf-etc","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":903,"col":17,"offset":24628},"end":{"line":903,"col":63,"offset":24674},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"format"},"$FS":{"start":{"line":903,"col":24,"offset":24635},"end":{"line":903,"col":28,"offset":24639},"abstract_content":"file"},"$FMT":{"start":{"line":903,"col":30,"offset":24641},"end":{"line":903,"col":36,"offset":24647},"abstract_content":"format"}},"message":"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/676","https://cwe.mitre.org/data/definitions/120","https://cwe.mitre.org/data/definitions/787","https://g.co/kgs/PCHQjJ"],"confidence":"HIGH"},"severity":"ERROR","fingerprint":"cb944b9486cf69b60ef0e0d46629d1ea95d8ac26d7a42f60e9534918490dc1458374134ba84a31c4a92cdda8d8a6c5fe7f38201441b5c46be095954f861cddef_0","lines":"        count = fscanf(file, format, encoding_name, file_name);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":903,"col":17,"offset":24628},"end":{"line":903,"col":63,"offset":24674},"extra":{"metavars":{"$FUN":{"start":{"line":903,"col":17,"offset":24628},"end":{"line":903,"col":23,"offset":24634},"abstract_content":"fscanf"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"a4f2d62419b31e0c798ed92b3d5b7bf98ce167e7e5cee06c94d2c097271a545afaadcaad43b5f2bb4e518d284e755902f45159f0b70c2ea1ee2f6e8c8ff5a1c1_1","lines":"        count = fscanf(file, format, encoding_name, file_name);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":916,"col":17,"offset":25060},"end":{"line":916,"col":74,"offset":25117},"extra":{"metavars":{"$FUN":{"start":{"line":916,"col":17,"offset":25060},"end":{"line":916,"col":25,"offset":25068},"abstract_content":"snprintf"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"ce3045956b5a0c7377bfe5dd2c4664e4915bb754de610e2dfa28243c59b12c4cc9389a725156966cc6587e749e2e67deb745c47a5e9a4c9385a3ffea9ab3ed2b_2","lines":"                snprintf(buf, MAXFONTFILENAMELEN, \"%s%s\", dir, file_name);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":916,"col":17,"offset":25060},"end":{"line":916,"col":74,"offset":25117},"extra":{"metavars":{"$BUF":{"start":{"line":916,"col":26,"offset":25069},"end":{"line":916,"col":29,"offset":25072},"abstract_content":"buf"},"$LEN":{"start":{"line":916,"col":31,"offset":25074},"end":{"line":916,"col":49,"offset":25092},"abstract_content":"MAXFONTFILENAMELEN"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"d8b99d3faa7a8cbaa04333b21503fbf7f882c63ea885cfd3d64688354d284810813429936877afccdf7afab91e214a25bf77853187488811d89fb9a181a3cc0d_1","lines":"                snprintf(buf, MAXFONTFILENAMELEN, \"%s%s\", dir, file_name);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-write-into-stack-buffer","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":916,"col":17,"offset":25060},"end":{"line":916,"col":74,"offset":25117},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"\"%s%s\""},"$TYPE":{"start":{"line":879,"col":5,"offset":23918},"end":{"line":879,"col":9,"offset":23922},"abstract_content":"char"},"$LEN":{"start":{"line":880,"col":13,"offset":23997},"end":{"line":880,"col":31,"offset":24015},"abstract_content":"MAXFONTFILENAMELEN"},"$FUN":{"start":{"line":916,"col":17,"offset":25060},"end":{"line":916,"col":25,"offset":25068},"abstract_content":"snprintf"},"$BUF":{"start":{"line":916,"col":26,"offset":25069},"end":{"line":916,"col":29,"offset":25072},"abstract_content":"buf"},"$N":{"start":{"line":916,"col":31,"offset":25074},"end":{"line":916,"col":49,"offset":25092},"abstract_content":"MAXFONTFILENAMELEN"},"$FMT":{"start":{"line":916,"col":51,"offset":25094},"end":{"line":916,"col":57,"offset":25100},"abstract_content":"\"%s%s\""}},"message":"The software directly writes into a stack buffer. This might lead to a stack-based buffer overflow.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/121","https://github.com/googleprojectzero/weggli"],"confidence":"MEDIUM"},"severity":"INFO","fingerprint":"3e0b3badf88763ed9b4ce1a9d80453552fbd8dc021263a69228175cd3ace179c4c13d9fc6aafd170a4310d6d4ea21e817a1b8e06274e36c71036b8f7ca9be3d3_0","lines":"                snprintf(buf, MAXFONTFILENAMELEN, \"%s%s\", dir, file_name);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":919,"col":17,"offset":25168},"end":{"line":919,"col":67,"offset":25218},"extra":{"metavars":{"$FUN":{"start":{"line":919,"col":17,"offset":25168},"end":{"line":919,"col":25,"offset":25176},"abstract_content":"snprintf"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"ce3045956b5a0c7377bfe5dd2c4664e4915bb754de610e2dfa28243c59b12c4cc9389a725156966cc6587e749e2e67deb745c47a5e9a4c9385a3ffea9ab3ed2b_3","lines":"                snprintf(buf, MAXFONTFILENAMELEN, \"%s\", file_name);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":919,"col":17,"offset":25168},"end":{"line":919,"col":67,"offset":25218},"extra":{"metavars":{"$BUF":{"start":{"line":919,"col":26,"offset":25177},"end":{"line":919,"col":29,"offset":25180},"abstract_content":"buf"},"$LEN":{"start":{"line":919,"col":31,"offset":25182},"end":{"line":919,"col":49,"offset":25200},"abstract_content":"MAXFONTFILENAMELEN"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"d8b99d3faa7a8cbaa04333b21503fbf7f882c63ea885cfd3d64688354d284810813429936877afccdf7afab91e214a25bf77853187488811d89fb9a181a3cc0d_2","lines":"                snprintf(buf, MAXFONTFILENAMELEN, \"%s\", file_name);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-write-into-stack-buffer","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":919,"col":17,"offset":25168},"end":{"line":919,"col":67,"offset":25218},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"\"%s\""},"$TYPE":{"start":{"line":879,"col":5,"offset":23918},"end":{"line":879,"col":9,"offset":23922},"abstract_content":"char"},"$LEN":{"start":{"line":880,"col":13,"offset":23997},"end":{"line":880,"col":31,"offset":24015},"abstract_content":"MAXFONTFILENAMELEN"},"$FUN":{"start":{"line":919,"col":17,"offset":25168},"end":{"line":919,"col":25,"offset":25176},"abstract_content":"snprintf"},"$BUF":{"start":{"line":919,"col":26,"offset":25177},"end":{"line":919,"col":29,"offset":25180},"abstract_content":"buf"},"$N":{"start":{"line":919,"col":31,"offset":25182},"end":{"line":919,"col":49,"offset":25200},"abstract_content":"MAXFONTFILENAMELEN"},"$FMT":{"start":{"line":919,"col":51,"offset":25202},"end":{"line":919,"col":55,"offset":25206},"abstract_content":"\"%s\""}},"message":"The software directly writes into a stack buffer. This might lead to a stack-based buffer overflow.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/121","https://github.com/googleprojectzero/weggli"],"confidence":"MEDIUM"},"severity":"INFO","fingerprint":"783488b7cb854ec758c3e8589d4e597cddfd01741dce407531129301eead5896044fdc30a1c0b473cce5ee80c3b8eed3ef67e37769e2c7cf5c3c7d019934fe4c_0","lines":"                snprintf(buf, MAXFONTFILENAMELEN, \"%s\", file_name);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-wraparound","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":989,"col":13,"offset":26791},"end":{"line":989,"col":54,"offset":26832},"extra":{"metavars":{"$FUN":{"start":{"line":989,"col":13,"offset":26791},"end":{"line":989,"col":19,"offset":26797},"abstract_content":"malloc"},"$X":{"start":{"line":989,"col":21,"offset":26799},"end":{"line":989,"col":35,"offset":26813},"abstract_content":"numaliases+2"},"$Y":{"start":{"line":989,"col":39,"offset":26817},"end":{"line":989,"col":53,"offset":26831},"abstract_content":"sizeof(char*)"}},"message":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/190","https://cwe.mitre.org/data/definitions/128","https://cwe.mitre.org/data/definitions/131","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples","https://dustri.org/b/playing-with-weggli.html"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"ee337eb8ce65600c27af90bbcfa7cf9ad0582b2f14fef2ab2129e698dac3074443456e8f1d4c82b1cf01cce6ad729fc5e67e741674d610e7ac37dc8a14814215_0","lines":"    names = malloc((numaliases + 2) * sizeof(char *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":989,"col":13,"offset":26791},"end":{"line":989,"col":54,"offset":26832},"extra":{"metavars":{"$FUN":{"start":{"line":989,"col":13,"offset":26791},"end":{"line":989,"col":19,"offset":26797},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"fdc955a42c50e1a3401b7974131430ef3b199f12ebdf0d01386f2f4afad8f03bdc5290a8e58610ea62cbf1ecdd6844f78a0e205b37b64e5e0625585357cd7268_11","lines":"    names = malloc((numaliases + 2) * sizeof(char *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":991,"col":9,"offset":26867},"end":{"line":991,"col":33,"offset":26891},"extra":{"metavars":{"$PTR":{"start":{"line":991,"col":14,"offset":26872},"end":{"line":991,"col":31,"offset":26889},"abstract_content":"encoding->->aliases"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"f425b300c739d92511a9f04f2edcf2b57abfb20b6ff6be2a657e2aab0fe60badad164f2ceed4c2f22be279a74f1d7a192d4d4f8cb542177e7f75a351e593d2b0_0","lines":"        free(encoding->aliases);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":992,"col":9,"offset":26900},"end":{"line":992,"col":24,"offset":26915},"extra":{"metavars":{"$PTR":{"start":{"line":992,"col":14,"offset":26905},"end":{"line":992,"col":22,"offset":26913},"abstract_content":"encoding"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"4376359514021a0301e815b01ef6e74de6314c102339f4221ff68494a16e41ad2d3a32b472009472d43184daed43ad03cdfaf451e08ef8fb9ac75476182b6328_1","lines":"        free(encoding);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":1003,"col":5,"offset":27134},"end":{"line":1003,"col":29,"offset":27158},"extra":{"metavars":{"$PTR":{"start":{"line":1003,"col":10,"offset":27139},"end":{"line":1003,"col":27,"offset":27156},"abstract_content":"encoding->->aliases"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"f425b300c739d92511a9f04f2edcf2b57abfb20b6ff6be2a657e2aab0fe60badad164f2ceed4c2f22be279a74f1d7a192d4d4f8cb542177e7f75a351e593d2b0_1","lines":"    free(encoding->aliases);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","start":{"line":1004,"col":5,"offset":27163},"end":{"line":1004,"col":20,"offset":27178},"extra":{"metavars":{"$PTR":{"start":{"line":1004,"col":10,"offset":27168},"end":{"line":1004,"col":18,"offset":27176},"abstract_content":"encoding"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"4376359514021a0301e815b01ef6e74de6314c102339f4221ff68494a16e41ad2d3a32b472009472d43184daed43ad03cdfaf451e08ef8fb9ac75476182b6328_2","lines":"    free(encoding);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":75,"col":1,"offset":2881},"end":{"line":75,"col":25,"offset":2905},"extra":{"metavars":{"$FUN":{"start":{"line":75,"col":1,"offset":2881},"end":{"line":75,"col":25,"offset":2905},"abstract_content":"iso8859_1_to_apple_roman"},"$SIGNED":{"start":{"line":82,"col":16,"offset":3102},"end":{"line":82,"col":17,"offset":3103},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"d39c9039c42a26c5e174be3031403df61dc68d86458fa6ee16e1f3cbbab779317e5324b3c400d8847e121bc8445e33db6b90beddbc45456d4c6e18d41821df26_0","lines":"iso8859_1_to_apple_roman(unsigned isocode, void *client_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":127,"col":1,"offset":5152},"end":{"line":127,"col":28,"offset":5179},"extra":{"metavars":{"$FUN":{"start":{"line":127,"col":1,"offset":5152},"end":{"line":127,"col":28,"offset":5179},"abstract_content":"iso8859_2_to_apple_centeuro"},"$SIGNED":{"start":{"line":134,"col":16,"offset":5379},"end":{"line":134,"col":17,"offset":5380},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"78b125ad1bf76f3e60a9d77e03fddb5ac8227fb1f042fb9afd919385b83b5c32ab9f918bd9cfaeabca4706dd3911ceaa4ea687f29a8843ee0340750f4d292d69_0","lines":"iso8859_2_to_apple_centeuro(unsigned isocode, void *client_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":227,"col":1,"offset":9651},"end":{"line":227,"col":28,"offset":9678},"extra":{"metavars":{"$FUN":{"start":{"line":227,"col":1,"offset":9651},"end":{"line":227,"col":28,"offset":9678},"abstract_content":"iso8859_5_to_apple_cyrillic"},"$SIGNED":{"start":{"line":234,"col":16,"offset":9878},"end":{"line":234,"col":17,"offset":9879},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"a2ba0f4c5dedc2bc245d89b0d599decd3cf3de933208de98d82ac7e36dc1227265ff584eb44587ca939c658638bef6aeb83849798f8da8e5fc9d3d7951ea55c5_0","lines":"iso8859_5_to_apple_cyrillic(unsigned isocode, void *client_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":249,"col":1,"offset":10298},"end":{"line":249,"col":21,"offset":10318},"extra":{"metavars":{"$FUN":{"start":{"line":249,"col":1,"offset":10298},"end":{"line":249,"col":21,"offset":10318},"abstract_content":"iso8859_6_to_unicode"},"$SIGNED":{"start":{"line":260,"col":16,"offset":10749},"end":{"line":260,"col":17,"offset":10750},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"b99e52ed334231f1280cd60a84fadfd8f02b4b8f3d06716b97686eee2ce8f533b815cf9bd2b994c5cb25913248cd071bf44a2bbb19f1100e1dd69b34b3779e07_0","lines":"iso8859_6_to_unicode(unsigned isocode, void *client_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":269,"col":1,"offset":10934},"end":{"line":269,"col":21,"offset":10954},"extra":{"metavars":{"$FUN":{"start":{"line":269,"col":1,"offset":10934},"end":{"line":269,"col":21,"offset":10954},"abstract_content":"iso8859_7_to_unicode"},"$SIGNED":{"start":{"line":277,"col":16,"offset":11249},"end":{"line":277,"col":22,"offset":11255},"abstract_content":"0x2018"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"f08cf22e8a9f8a041c57f8632747efa37dbf15e4fceb85904d1e6617000dd5f6daf1c587e070dd25277e5ba9980e462fd3e609be2a2309a009bf01b302584cfd_0","lines":"iso8859_7_to_unicode(unsigned isocode, void *client_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":296,"col":1,"offset":11728},"end":{"line":296,"col":21,"offset":11748},"extra":{"metavars":{"$FUN":{"start":{"line":296,"col":1,"offset":11728},"end":{"line":296,"col":21,"offset":11748},"abstract_content":"iso8859_8_to_unicode"},"$SIGNED":{"start":{"line":299,"col":16,"offset":11828},"end":{"line":299,"col":17,"offset":11829},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"e1affb2d410dc385ad54a41e21d934a17a75e1ab1d2c91e2e3143e6b655e385b969fd69459bb965d91e374223614f65c3db72c6abfac3485872264b20c0613f6_0","lines":"iso8859_8_to_unicode(unsigned isocode, void *client_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":316,"col":1,"offset":12228},"end":{"line":316,"col":21,"offset":12248},"extra":{"metavars":{"$FUN":{"start":{"line":316,"col":1,"offset":12228},"end":{"line":316,"col":21,"offset":12248},"abstract_content":"iso8859_9_to_unicode"},"$SIGNED":{"start":{"line":320,"col":16,"offset":12341},"end":{"line":320,"col":22,"offset":12347},"abstract_content":"0x011E"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"3ed7df71801bd74accb92aec2c233f3c07bfd2ad177ac29197aadc15f4692348c9e7f148d0cbb66e3d55306273343e334091d31d68431641127b4c1bb6948405_0","lines":"iso8859_9_to_unicode(unsigned isocode, void *client_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":366,"col":1,"offset":13925},"end":{"line":366,"col":22,"offset":13946},"extra":{"metavars":{"$FUN":{"start":{"line":366,"col":1,"offset":13925},"end":{"line":366,"col":22,"offset":13946},"abstract_content":"iso8859_15_to_unicode"},"$SIGNED":{"start":{"line":370,"col":16,"offset":14039},"end":{"line":370,"col":22,"offset":14045},"abstract_content":"0x20AC"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"77a424d762bd7f74750ef91a32ded601d393c8d7e462490ebbe1921d290c863dd20fed6412d8cb3e4bcb077aabd97475193d3adea8503d563cb30dd5e20b7056_0","lines":"iso8859_15_to_unicode(unsigned isocode, void *client_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":425,"col":1,"offset":15958},"end":{"line":425,"col":19,"offset":15976},"extra":{"metavars":{"$FUN":{"start":{"line":425,"col":1,"offset":15958},"end":{"line":425,"col":19,"offset":15976},"abstract_content":"koi8_ru_to_unicode"},"$SIGNED":{"start":{"line":429,"col":16,"offset":16069},"end":{"line":429,"col":22,"offset":16075},"abstract_content":"0x201C"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"ce820b88d05fc31ff9932f2513933c0f31c6f64081bc2c01dc0d54707e89fcdd4383d7ac6dc08568eb1ce30806e8aabbf30ca529e2c4dd3c37a2c0dbd30be18e_0","lines":"koi8_ru_to_unicode(unsigned koicode, void *client_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":533,"col":1,"offset":18931},"end":{"line":533,"col":18,"offset":18948},"extra":{"metavars":{"$FUN":{"start":{"line":533,"col":1,"offset":18931},"end":{"line":533,"col":18,"offset":18948},"abstract_content":"koi8_u_to_unicode"},"$SIGNED":{"start":{"line":537,"col":16,"offset":19041},"end":{"line":537,"col":22,"offset":19047},"abstract_content":"0x0454"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"dadd940b47863e5686d53464a161b850bb9d49e11fb09c03314740833dd8a658668677447c772cc92d8ef9fefc7e39469be529ec0843d7700498f8c11fb8eba0_0","lines":"koi8_u_to_unicode(unsigned koicode, void *client_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-pointer-subtraction","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":661,"col":21,"offset":23107},"end":{"line":661,"col":29,"offset":23115},"extra":{"metavars":{"$PTR1":{"start":{"line":661,"col":21,"offset":23107},"end":{"line":661,"col":22,"offset":23108},"abstract_content":"p"},"$PTR2":{"start":{"line":661,"col":25,"offset":23111},"end":{"line":661,"col":29,"offset":23115},"abstract_content":"name"}},"message":"The software subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/469","https://github.com/struct/mms"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"0de9e32d203e7a1c7b51cf08a8f1a61cd1a9b7c0d01b5dca610a80e36944776ac7cd89e09cf07cbcd0c357d7534609f468fb1ad38dd8357729977f79883ab8d8_0","lines":"    len = length - (p - name) - 1;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":662,"col":5,"offset":23126},"end":{"line":662,"col":32,"offset":23153},"extra":{"metavars":{"$FUN":{"start":{"line":662,"col":5,"offset":23126},"end":{"line":662,"col":11,"offset":23132},"abstract_content":"memcpy"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"da1e6dccb219618d5e6faa55626c7042f5e14e7c26ea0107d975e4b3a9b2f8f24c82974e76521116f666e7963a6db5110aa67d75879fbf8f0dc1c0f5c157df9f_0","lines":"    memcpy(charset, p + 1, len);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":662,"col":5,"offset":23126},"end":{"line":662,"col":32,"offset":23153},"extra":{"metavars":{"$DST":{"start":{"line":662,"col":12,"offset":23133},"end":{"line":662,"col":19,"offset":23140},"abstract_content":"charset"},"$SRC":{"start":{"line":662,"col":21,"offset":23142},"end":{"line":662,"col":26,"offset":23147},"abstract_content":"p+1"},"$LEN":{"start":{"line":662,"col":28,"offset":23149},"end":{"line":662,"col":31,"offset":23152},"abstract_content":"len","propagated_value":{"svalue_start":{"line":661,"col":11,"offset":23097},"svalue_end":{"line":661,"col":34,"offset":23120},"svalue_abstract_content":"length-p-name-1"}}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"8c6405473ef337f9d2cfd8515e6ab3b047ed7b5700362f4ed651a5775a5196a8068edff8c8e40c141c37573cadebe3f2b84a1e23844468486fc8219d1f3e6acc_0","lines":"    memcpy(charset, p + 1, len);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-write-into-stack-buffer","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":662,"col":5,"offset":23126},"end":{"line":662,"col":32,"offset":23153},"extra":{"metavars":{"$TYPE":{"start":{"line":637,"col":12,"offset":22604},"end":{"line":637,"col":16,"offset":22608},"abstract_content":"char"},"$LEN":{"start":{"line":637,"col":25,"offset":22617},"end":{"line":637,"col":39,"offset":22631},"abstract_content":"MAXFONTNAMELEN"},"$FUN":{"start":{"line":662,"col":5,"offset":23126},"end":{"line":662,"col":11,"offset":23132},"abstract_content":"memcpy"},"$BUF":{"start":{"line":662,"col":12,"offset":23133},"end":{"line":662,"col":19,"offset":23140},"abstract_content":"charset"}},"message":"The software directly writes into a stack buffer. This might lead to a stack-based buffer overflow.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/121","https://github.com/googleprojectzero/weggli"],"confidence":"MEDIUM"},"severity":"INFO","fingerprint":"a9a39eefe60a1c323934ede472f0102653a1cb44807fc2daf33ed8ea67575a6cd5e7ef951f93496472f319bba34066e5ec3f357da5c7f193618ddca3072efd98_0","lines":"    memcpy(charset, p + 1, len);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-typos","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":666,"col":5,"offset":23225},"end":{"line":667,"col":16,"offset":23278},"extra":{"metavars":{"$EXPR1":{"start":{"line":666,"col":10,"offset":23230},"end":{"line":666,"col":11,"offset":23231},"abstract_content":"q","propagated_value":{"svalue_start":{"line":666,"col":14,"offset":23234},"svalue_end":{"line":666,"col":40,"offset":23260},"svalue_abstract_content":"strchr(charset(int'[')"}},"$EXPR2":{"start":{"line":666,"col":14,"offset":23234},"end":{"line":666,"col":40,"offset":23260},"abstract_content":"strchr(charset(int'[')"}},"message":"The programmer accidentally uses the wrong operator, which changes the application logic in security-relevant ways. This rule also covers some other common typo patterns.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/480","https://cwe.mitre.org/data/definitions/481","https://cwe.mitre.org/data/definitions/482","https://cwe.mitre.org/data/definitions/483","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"],"confidence":"LOW"},"severity":"INFO","fingerprint":"27fe354c1bc44bde815c94d6578006afb9ede4ed065c0ebbea3bad50a6d986e1235a34ce6f29d181465240f96550ba108aa35b44b1e9ec72349a117a8d8c5599_0","lines":"    if ((q = strchr(charset, (int) '[')))\n        *q = 0;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-ret-stack-address","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":669,"col":5,"offset":23284},"end":{"line":669,"col":20,"offset":23299},"extra":{"metavars":{"$TYPE":{"start":{"line":637,"col":12,"offset":22604},"end":{"line":637,"col":16,"offset":22608},"abstract_content":"char"},"$LEN":{"start":{"line":637,"col":25,"offset":22617},"end":{"line":637,"col":39,"offset":22631},"abstract_content":"MAXFONTNAMELEN"},"$PTR":{"start":{"line":669,"col":12,"offset":23291},"end":{"line":669,"col":19,"offset":23298},"abstract_content":"charset"}},"message":"A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/562","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples","https://rules.sonarsource.com/c/type/Bug/RSPEC-946"],"confidence":"LOW"},"severity":"INFO","fingerprint":"b4f25805dbdc958dc3da327a777f397942fb4f1610fc2fad32f8a939fd77339ec7635545e67bb3c7bdb63ff05aa5c0daabed0c06090db1334a87efd048530db1_0","lines":"    return charset;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":673,"col":1,"offset":23312},"end":{"line":673,"col":14,"offset":23325},"extra":{"metavars":{"$FUN":{"start":{"line":673,"col":1,"offset":23312},"end":{"line":673,"col":14,"offset":23325},"abstract_content":"FontEncRecode"},"$SIGNED":{"start":{"line":681,"col":24,"offset":23610},"end":{"line":681,"col":25,"offset":23611},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"2e442b8b7664747af77d226df0dca664106dca030d09cc78991036fb6924b56fcda6af7d6a543cd3a512075f89cca8d3e1ab4361fe274f15095988d971df0620_0","lines":"FontEncRecode(unsigned code, FontMapPtr mapping)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-truncation","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":685,"col":17,"offset":23688},"end":{"line":685,"col":35,"offset":23706},"extra":{"metavars":{"$NARROW":{"start":{"line":685,"col":17,"offset":23688},"end":{"line":685,"col":20,"offset":23691},"abstract_content":"row"},"$LARGE":{"start":{"line":685,"col":23,"offset":23694},"end":{"line":685,"col":27,"offset":23698},"abstract_content":"code"}},"message":"Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/197","https://cwe.mitre.org/data/definitions/681","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"0fd9043cbd5e80ec8eb7f4a95adeb808f2d0ed35186627de58e7612f3374332d056e9b20a77535557edf10f5fa536138f70c5a79c9d57edc576af9ef6ca6917d_0","lines":"            int row = code / 0x100, col = code & 0xFF;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":685,"col":17,"offset":23688},"end":{"line":685,"col":35,"offset":23706},"extra":{"metavars":{"$SIGNED":{"start":{"line":685,"col":17,"offset":23688},"end":{"line":685,"col":20,"offset":23691},"abstract_content":"row"},"$UNSIGNED":{"start":{"line":685,"col":23,"offset":23694},"end":{"line":685,"col":27,"offset":23698},"abstract_content":"code"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"88d66b5fb4cce222154f3f3523b32e41ef49162871f8ae47b523c03c12b6ee42a6ac9b8cf3270b10e24b00f3ebdc7b3539765ed29f93e27eab1ae6b78a8e1a4f_0","lines":"            int row = code / 0x100, col = code & 0xFF;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-truncation","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":685,"col":37,"offset":23708},"end":{"line":685,"col":54,"offset":23725},"extra":{"metavars":{"$NARROW":{"start":{"line":685,"col":37,"offset":23708},"end":{"line":685,"col":40,"offset":23711},"abstract_content":"col"},"$LARGE":{"start":{"line":685,"col":43,"offset":23714},"end":{"line":685,"col":47,"offset":23718},"abstract_content":"code"}},"message":"Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/197","https://cwe.mitre.org/data/definitions/681","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"0209a842b4c86bc97b7898e5dde0508cb13632abf771215b788fd4076cd20293420d5c2b83d6de690ed0598e642b68eb06b75e250bf8b28e3447dfe242f10051_0","lines":"            int row = code / 0x100, col = code & 0xFF;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":685,"col":37,"offset":23708},"end":{"line":685,"col":54,"offset":23725},"extra":{"metavars":{"$SIGNED":{"start":{"line":685,"col":37,"offset":23708},"end":{"line":685,"col":40,"offset":23711},"abstract_content":"col"},"$UNSIGNED":{"start":{"line":685,"col":43,"offset":23714},"end":{"line":685,"col":47,"offset":23718},"abstract_content":"code"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"e21921f241113936ef574be63d270bf20613ffe642dddaf7a3723108cbbc3dda26e7526447500dd06326c14a6c8e7857523ba25a509083fdff716a52f3f8123b_0","lines":"            int row = code / 0x100, col = code & 0xFF;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-wraparound","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":811,"col":27,"offset":27213},"end":{"line":811,"col":68,"offset":27254},"extra":{"metavars":{"$FUN":{"start":{"line":811,"col":27,"offset":27213},"end":{"line":811,"col":33,"offset":27219},"abstract_content":"malloc"},"$X":{"start":{"line":811,"col":35,"offset":27221},"end":{"line":811,"col":49,"offset":27235},"abstract_content":"numaliases+2"},"$Y":{"start":{"line":811,"col":53,"offset":27239},"end":{"line":811,"col":67,"offset":27253},"abstract_content":"sizeof(char*)"}},"message":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/190","https://cwe.mitre.org/data/definitions/128","https://cwe.mitre.org/data/definitions/131","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples","https://dustri.org/b/playing-with-weggli.html"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"56ba6390e97b709700aa4589e3630b8fb6886ae18c60a63c8c07baf049baf755b987136ec2087a2ef00d4c6a44bf339894fad88f8ae34979fd5721e8a1250214_0","lines":"            new_aliases = malloc((numaliases + 2) * sizeof(char *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":811,"col":27,"offset":27213},"end":{"line":811,"col":68,"offset":27254},"extra":{"metavars":{"$FUN":{"start":{"line":811,"col":27,"offset":27213},"end":{"line":811,"col":33,"offset":27219},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"371addc6922fc7f01897d71779b2ae2ff2e29240811c787edb9f2982e0fa8263a34901280f34fc5d2a6791e3021a4de262cde28e352d4990c43b48b9cc69ce33_0","lines":"            new_aliases = malloc((numaliases + 2) * sizeof(char *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":817,"col":17,"offset":27423},"end":{"line":818,"col":52,"offset":27513},"extra":{"metavars":{"$FUN":{"start":{"line":817,"col":17,"offset":27423},"end":{"line":817,"col":23,"offset":27429},"abstract_content":"memcpy"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"da1e6dccb219618d5e6faa55626c7042f5e14e7c26ea0107d975e4b3a9b2f8f24c82974e76521116f666e7963a6db5110aa67d75879fbf8f0dc1c0f5c157df9f_1","lines":"                memcpy(new_aliases, encoding->aliases,\n                       numaliases * sizeof(char *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":819,"col":17,"offset":27531},"end":{"line":819,"col":41,"offset":27555},"extra":{"metavars":{"$PTR":{"start":{"line":819,"col":22,"offset":27536},"end":{"line":819,"col":39,"offset":27553},"abstract_content":"encoding->->aliases"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"1e3db46f700edb453b3a0fd3e65bc9b85c0cb804737931fc2f5761aeba3adb66221c764d43b160e20380b7c4b8ee3e66c6c54690407b34cc9e011de0af9b890c_0","lines":"                free(encoding->aliases);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":835,"col":1,"offset":27882},"end":{"line":835,"col":20,"offset":27901},"extra":{"metavars":{"$FUN":{"start":{"line":835,"col":1,"offset":27882},"end":{"line":835,"col":20,"offset":27901},"abstract_content":"FontEncSimpleRecode"},"$SIGNED":{"start":{"line":843,"col":16,"offset":28103},"end":{"line":843,"col":17,"offset":28104},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"c3b0d1ce2d94a4bf70d771e676999f180ea2095f1f1b991fdc58c52203ad62bbd96ae309e9a117b923ea50223ba466c404f4ce5fb4e9c24c28dd2e873f45ca61_0","lines":"FontEncSimpleRecode(unsigned code, void *client_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":846,"col":9,"offset":28138},"end":{"line":846,"col":60,"offset":28189},"extra":{"metavars":{"$UNSIGNED":{"start":{"line":846,"col":9,"offset":28138},"end":{"line":846,"col":14,"offset":28143},"abstract_content":"index"},"$SIGNED":{"start":{"line":846,"col":25,"offset":28154},"end":{"line":846,"col":29,"offset":28158},"abstract_content":"0xFF"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"ea72015a5a0b1fcb4b7ce7adede1ba94a2a0b7cd8d5b64722a8297e6cd5743657b8875c689dd4a00b7f42b11015ae7774d49c3ab3567a8f61f871cb99facd1d6_0","lines":"        index = (code & 0xFF) + (code >> 8) * map->row_size;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":885,"col":1,"offset":28961},"end":{"line":885,"col":16,"offset":28976},"extra":{"metavars":{"$FUN":{"start":{"line":885,"col":1,"offset":28961},"end":{"line":885,"col":16,"offset":28976},"abstract_content":"reverse_reverse"},"$SIGNED":{"start":{"line":891,"col":16,"offset":29110},"end":{"line":891,"col":17,"offset":29111},"abstract_content":"0"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"cbcf5d69e45b50da2d4832c12b1238107fc8b2417c925dee70c1c1f70c14120514c9b2d5e52a0851d0cdf3259dd8c84fad29144e91014b41b1766bc355c49130_0","lines":"reverse_reverse(unsigned i, void *data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-truncation","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":896,"col":5,"offset":29158},"end":{"line":896,"col":33,"offset":29186},"extra":{"metavars":{"$NARROW":{"start":{"line":896,"col":5,"offset":29158},"end":{"line":896,"col":6,"offset":29159},"abstract_content":"s"},"$LARGE":{"start":{"line":896,"col":9,"offset":29162},"end":{"line":896,"col":10,"offset":29163},"abstract_content":"i"}},"message":"Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/197","https://cwe.mitre.org/data/definitions/681","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"e10822aba25961bc006d41f4647bea45214faa22b2fe3016acafbe9d05a85fb405a25d2908ee960b6856568f9e231a4f4762ca9cca8225752256e51fd264541c_0","lines":"    s = i / FONTENC_SEGMENT_SIZE;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":896,"col":5,"offset":29158},"end":{"line":896,"col":33,"offset":29186},"extra":{"metavars":{"$SIGNED":{"start":{"line":896,"col":5,"offset":29158},"end":{"line":896,"col":6,"offset":29159},"abstract_content":"s"},"$UNSIGNED":{"start":{"line":896,"col":9,"offset":29162},"end":{"line":896,"col":10,"offset":29163},"abstract_content":"i"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"e1c73a8996bf567c61b11f3d52175bf6393ee165f2e7315399f8884f354dad417ac33e4a0fb8aaca137f4a54d469f62ed8fabeea59001ade13ee26046a7e49d2_0","lines":"    s = i / FONTENC_SEGMENT_SIZE;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-truncation","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":897,"col":5,"offset":29192},"end":{"line":897,"col":33,"offset":29220},"extra":{"metavars":{"$NARROW":{"start":{"line":897,"col":5,"offset":29192},"end":{"line":897,"col":6,"offset":29193},"abstract_content":"j"},"$LARGE":{"start":{"line":897,"col":9,"offset":29196},"end":{"line":897,"col":10,"offset":29197},"abstract_content":"i"}},"message":"Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/197","https://cwe.mitre.org/data/definitions/681","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"5e6f6dfec577dd769ac063e396b512ed5bcf5a2f3baea988e5c5ad33f6adc4cdce6c50c06118d9beed55f9ea68ab42bf97732e2ee51a2dd09e6ca307399223f5_0","lines":"    j = i % FONTENC_SEGMENT_SIZE;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":897,"col":5,"offset":29192},"end":{"line":897,"col":33,"offset":29220},"extra":{"metavars":{"$SIGNED":{"start":{"line":897,"col":5,"offset":29192},"end":{"line":897,"col":6,"offset":29193},"abstract_content":"j"},"$UNSIGNED":{"start":{"line":897,"col":9,"offset":29196},"end":{"line":897,"col":10,"offset":29197},"abstract_content":"i"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"8012e15de584a8e546d6e898d891ddace37ba48aa8087b257d6db77f80081f8caa5a85d2bd6974d826298a40b1997d35e22bdb5c2a06f8e65b1366fb5cd6f505_0","lines":"    j = i % FONTENC_SEGMENT_SIZE;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-truncation","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":913,"col":5,"offset":29455},"end":{"line":913,"col":33,"offset":29483},"extra":{"metavars":{"$NARROW":{"start":{"line":913,"col":5,"offset":29455},"end":{"line":913,"col":6,"offset":29456},"abstract_content":"s"},"$LARGE":{"start":{"line":913,"col":9,"offset":29459},"end":{"line":913,"col":10,"offset":29460},"abstract_content":"i"}},"message":"Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/197","https://cwe.mitre.org/data/definitions/681","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"e10822aba25961bc006d41f4647bea45214faa22b2fe3016acafbe9d05a85fb405a25d2908ee960b6856568f9e231a4f4762ca9cca8225752256e51fd264541c_1","lines":"    s = i / FONTENC_SEGMENT_SIZE;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":913,"col":5,"offset":29455},"end":{"line":913,"col":33,"offset":29483},"extra":{"metavars":{"$SIGNED":{"start":{"line":913,"col":5,"offset":29455},"end":{"line":913,"col":6,"offset":29456},"abstract_content":"s"},"$UNSIGNED":{"start":{"line":913,"col":9,"offset":29459},"end":{"line":913,"col":10,"offset":29460},"abstract_content":"i"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"e1c73a8996bf567c61b11f3d52175bf6393ee165f2e7315399f8884f354dad417ac33e4a0fb8aaca137f4a54d469f62ed8fabeea59001ade13ee26046a7e49d2_1","lines":"    s = i / FONTENC_SEGMENT_SIZE;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-integer-truncation","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":914,"col":5,"offset":29489},"end":{"line":914,"col":33,"offset":29517},"extra":{"metavars":{"$NARROW":{"start":{"line":914,"col":5,"offset":29489},"end":{"line":914,"col":6,"offset":29490},"abstract_content":"c"},"$LARGE":{"start":{"line":914,"col":9,"offset":29493},"end":{"line":914,"col":10,"offset":29494},"abstract_content":"i"}},"message":"Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/197","https://cwe.mitre.org/data/definitions/681","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"e80b0fcc6c017499dbe43ac136a32893b9f6338bed4c90b71217ac9398ddc09f4c62407543d75c0a119e1e4c1e30f73730397a46d909dd5f693f65d07d9c06bf_0","lines":"    c = i % FONTENC_SEGMENT_SIZE;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":914,"col":5,"offset":29489},"end":{"line":914,"col":33,"offset":29517},"extra":{"metavars":{"$SIGNED":{"start":{"line":914,"col":5,"offset":29489},"end":{"line":914,"col":6,"offset":29490},"abstract_content":"c"},"$UNSIGNED":{"start":{"line":914,"col":9,"offset":29493},"end":{"line":914,"col":10,"offset":29494},"abstract_content":"i"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"ec68c45a3ed54761b35ef15c0e21606e78b9dbf41d56f38a1cab53db608875424400e744294ea3bd2e7897586a2160a4aa8766da4923056aece5d05b2316e242_0","lines":"    c = i % FONTENC_SEGMENT_SIZE;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":917,"col":18,"offset":29563},"end":{"line":917,"col":59,"offset":29604},"extra":{"metavars":{"$FUN":{"start":{"line":917,"col":18,"offset":29563},"end":{"line":917,"col":24,"offset":29569},"abstract_content":"calloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"5668ecde517f64c7224125bb292948c404dda7642de249f9056d6d21837b7aca9c02db1f3002d97eec319b3053564d704da934cd4c42f58d8f110d8a12471d38_0","lines":"        map[s] = calloc(FONTENC_SEGMENT_SIZE, sizeof(int));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":917,"col":18,"offset":29563},"end":{"line":917,"col":59,"offset":29604},"extra":{"metavars":{"$CNT":{"start":{"line":917,"col":25,"offset":29570},"end":{"line":917,"col":45,"offset":29590},"abstract_content":"FONTENC_SEGMENT_SIZE"},"$LEN":{"start":{"line":917,"col":47,"offset":29592},"end":{"line":917,"col":58,"offset":29603},"abstract_content":"sizeof(int)"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"dc4531006fad1604032da11da9645143bf2c6474f61813625566e92f66138c8dcfa3d72c78a140a88f8e530f649a768e1e6da73dd3b855cc73198cbc5f99db7b_0","lines":"        map[s] = calloc(FONTENC_SEGMENT_SIZE, sizeof(int));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":937,"col":11,"offset":29949},"end":{"line":937,"col":50,"offset":29988},"extra":{"metavars":{"$FUN":{"start":{"line":937,"col":11,"offset":29949},"end":{"line":937,"col":17,"offset":29955},"abstract_content":"calloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"5668ecde517f64c7224125bb292948c404dda7642de249f9056d6d21837b7aca9c02db1f3002d97eec319b3053564d704da934cd4c42f58d8f110d8a12471d38_1","lines":"    map = calloc(FONTENC_SEGMENTS, sizeof(int *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-signed-unsigned-conversion","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":937,"col":11,"offset":29949},"end":{"line":937,"col":50,"offset":29988},"extra":{"metavars":{"$CNT":{"start":{"line":937,"col":18,"offset":29956},"end":{"line":937,"col":34,"offset":29972},"abstract_content":"FONTENC_SEGMENTS"},"$LEN":{"start":{"line":937,"col":36,"offset":29974},"end":{"line":937,"col":49,"offset":29987},"abstract_content":"sizeof(int*)"}},"message":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/195","https://cwe.mitre.org/data/definitions/196","https://cwe.mitre.org/data/definitions/194","https://cwe.mitre.org/data/definitions/191","https://cwe.mitre.org/data/definitions/681","https://cwe.mitre.org/data/definitions/789","https://g.co/kgs/PCHQjJ","https://github.com/struct/mms","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","http://www.phrack.org/issues/60/10.html#article","https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"],"confidence":"LOW"},"severity":"WARNING","fingerprint":"589acad83e5e843c84860bd9801e7b6633c1f5dc1a7a460911f623b42dfb501f87f3be624f94f273ea8ab52d4b40e256c3c2ede43ee35ff143d4c5839994d9b0_0","lines":"    map = calloc(FONTENC_SEGMENTS, sizeof(int *));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-interesting-api-calls","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":960,"col":15,"offset":30649},"end":{"line":960,"col":48,"offset":30682},"extra":{"metavars":{"$FUN":{"start":{"line":960,"col":15,"offset":30649},"end":{"line":960,"col":21,"offset":30655},"abstract_content":"malloc"}},"message":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java","https://github.com/x509cert/banned/blob/master/banned.h","https://g.co/kgs/PCHQjJ","https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf","https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"],"confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"371addc6922fc7f01897d71779b2ae2ff2e29240811c787edb9f2982e0fa8263a34901280f34fc5d2a6791e3021a4de262cde28e352d4990c43b48b9cc69ce33_1","lines":"    reverse = malloc(sizeof(FontMapReverseRec));","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":984,"col":9,"offset":31077},"end":{"line":984,"col":22,"offset":31090},"extra":{"metavars":{"$PTR":{"start":{"line":984,"col":14,"offset":31082},"end":{"line":984,"col":20,"offset":31088},"abstract_content":"map[i]"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"5245e33408d70077b9c248365dffa9e7b756f2b6c430beb4d4fb24f7d2edbcdbd5b94c416903566a62da58ea59398e91c4e4650ef4b13177c882189a185a1ca2_0","lines":"        free(map[i]);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"SEAM.semgrep-rules.c.raptor-mismatched-memory-management","path":"/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","start":{"line":986,"col":5,"offset":31096},"end":{"line":986,"col":15,"offset":31106},"extra":{"metavars":{"$PTR":{"start":{"line":986,"col":10,"offset":31101},"end":{"line":986,"col":13,"offset":31104},"abstract_content":"map"}},"message":"The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.","metadata":{"author":"Marco Ivaldi <raptor@0xdeadbeef.info>","references":["https://cwe.mitre.org/data/definitions/762","https://cwe.mitre.org/data/definitions/590","https://github.com/struct/mms"],"confidence":"LOW"},"severity":"INFO","fingerprint":"85d00727a7ea241481d4f5f33097e0b49c959f98dc7d11225d47416f5c63883f8ee113f7b23e262ec91d3bcb8ef56d426f427d3e05e65eab2328bc63ea21b6b1_0","lines":"    free(map);","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[],"paths":{"scanned":["/home/capstone/Desktop/root/libfontenc-1.1.4/include/X11/fonts/fontenc.h","/home/capstone/Desktop/root/libfontenc-1.1.4/src/encparse.c","/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontenc.c","/home/capstone/Desktop/root/libfontenc-1.1.4/src/fontencI.h"]},"interfile_languages_used":[],"skipped_rules":[]}