<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.90"/>
    <errors>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%hho in format string (no. 1) requires &apos;unsigned char&apos; but the argument type is &apos;signed char&apos;." verbose="%hho in format string (no. 1) requires &apos;unsigned char&apos; but the argument type is &apos;signed char&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/.pc/Support-KT_DEAD2-diacritics.patch/src/libkeymap/dump.c" line="263" column="5"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/.pc/Support-KT_DEAD2-diacritics.patch/src/libkeymap/dump.c" line="480" column="4"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/.pc/Support-KT_DEAD2-diacritics.patch/src/libkeymap/dump.c" line="549" column="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ptr&apos; can be reduced." verbose="The scope of the variable &apos;ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/.pc/Support-KT_DEAD2-diacritics.patch/src/libkeymap/dump.c" line="275" column="21"/>
            <symbol>ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/.pc/Support-KT_DEAD2-diacritics.patch/src/libkeymap/ksyms.c" line="182" column="6"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;keycode&apos; can be reduced." verbose="The scope of the variable &apos;keycode&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/.pc/Support-KT_DEAD2-diacritics.patch/src/libkeymap/ksyms.c" line="272" column="6"/>
            <symbol>keycode</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/.pc/Support-KT_DEAD2-diacritics.patch/src/libkeymap/ksyms.c" line="273" column="7"/>
            <symbol>p</symbol>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 6) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 6) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/codepage.c" line="162" column="3"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned long&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/codepage.c" line="186" column="5"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 7) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 7) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/codepage.c" line="229" column="3"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 8) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 8) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/codepage.c" line="229" column="3"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/codepage.c" line="257" column="4"/>
        </error>
        <error id="invalidPrintfArgType_s" severity="warning" msg="%s in format string (no. 1) requires &apos;char *&apos; but the argument type is &apos;signed int&apos;." verbose="%s in format string (no. 1) requires &apos;char *&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/splitfont.c" line="17" column="3"/>
        </error>
        <error id="invalidPrintfArgType_s" severity="warning" msg="%s in format string (no. 2) requires &apos;char *&apos; but the argument type is &apos;signed int&apos;." verbose="%s in format string (no. 2) requires &apos;char *&apos; but the argument type is &apos;signed int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/splitfont.c" line="17" column="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/splitfont.c" line="12" column="9"/>
            <symbol>fd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/splitfont.c" line="13" column="8"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;from&apos; can be reduced." verbose="The scope of the variable &apos;from&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/splitfont.c" line="47" column="6"/>
            <symbol>from</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;to&apos; can be reduced." verbose="The scope of the variable &apos;to&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/splitfont.c" line="47" column="12"/>
            <symbol>to</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/splitfont.c" line="12" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: q" verbose="Unused variable: q" cwe="563">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/splitfont.c" line="13" column="12"/>
            <symbol>q</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: s" verbose="Unused variable: s" cwe="563">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/splitfont.c" line="13" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/contrib/vcstime.c" line="37" column="13"/>
            <symbol>t</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num&apos; can be reduced." verbose="The scope of the variable &apos;num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/deallocvt.c" line="22" column="10"/>
            <symbol>num</symbol>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/getkeycodes.c" line="66" column="3"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/getkeycodes.c" line="81" column="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mb_length&apos; can be reduced." verbose="The scope of the variable &apos;mb_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/getunimap.c" line="41" column="11"/>
            <symbol>mb_length</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;KIOCSRATE&apos; since the value of &apos;KIOCSRATE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;KIOCSRATE&apos; since the value of &apos;KIOCSRATE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/kbdrate.c" line="204" column="0"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: ud.entries" verbose="Memory leak: ud.entries" cwe="401">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/kdmapop.c" line="157" column="4"/>
            <symbol>ud.entries</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ct&apos; can be reduced." verbose="The scope of the variable &apos;ct&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/kdmapop.c" line="139" column="6"/>
            <symbol>ct</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;getunimap&apos; argument 2 names different: declaration &apos;ud&apos; definition &apos;ud0&apos;." verbose="Function &apos;getunimap&apos; argument 2 names different: declaration &apos;ud&apos; definition &apos;ud0&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/kdmapop.c" line="136" column="42"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/kdmapop.c" file="/home/capstone/Desktop/root/kbd-2.0.4/src/kdmapop.h" line="8" column="49"/>
            <symbol>getunimap</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENOIOCTLCMD&apos; since the value of &apos;ENOIOCTLCMD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENOIOCTLCMD&apos; since the value of &apos;ENOIOCTLCMD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/kdmapop.c" line="185" column="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="2866" column="5"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;yyg-&gt;yy_c_buf_p&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;yyg-&gt;yy_c_buf_p&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.l" line="383" column="1" info="yyg-&gt;yy_c_buf_p is overwritten"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.l" line="382" column="17" info="yyg-&gt;yy_c_buf_p is assigned"/>
            <symbol>yyg-&gt;yy_c_buf_p</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;c&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;c&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="1985" column="3" info="c is overwritten"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="1985" column="3" info="c is initialized"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;path&apos; can be reduced." verbose="The scope of the variable &apos;path&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.l" line="174" column="25"/>
            <symbol>path</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ptr&apos; can be reduced." verbose="The scope of the variable &apos;ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.l" line="174" column="44"/>
            <symbol>ptr</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;num_to_read&apos; is less than zero." verbose="The unsigned expression &apos;num_to_read&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="1944" column="23" info="Unsigned less than zero"/>
            <symbol>num_to_read</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;new_size&apos; is less than zero." verbose="The unsigned expression &apos;new_size&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="1957" column="19" info="Unsigned less than zero"/>
            <symbol>new_size</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;yy_try_NUL_trans&apos; argument 1 names different: declaration &apos;current_state&apos; definition &apos;yy_current_state&apos;." verbose="Function &apos;yy_try_NUL_trans&apos; argument 1 names different: declaration &apos;current_state&apos; definition &apos;yy_current_state&apos;." cwe="628" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="2062" column="59"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="369" column="54"/>
            <symbol>yy_try_NUL_trans</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;yy_scan_string&apos; argument 1 names different: declaration &apos;yy_str&apos; definition &apos;yystr&apos;." verbose="Function &apos;yy_scan_string&apos; argument 1 names different: declaration &apos;yy_str&apos; definition &apos;yystr&apos;." cwe="628" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="2481" column="48"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="326" column="47"/>
            <symbol>yy_scan_string</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;yy_scan_bytes&apos; argument 1 names different: declaration &apos;bytes&apos; definition &apos;yybytes&apos;." verbose="Function &apos;yy_scan_bytes&apos; argument 1 names different: declaration &apos;bytes&apos; definition &apos;yybytes&apos;." cwe="628" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="2494" column="48"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="327" column="46"/>
            <symbol>yy_scan_bytes</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;yy_scan_bytes&apos; argument 2 names different: declaration &apos;len&apos; definition &apos;_yybytes_len&apos;." verbose="Function &apos;yy_scan_bytes&apos; argument 2 names different: declaration &apos;len&apos; definition &apos;_yybytes_len&apos;." cwe="628" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="2494" column="68"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="327" column="62"/>
            <symbol>yy_scan_bytes</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;yyset_debug&apos; argument 1 names different: declaration &apos;debug_flag&apos; definition &apos;_bdebug&apos;." verbose="Function &apos;yyset_debug&apos; argument 1 names different: declaration &apos;debug_flag&apos; definition &apos;_bdebug&apos;." cwe="628" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="2723" column="24"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="1128" column="23"/>
            <symbol>yyset_debug</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;yylex_init&apos; argument 1 names different: declaration &apos;scanner&apos; definition &apos;ptr_yy_globals&apos;." verbose="Function &apos;yylex_init&apos; argument 1 names different: declaration &apos;scanner&apos; definition &apos;ptr_yy_globals&apos;." cwe="628" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="2750" column="26"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="1117" column="27"/>
            <symbol>yylex_init</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;yylex_init_extra&apos; argument 1 names different: declaration &apos;user_defined&apos; definition &apos;yy_user_defined&apos;." verbose="Function &apos;yylex_init_extra&apos; argument 1 names different: declaration &apos;user_defined&apos; definition &apos;yy_user_defined&apos;." cwe="628" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="2779" column="36"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="1119" column="37"/>
            <symbol>yylex_init_extra</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;yylex_init_extra&apos; argument 2 names different: declaration &apos;scanner&apos; definition &apos;ptr_yy_globals&apos;." verbose="Function &apos;yylex_init_extra&apos; argument 2 names different: declaration &apos;scanner&apos; definition &apos;ptr_yy_globals&apos;." cwe="628" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="2779" column="62"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/analyze.c" file="analyze.c" line="1119" column="60"/>
            <symbol>yylex_init_extra</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;YY_USER_INIT&apos; since the value of &apos;YY_USER_INIT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;YY_USER_INIT&apos; since the value of &apos;YY_USER_INIT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="analyze.c" line="1319" column="0"/>
        </error>
        <error id="invalidFunctionArg" severity="warning" msg="Either the condition &apos;if(size&amp;&amp;!a-&gt;array)&apos; is redundant or calloc() argument nr 1 can have invalid value. The value is 0 but the valid values are &apos;1:&apos;." verbose="Either the condition &apos;if(size&amp;&amp;!a-&gt;array)&apos; is redundant or calloc() argument nr 1 can have invalid value. The value is 0 but the valid values are &apos;1:&apos;." cwe="628">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/array.c" line="18" column="20" info="Invalid argument"/>
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/array.c" line="22" column="5" info="Assuming that condition &apos;if(size&amp;&amp;!a-&gt;array)&apos; is not redundant"/>
            <symbol>calloc</symbol>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;a-&gt;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;a-&gt;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/array.c" line="57" column="24"/>
            <symbol>a-&gt;array</symbol>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;a-&gt;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;a-&gt;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/array.c" line="73" column="18"/>
            <symbol>a-&gt;array</symbol>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;tmp&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;tmp&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/array.c" line="98" column="14"/>
            <symbol>tmp</symbol>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;a-&gt;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;a-&gt;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/array.c" line="113" column="18"/>
            <symbol>a-&gt;array</symbol>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;a-&gt;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;a-&gt;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/array.c" line="125" column="19"/>
            <symbol>a-&gt;array</symbol>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&apos;a-&gt;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined." verbose="&apos;a-&gt;array&apos; is of type &apos;void *&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1." cwe="467">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/array.c" line="139" column="18"/>
            <symbol>a-&gt;array</symbol>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%hho in format string (no. 1) requires &apos;unsigned char&apos; but the argument type is &apos;signed char&apos;." verbose="%hho in format string (no. 1) requires &apos;unsigned char&apos; but the argument type is &apos;signed char&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/dump.c" line="263" column="5"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/dump.c" line="483" column="4"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/dump.c" line="552" column="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ptr&apos; can be reduced." verbose="The scope of the variable &apos;ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/dump.c" line="275" column="21"/>
            <symbol>ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dc&apos; can be reduced." verbose="The scope of the variable &apos;dc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/findfile.c" line="64" column="23"/>
            <symbol>dc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dl&apos; can be reduced." verbose="The scope of the variable &apos;dl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/findfile.c" line="252" column="6"/>
            <symbol>dl</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;recdepth&apos; can be reduced." verbose="The scope of the variable &apos;recdepth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/findfile.c" line="252" column="10"/>
            <symbol>recdepth</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rc&apos; can be reduced." verbose="The scope of the variable &apos;rc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/findfile.c" line="252" column="20"/>
            <symbol>rc</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;lk_kernel_keys&apos; argument 2 names different: declaration &apos;console&apos; definition &apos;fd&apos;." verbose="Function &apos;lk_kernel_keys&apos; argument 2 names different: declaration &apos;console&apos; definition &apos;fd&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/kernel.c" line="20" column="44"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/kernel.c" file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/keymap/kernel.h" line="27" column="44"/>
            <symbol>lk_kernel_keys</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;lk_kernel_funcs&apos; argument 2 names different: declaration &apos;console&apos; definition &apos;fd&apos;." verbose="Function &apos;lk_kernel_funcs&apos; argument 2 names different: declaration &apos;console&apos; definition &apos;fd&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/kernel.c" line="51" column="45"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/kernel.c" file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/keymap/kernel.h" line="36" column="45"/>
            <symbol>lk_kernel_funcs</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;lk_kernel_diacrs&apos; argument 2 names different: declaration &apos;console&apos; definition &apos;fd&apos;." verbose="Function &apos;lk_kernel_diacrs&apos; argument 2 names different: declaration &apos;console&apos; definition &apos;fd&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/kernel.c" line="75" column="46"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/kernel.c" file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/keymap/kernel.h" line="45" column="46"/>
            <symbol>lk_kernel_diacrs</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;lk_kernel_keymap&apos; argument 2 names different: declaration &apos;console&apos; definition &apos;fd&apos;." verbose="Function &apos;lk_kernel_keymap&apos; argument 2 names different: declaration &apos;console&apos; definition &apos;fd&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/kernel.c" line="107" column="46"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/kernel.c" file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/keymap/kernel.h" line="18" column="46"/>
            <symbol>lk_kernel_keymap</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;KDGKBDIACRUC&apos; since the value of &apos;KDGKBDIACRUC&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;KDGKBDIACRUC&apos; since the value of &apos;KDGKBDIACRUC&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/kernel.c" line="78" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/ksyms.c" line="182" column="6"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/ksyms.c" line="273" column="7"/>
            <symbol>p</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;lk_set_charset&apos; argument 2 names different: declaration &apos;name&apos; definition &apos;charset&apos;." verbose="Function &apos;lk_set_charset&apos; argument 2 names different: declaration &apos;name&apos; definition &apos;charset&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/ksyms.c" line="133" column="52"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/ksyms.c" file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/keymap/charset.h" line="12" column="52"/>
            <symbol>lk_set_charset</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;lk_ksym_to_unicode&apos; argument 2 names different: declaration &apos;code&apos; definition &apos;s&apos;." verbose="Function &apos;lk_ksym_to_unicode&apos; argument 2 names different: declaration &apos;code&apos; definition &apos;s&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/ksyms.c" line="381" column="56"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/ksyms.c" file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/keymap/dump.h" line="114" column="56"/>
            <symbol>lk_ksym_to_unicode</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ptr&apos; can be reduced." verbose="The scope of the variable &apos;ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/loadkeys.c" line="149" column="8"/>
            <symbol>ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/loadkeys.c" line="186" column="15"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/loadkeys.c" line="186" column="18"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diacct&apos; can be reduced." verbose="The scope of the variable &apos;diacct&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/loadkeys.c" line="244" column="21"/>
            <symbol>diacct</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;KDSKBDIACRUC&apos; since the value of &apos;KDSKBDIACRUC&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;KDSKBDIACRUC&apos; since the value of &apos;KDSKBDIACRUC&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/loadkeys.c" line="211" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/parser.c" line="0" column="0"/>
        </error>
        <error id="negativeIndex" severity="warning" msg="Either the condition &apos;yytoken!=-2&apos; is redundant or the array &apos;yytname[56]&apos; is accessed at index -2, which is out of bounds." verbose="Either the condition &apos;yytoken!=-2&apos; is redundant or the array &apos;yytname[56]&apos; is accessed at index -2, which is out of bounds." cwe="786">
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/parser.c" file="* yacc.c:358  *" line="850" column="52" info="Negative array index"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/parser.c" file="* yacc.c:358  *" line="884" column="15" info="Assuming that condition &apos;yytoken!=-2&apos; is not redundant"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EXIT_SUCCESS;_ALLOCA_H;YYSTACK_USE_ALLOCA;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EXIT_SUCCESS;_ALLOCA_H;YYSTACK_USE_ALLOCA;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="* yacc.c:358  *" line="1100" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;YYPRINT&apos; since the value of &apos;YYPRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;YYPRINT&apos; since the value of &apos;YYPRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="* yacc.c:358  *" line="650" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;YYSTACK_USE_ALLOCA;_AIX;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;YYSTACK_USE_ALLOCA;_AIX;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="* yacc.c:358  *" line="1100" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;YYSTACK_USE_ALLOCA;_MSC_VER;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;YYSTACK_USE_ALLOCA;_MSC_VER;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="* yacc.c:358  *" line="1100" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;YYSTACK_USE_ALLOCA;__BUILTIN_VA_ARG_INCR;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;YYSTACK_USE_ALLOCA;__BUILTIN_VA_ARG_INCR;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="* yacc.c:358  *" line="1100" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;YYSTACK_USE_ALLOCA;__GNUC__;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;YYSTACK_USE_ALLOCA;__GNUC__;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="* yacc.c:358  *" line="1100" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;YYSTACK_USE_ALLOCA;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;YYSTACK_USE_ALLOCA;yyoverflow&apos; since the value of &apos;yyoverflow&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="* yacc.c:358  *" line="1100" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/loadunimap.c" line="271" column="8"/>
            <symbol>p</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;loadunicodemap&apos; argument 2 names different: declaration &apos;ufil&apos; definition &apos;tblname&apos;." verbose="Function &apos;loadunicodemap&apos; argument 2 names different: declaration &apos;ufil&apos; definition &apos;tblname&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/loadunimap.c" line="268" column="35"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/loadunimap.c" file="/home/capstone/Desktop/root/kbd-2.0.4/src/loadunimap.h" line="7" column="35"/>
            <symbol>loadunicodemap</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;appendunicodemap&apos; argument 3 names different: declaration &apos;ct&apos; definition &apos;fontsize&apos;." verbose="Function &apos;appendunicodemap&apos; argument 3 names different: declaration &apos;ct&apos; definition &apos;fontsize&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/loadunimap.c" line="347" column="45"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/loadunimap.c" file="/home/capstone/Desktop/root/kbd-2.0.4/src/loadunimap.h" line="8" column="45"/>
            <symbol>appendunicodemap</symbol>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." verbose="%x in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/mapscrn.c" line="224" column="9"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%o in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." verbose="%o in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/mapscrn.c" line="228" column="9"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." verbose="%x in format string (no. 1) requires &apos;unsigned int *&apos; but the argument type is &apos;signed int *&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/mapscrn.c" line="235" column="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/mapscrn.c" line="98" column="8"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/mapscrn.c" line="260" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psffontop.c" line="264" column="4"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="portability" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psffontop.c" line="291" column="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psffontop.c" line="92" column="8"/>
            <symbol>u</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psffontop.c" line="464" column="9"/>
            <symbol>i</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;inputbuflth&apos; is assigned a value that is never used." verbose="Variable &apos;inputbuflth&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psffontop.c" line="235" column="15"/>
            <symbol>inputbuflth</symbol>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%x in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." verbose="%x in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="183" column="5"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%x in format string (no. 3) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." verbose="%x in format string (no. 3) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="183" column="5"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%x in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." verbose="%x in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="190" column="5"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%x in format string (no. 3) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." verbose="%x in format string (no. 3) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="190" column="5"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%x in format string (no. 4) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." verbose="%x in format string (no. 4) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="190" column="5"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%x in format string (no. 5) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." verbose="%x in format string (no. 5) requires &apos;unsigned int&apos; but the argument type is &apos;signed long&apos;." cwe="686">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="190" column="5"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ifil&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ifil&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="314" column="8" info="ifil is overwritten"/>
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="255" column="7" info="ifil is assigned"/>
            <symbol>ifil</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="108" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="217" column="7"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="218" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sep&apos; can be reduced." verbose="The scope of the variable &apos;sep&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/psfxtable.c" line="396" column="9"/>
            <symbol>sep</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;infile&apos; can be reduced." verbose="The scope of the variable &apos;infile&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/resizecons.c" line="114" column="25"/>
            <symbol>infile</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;devfsconsnam&apos; can be reduced." verbose="The scope of the variable &apos;devfsconsnam&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/screendump.c" line="99" column="20"/>
            <symbol>devfsconsnam</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bad_video_erase_char&apos; can be reduced." verbose="The scope of the variable &apos;bad_video_erase_char&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setfont.c" line="261" column="6"/>
            <symbol>bad_video_erase_char</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ifil&apos; can be reduced." verbose="The scope of the variable &apos;ifil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setfont.c" line="398" column="8"/>
            <symbol>ifil</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;height&apos; can be reduced." verbose="The scope of the variable &apos;height&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setfont.c" line="399" column="38"/>
            <symbol>height</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bytewidth&apos; can be reduced." verbose="The scope of the variable &apos;bytewidth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setfont.c" line="399" column="53"/>
            <symbol>bytewidth</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bytewidth&apos; can be reduced." verbose="The scope of the variable &apos;bytewidth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setfont.c" line="480" column="21"/>
            <symbol>bytewidth</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setfont.c" line="660" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;sunkbdfd&gt;=0&apos; is always false" verbose="Condition &apos;sunkbdfd&gt;=0&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setleds.c" line="183" column="15" info="Condition &apos;sunkbdfd&gt;=0&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;sunkbdfd&gt;=0&apos; is always false" verbose="Condition &apos;sunkbdfd&gt;=0&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setleds.c" line="225" column="17" info="Condition &apos;sunkbdfd&gt;=0&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;sunkbdfd&gt;=0&apos; is always false" verbose="Condition &apos;sunkbdfd&gt;=0&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setleds.c" line="290" column="16" info="Condition &apos;sunkbdfd&gt;=0&apos; is always false"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;KIOCGLED&apos; since the value of &apos;KIOCGLED&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;KIOCGLED&apos; since the value of &apos;KIOCGLED&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setleds.c" line="128" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;KIOCSLED&apos; since the value of &apos;KIOCSLED&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;KIOCSLED&apos; since the value of &apos;KIOCSLED&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setleds.c" line="147" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGSTKFLT&apos; since the value of &apos;SIGSTKFLT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGSTKFLT&apos; since the value of &apos;SIGSTKFLT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/showkey.c" line="213" column="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num&apos; is assigned a value that is never used." verbose="Variable &apos;num&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/totextmode.c" line="39" column="6"/>
            <symbol>num</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;xrealloc&apos; argument 1 names different: declaration &apos;p&apos; definition &apos;pp&apos;." verbose="Function &apos;xrealloc&apos; argument 1 names different: declaration &apos;p&apos; definition &apos;pp&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/xmalloc.c" line="32" column="16"/>
            <location file0="/home/capstone/Desktop/root/kbd-2.0.4/src/xmalloc.c" file="/home/capstone/Desktop/root/kbd-2.0.4/src/xmalloc.h" line="6" column="29"/>
            <symbol>xrealloc</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s==NULL&apos; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &apos;s==NULL&apos; is redundant or there is possible null pointer dereference: s." cwe="476">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/tests/libkeymap-charset.c" line="47" column="17" info="Null pointer dereference"/>
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/tests/libkeymap-charset.c" line="44" column="20" info="Assignment &apos;s=lk_get_charset(ctx)&apos;, assigned value is 0"/>
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/tests/libkeymap-charset.c" line="46" column="12" info="Assuming that condition &apos;s==NULL&apos; is not redundant"/>
            <symbol>s</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;modifier::name&apos; is never used." verbose="struct member &apos;modifier::name&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/tests/libkeymap-parse.c" line="9" column="14"/>
            <symbol>modifier::name</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;modifier::bit&apos; is never used." verbose="struct member &apos;modifier::bit&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/tests/libkeymap-parse.c" line="10" column="12"/>
            <symbol>modifier::bit</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;modifier::ch&apos; is never used." verbose="struct member &apos;modifier::ch&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/tests/libkeymap-parse.c" line="11" column="13"/>
            <symbol>modifier::ch</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;disactivatemap&apos; is never used." verbose="The function &apos;disactivatemap&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/setfont.c" line="755" column="0"/>
            <symbol>disactivatemap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_code_to_ksym&apos; is never used." verbose="The function &apos;lk_code_to_ksym&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/.pc/Support-KT_DEAD2-diacritics.patch/src/libkeymap/ksyms.c" line="231" column="0"/>
            <symbol>lk_code_to_ksym</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_del_diacr&apos; is never used." verbose="The function &apos;lk_del_diacr&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/diacr.c" line="82" column="0"/>
            <symbol>lk_del_diacr</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_del_func&apos; is never used." verbose="The function &apos;lk_del_func&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/func.c" line="61" column="0"/>
            <symbol>lk_del_func</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_diacr_exists&apos; is never used." verbose="The function &apos;lk_diacr_exists&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/diacr.c" line="22" column="0"/>
            <symbol>lk_diacr_exists</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_fpopen&apos; is never used." verbose="The function &apos;lk_fpopen&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/findfile.c" line="300" column="0"/>
            <symbol>lk_fpopen</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_func_exists&apos; is never used." verbose="The function &apos;lk_func_exists&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/func.c" line="21" column="0"/>
            <symbol>lk_func_exists</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_get_diacr&apos; is never used." verbose="The function &apos;lk_get_diacr&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/diacr.c" line="27" column="0"/>
            <symbol>lk_get_diacr</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_get_keys_total&apos; is never used." verbose="The function &apos;lk_get_keys_total&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/kmap.c" line="20" column="0"/>
            <symbol>lk_get_keys_total</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_get_log_priority&apos; is never used." verbose="The function &apos;lk_get_log_priority&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/common.c" line="97" column="0"/>
            <symbol>lk_get_log_priority</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_get_parser_flags&apos; is never used." verbose="The function &apos;lk_get_parser_flags&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/libkeymap/common.c" line="115" column="0"/>
            <symbol>lk_get_parser_flags</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_get_sym&apos; is never used." verbose="The function &apos;lk_get_sym&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/.pc/Support-KT_DEAD2-diacritics.patch/src/libkeymap/ksyms.c" line="172" column="0"/>
            <symbol>lk_get_sym</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;lk_ksym_to_unicode&apos; is never used." verbose="The function &apos;lk_ksym_to_unicode&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/.pc/Support-KT_DEAD2-diacritics.patch/src/libkeymap/ksyms.c" line="373" column="0"/>
            <symbol>lk_ksym_to_unicode</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;xfree&apos; is never used." verbose="The function &apos;xfree&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/xmalloc.c" line="59" column="0"/>
            <symbol>xfree</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;xstrdup&apos; is never used." verbose="The function &apos;xstrdup&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/xmalloc.c" line="41" column="0"/>
            <symbol>xstrdup</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;xstrndup&apos; is never used." verbose="The function &apos;xstrndup&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/kbd-2.0.4/src/xmalloc.c" line="50" column="0"/>
            <symbol>xstrndup</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
