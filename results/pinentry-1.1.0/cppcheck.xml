<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.90"/>
    <errors>
        <error id="constArgument" severity="style" msg="Argument &apos;*p&apos; to function push_back is always 38" verbose="Argument &apos;*p&apos; to function push_back is always 38" cwe="570">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/.pc/0003-Fix-format-string-errors-in-fltk-pinentry.patch/fltk/main.cxx" line="74" column="22" info="Argument &apos;*p&apos; to function push_back is always 38"/>
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/.pc/0003-Fix-format-string-errors-in-fltk-pinentry.patch/fltk/main.cxx" line="73" column="12" info="Assuming that condition &apos;&apos;&amp;&apos;==*p&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;GPG_AGENT_IS_PORTED_TO_ONLY_SEND_UTF8&apos; is always false" verbose="Condition &apos;GPG_AGENT_IS_PORTED_TO_ONLY_SEND_UTF8&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/.pc/0006-qt-Fix-use-of-dangling-pointer-in-QApplication.patch/qt/main.cpp" line="132" column="13" info="Condition &apos;GPG_AGENT_IS_PORTED_TO_ONLY_SEND_UTF8&apos; is always false"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;str&apos; shadows outer variable" verbose="Local variable &apos;str&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/.pc/0006-qt-Fix-use-of-dangling-pointer-in-QApplication.patch/qt/main.cpp" line="185" column="15" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/.pc/0006-qt-Fix-use-of-dangling-pointer-in-QApplication.patch/qt/main.cpp" line="146" column="11" info="Shadowed declaration"/>
            <symbol>str</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/.pc/0007-gtk2-When-X11-input-grabbing-fails-try-again-over-0..patch/gtk+-2/pinentry-gtk-2.c" line="287" column="23"/>
            <symbol>s2</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;prompt&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;prompt&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/main.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.h" line="41" column="15" info="Function in derived class"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/main.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="75" column="15" info="Virtual function in base class"/>
            <symbol>prompt</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;init&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;init&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/main.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.h" line="48" column="14" info="Function in derived class"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/main.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="87" column="14" info="Virtual function in base class"/>
            <symbol>init</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;init&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;init&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/main.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/qualitypasswindow.h" line="50" column="14" info="Function in derived class"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/main.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.h" line="48" column="14" info="Virtual function in base class"/>
            <symbol>init</symbol>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;*p&apos; to function push_back is always 38" verbose="Argument &apos;*p&apos; to function push_back is always 38" cwe="570">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/main.cxx" line="74" column="22" info="Argument &apos;*p&apos; to function push_back is always 38"/>
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/main.cxx" line="73" column="12" info="Assuming that condition &apos;&apos;&amp;&apos;==*p&apos; is not redundant"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PinWindow::set_label&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;PinWindow::set_label&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." cwe="398" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="95" column="32"/>
            <symbol>PinWindow::set_label</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;prompt&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;prompt&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.h" line="41" column="15" info="Function in derived class"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="75" column="15" info="Virtual function in base class"/>
            <symbol>prompt</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;init&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;init&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.h" line="48" column="14" info="Function in derived class"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="87" column="14" info="Virtual function in base class"/>
            <symbol>init</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;y&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;y&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" line="59" column="4" info="y is overwritten"/>
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" line="55" column="8" info="y is initialized"/>
            <symbol>y</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;prompt&apos; argument 1 names different: declaration &apos;message&apos; definition &apos;name&apos;." verbose="Function &apos;prompt&apos; argument 1 names different: declaration &apos;message&apos; definition &apos;name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" line="38" column="37"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.h" line="41" column="34"/>
            <symbol>prompt</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;description&apos; argument 1 names different: declaration &apos;desc&apos; definition &apos;name&apos;." verbose="Function &apos;description&apos; argument 1 names different: declaration &apos;desc&apos; definition &apos;name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" line="43" column="42"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.h" line="42" column="39"/>
            <symbol>description</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;error&apos; argument 1 names different: declaration &apos;err&apos; definition &apos;name&apos;." verbose="Function &apos;error&apos; argument 1 names different: declaration &apos;err&apos; definition &apos;name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" line="48" column="36"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.h" line="43" column="33"/>
            <symbol>error</symbol>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PinWindow::icon_&apos; is not initialized in the constructor." verbose="Member variable &apos;PinWindow::icon_&apos; is not initialized in the constructor." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.cxx" line="52" column="12"/>
            <symbol>PinWindow::icon_</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PinWindow::set_label&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;PinWindow::set_label&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." cwe="398" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="95" column="32"/>
            <symbol>PinWindow::set_label</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;title&apos; argument 1 names different: declaration &apos;title&apos; definition &apos;name&apos;." verbose="Function &apos;title&apos; argument 1 names different: declaration &apos;title&apos; definition &apos;name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.cxx" line="76" column="35"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="72" column="33"/>
            <symbol>title</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;ok&apos; argument 1 names different: declaration &apos;ok&apos; definition &apos;name&apos;." verbose="Function &apos;ok&apos; argument 1 names different: declaration &apos;ok&apos; definition &apos;name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.cxx" line="81" column="32"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="73" column="30"/>
            <symbol>ok</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;cancel&apos; argument 1 names different: declaration &apos;cancel&apos; definition &apos;label&apos;." verbose="Function &apos;cancel&apos; argument 1 names different: declaration &apos;cancel&apos; definition &apos;label&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.cxx" line="86" column="36"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="74" column="34"/>
            <symbol>cancel</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;prompt&apos; argument 1 names different: declaration &apos;message&apos; definition &apos;name&apos;." verbose="Function &apos;prompt&apos; argument 1 names different: declaration &apos;message&apos; definition &apos;name&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.cxx" line="96" column="36"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="75" column="34"/>
            <symbol>prompt</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PinWindow::set_label&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;PinWindow::set_label&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." cwe="398" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/qualitypasswindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="95" column="32"/>
            <symbol>PinWindow::set_label</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;prompt&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;prompt&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/qualitypasswindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.h" line="41" column="15" info="Function in derived class"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/qualitypasswindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="75" column="15" info="Virtual function in base class"/>
            <symbol>prompt</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;init&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;init&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/qualitypasswindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.h" line="48" column="14" info="Function in derived class"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/qualitypasswindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/pinwindow.h" line="87" column="14" info="Virtual function in base class"/>
            <symbol>init</symbol>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;init&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;init&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/qualitypasswindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/qualitypasswindow.h" line="50" column="14" info="Function in derived class"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/qualitypasswindow.cxx" file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/passwindow.h" line="48" column="14" info="Virtual function in base class"/>
            <symbol>init</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;y&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;y&apos;. The initialized value is overwritten before it is read." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/qualitypasswindow.cxx" line="82" column="4" info="y is overwritten"/>
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/fltk/qualitypasswindow.cxx" line="76" column="8" info="y is initialized"/>
            <symbol>y</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/gtk+-2/pinentry-gtk-2.c" line="289" column="23"/>
            <symbol>s2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_ptr&apos; can be reduced." verbose="The scope of the variable &apos;arg_ptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="298" column="11"/>
            <symbol>arg_ptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="299" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="560" column="17"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="672" column="25"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1239" column="8"/>
            <symbol>tmp</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="962" column="47"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="970" column="62"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="972" column="77"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1242" column="24"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1247" column="25"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1249" column="30"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1252" column="27"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1270" column="42"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1283" column="46"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1289" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1292" column="36"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1301" column="41"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1306" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1311" column="47"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1319" column="35"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1329" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1336" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1341" column="37"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1345" column="33"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1350" column="40"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1352" column="41"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1360" column="48"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1362" column="49"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1369" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1373" column="32"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1377" column="56"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1381" column="28"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1382" column="25"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1395" column="33"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1397" column="34"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1398" column="44"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1402" column="31"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1405" column="29"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1408" column="29"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1411" column="23"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1414" column="23"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1418" column="25"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1431" column="40"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1437" column="25"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1439" column="30"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1448" column="29"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1450" column="34"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1452" column="42"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;alias_def_s::value&apos; is never used." verbose="struct member &apos;alias_def_s::value&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="259" column="17"/>
            <symbol>alias_def_s::value</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;password_cache_save&apos; argument 1 names different: declaration &apos;key_grip&apos; definition &apos;keygrip&apos;." verbose="Function &apos;password_cache_save&apos; argument 1 names different: declaration &apos;key_grip&apos; definition &apos;keygrip&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/password-cache.c" line="68" column="34"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/password-cache.c" file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/password-cache.h" line="24" column="39"/>
            <symbol>password_cache_save</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;password_cache_lookup&apos; argument 1 names different: declaration &apos;key_grip&apos; definition &apos;keygrip&apos;." verbose="Function &apos;password_cache_lookup&apos; argument 1 names different: declaration &apos;key_grip&apos; definition &apos;keygrip&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/password-cache.c" line="102" column="36"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/password-cache.c" file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/password-cache.h" line="26" column="42"/>
            <symbol>password_cache_lookup</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pin_utf8&apos; can be reduced." verbose="The scope of the variable &apos;pin_utf8&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry-curses.c" line="828" column="9"/>
            <symbol>pin_utf8</symbol>
        </error>
        <error id="redundantPointerOp" severity="style" msg="Redundant pointer operation on &apos;p&apos; - it&apos;s already a pointer." verbose="Redundant pointer operation on &apos;p&apos; - it&apos;s already a pointer." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry-curses.c" line="515" column="7"/>
            <symbol>p</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry-emacs.c" line="651" column="20" info="Second condition"/>
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry-emacs.c" line="643" column="20" info="First condition"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: (struct sockaddr_un*)0" verbose="Null pointer dereference: (struct sockaddr_un*)0" cwe="476" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry-emacs.c" line="186" column="9" info="Null pointer dereference"/>
            <symbol>(struct sockaddr_un*)0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;needed_capacity&apos; can be reduced." verbose="The scope of the variable &apos;needed_capacity&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry-emacs.c" line="389" column="15"/>
            <symbol>needed_capacity</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;emacs_cmd_handler&apos; argument 1 names different: declaration &apos;pinentry&apos; definition &apos;pe&apos;." verbose="Function &apos;emacs_cmd_handler&apos; argument 1 names different: declaration &apos;pinentry&apos; definition &apos;pe&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry-emacs.c" line="609" column="31"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry-emacs.c" file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry-emacs.h" line="38" column="35"/>
            <symbol>emacs_cmd_handler</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_CS_DARWIN_USER_TEMP_DIR&apos; since the value of &apos;_CS_DARWIN_USER_TEMP_DIR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_CS_DARWIN_USER_TEMP_DIR&apos; since the value of &apos;_CS_DARWIN_USER_TEMP_DIR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry-emacs.c" line="124" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_CS_DARWIN_USER_TEMP_DIR&apos; since the value of &apos;_CS_DARWIN_USER_TEMP_DIR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_CS_DARWIN_USER_TEMP_DIR&apos; since the value of &apos;_CS_DARWIN_USER_TEMP_DIR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry-emacs.c" line="133" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;passphrase&apos; is always true" verbose="Condition &apos;passphrase&apos; is always true" cwe="571">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry.c" line="698" column="7" info="Condition &apos;passphrase&apos; is always true"/>
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry.c" line="690" column="7" info="Assuming that condition &apos;!passphrase&apos; is not redundant"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;pinentry_setbuffer_use&apos; argument 2 names different: declaration &apos;buffer&apos; definition &apos;passphrase&apos;." verbose="Function &apos;pinentry_setbuffer_use&apos; argument 2 names different: declaration &apos;buffer&apos; definition &apos;passphrase&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry.c" line="688" column="47"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry.c" file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/pinentry.h" line="280" column="52"/>
            <symbol>pinentry_setbuffer_use</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;PinEntryDialog&apos; does not have a constructor although it has private member variables." verbose="The class &apos;PinEntryDialog&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/qt/main.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/qt/pinentrydialog.h" line="45" column="1"/>
            <symbol>PinEntryDialog</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;GPG_AGENT_IS_PORTED_TO_ONLY_SEND_UTF8&apos; is always false" verbose="Condition &apos;GPG_AGENT_IS_PORTED_TO_ONLY_SEND_UTF8&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/qt/main.cpp" line="132" column="13" info="Condition &apos;GPG_AGENT_IS_PORTED_TO_ONLY_SEND_UTF8&apos; is always false"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_argc&apos; can be reduced." verbose="The scope of the variable &apos;new_argc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/qt/main.cpp" line="315" column="9"/>
            <symbol>new_argc</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;str&apos; shadows outer variable" verbose="Local variable &apos;str&apos; shadows outer variable" cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/qt/main.cpp" line="185" column="15" info="Shadow variable"/>
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/qt/main.cpp" line="146" column="11" info="Shadowed declaration"/>
            <symbol>str</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new_argc&apos; is assigned a value that is never used." verbose="Variable &apos;new_argc&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/qt/main.cpp" line="315" column="18"/>
            <symbol>new_argc</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;PinEntryDialog&apos; does not have a constructor although it has private member variables." verbose="The class &apos;PinEntryDialog&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/qt/pinentryconfirm.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/qt/pinentrydialog.h" line="45" column="1"/>
            <symbol>PinEntryDialog</symbol>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;PinEntryDialog&apos; does not have a constructor although it has private member variables." verbose="The class &apos;PinEntryDialog&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/qt/pinentrydialog.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/qt/pinentrydialog.h" line="45" column="1"/>
            <symbol>PinEntryDialog</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;visibilityIcon&apos; is assigned a value that is never used." verbose="Variable &apos;visibilityIcon&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/qt/pinentrydialog.cpp" line="232" column="32"/>
            <symbol>visibilityIcon</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;hideIcon&apos; is assigned a value that is never used." verbose="Variable &apos;hideIcon&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/qt/pinentrydialog.cpp" line="233" column="26"/>
            <symbol>hideIcon</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="0" column="0"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;secmem_init&apos; argument 1 names different: declaration &apos;npool&apos; definition &apos;n&apos;." verbose="Function &apos;secmem_init&apos; argument 1 names different: declaration &apos;npool&apos; definition &apos;n&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="284" column="21"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/memory.h" line="38" column="26"/>
            <symbol>secmem_init</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;secmem_realloc&apos; argument 1 names different: declaration &apos;a&apos; definition &apos;p&apos;." verbose="Function &apos;secmem_realloc&apos; argument 1 names different: declaration &apos;a&apos; definition &apos;p&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="374" column="23"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/memory.h" line="41" column="29"/>
            <symbol>secmem_realloc</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;PROPERLY_ALIGNED_TYPE::a&apos; is never used." verbose="union member &apos;PROPERLY_ALIGNED_TYPE::a&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="50" column="9"/>
            <symbol>PROPERLY_ALIGNED_TYPE::a</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;PROPERLY_ALIGNED_TYPE::b&apos; is never used." verbose="union member &apos;PROPERLY_ALIGNED_TYPE::b&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="51" column="11"/>
            <symbol>PROPERLY_ALIGNED_TYPE::b</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;PROPERLY_ALIGNED_TYPE::d&apos; is never used." verbose="union member &apos;PROPERLY_ALIGNED_TYPE::d&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="53" column="10"/>
            <symbol>PROPERLY_ALIGNED_TYPE::d</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;PROPERLY_ALIGNED_TYPE::f&apos; is never used." verbose="union member &apos;PROPERLY_ALIGNED_TYPE::f&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="57" column="11"/>
            <symbol>PROPERLY_ALIGNED_TYPE::f</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;PROPERLY_ALIGNED_TYPE::g&apos; is never used." verbose="union member &apos;PROPERLY_ALIGNED_TYPE::g&apos; is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="58" column="12"/>
            <symbol>PROPERLY_ALIGNED_TYPE::g</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pgsize&apos; is assigned a value that is never used." verbose="Variable &apos;pgsize&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="206" column="12"/>
            <symbol>pgsize</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EAGAIN;HAVE_MLOCK&apos; since the value of &apos;EAGAIN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EAGAIN;HAVE_MLOCK&apos; since the value of &apos;EAGAIN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="180" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EAGAIN;HAVE_MLOCK;USE_CAPABILITIES&apos; since the value of &apos;EAGAIN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EAGAIN;HAVE_MLOCK;USE_CAPABILITIES&apos; since the value of &apos;EAGAIN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="143" column="0"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pgsize&apos; is assigned a value that is never used." verbose="Variable &apos;pgsize&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="204" column="12"/>
            <symbol>pgsize</symbol>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;SecTQCharRef::operator=&apos; should return &apos;SecTQCharRef &amp;&apos;." verbose="The SecTQCharRef::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;SecTQCharRef &amp;SecTQCharRef::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/main.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="211" column="5"/>
            <symbol>SecTQCharRef</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/main.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="116" column="5"/>
            <symbol>SecTQString</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/main.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="122" column="5"/>
            <symbol>SecTQString</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ForeignWidget&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ForeignWidget&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/main.cpp" line="85" column="3"/>
            <symbol>ForeignWidget</symbol>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;SecTQCharRef::operator=&apos; should return &apos;SecTQCharRef &amp;&apos;." verbose="The SecTQCharRef::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;SecTQCharRef &amp;SecTQCharRef::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/pinentrydialog.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="211" column="5"/>
            <symbol>SecTQCharRef</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/pinentrydialog.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="116" column="5"/>
            <symbol>SecTQString</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/pinentrydialog.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="122" column="5"/>
            <symbol>SecTQString</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQLineEdit&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQLineEdit&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/pinentrydialog.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.h" line="104" column="5"/>
            <symbol>SecTQLineEdit</symbol>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SecTQSharedDoubleBuffer::releasePixmap&apos; can be const." verbose="The member function &apos;SecTQSharedDoubleBuffer::releasePixmap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" cwe="398" inconclusive="true">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal_p.h" line="114" column="10"/>
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal.cpp" line="564" column="31"/>
            <symbol>SecTQSharedDoubleBuffer::releasePixmap</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQSharedDoubleBuffer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQSharedDoubleBuffer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal_p.h" line="78" column="5"/>
            <symbol>SecTQSharedDoubleBuffer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQSharedDoubleBuffer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQSharedDoubleBuffer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal_p.h" line="81" column="5"/>
            <symbol>SecTQSharedDoubleBuffer</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;hardLimitWidth&gt;0&apos; is always false" verbose="Condition &apos;hardLimitWidth&gt;0&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal.cpp" line="521" column="20" info="Condition &apos;hardLimitWidth&gt;0&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;hardLimitHeight&gt;0&apos; is always false" verbose="Condition &apos;hardLimitHeight&gt;0&apos; is always false" cwe="570">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal.cpp" line="522" column="21" info="Condition &apos;hardLimitHeight&gt;0&apos; is always false"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal.cpp" line="335" column="16"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Command::pos&apos; is not initialized in the constructor." verbose="Member variable &apos;Command::pos&apos; is not initialized in the constructor." cwe="398" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="141" column="9"/>
            <symbol>Command::pos</symbol>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;SecTQCharRef::operator=&apos; should return &apos;SecTQCharRef &amp;&apos;." verbose="The SecTQCharRef::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;SecTQCharRef &amp;SecTQCharRef::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="211" column="5"/>
            <symbol>SecTQCharRef</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="116" column="5"/>
            <symbol>SecTQString</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="122" column="5"/>
            <symbol>SecTQString</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQLineEdit&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQLineEdit&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.h" line="104" column="5"/>
            <symbol>SecTQLineEdit</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQSharedDoubleBuffer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQSharedDoubleBuffer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal_p.h" line="78" column="5"/>
            <symbol>SecTQSharedDoubleBuffer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQSharedDoubleBuffer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQSharedDoubleBuffer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal_p.h" line="81" column="5"/>
            <symbol>SecTQSharedDoubleBuffer</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;SecTQLineEditPrivate&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;SecTQLineEditPrivate&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="100" column="5"/>
            <symbol>SecTQLineEditPrivate</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;oldText&apos; is assigned a value that is never used." verbose="Variable &apos;oldText&apos; is assigned a value that is never used." cwe="563">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1867" column="25"/>
            <symbol>oldText</symbol>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;SecTQCharRef::operator=&apos; should return &apos;SecTQCharRef &amp;&apos;." verbose="The SecTQCharRef::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;SecTQCharRef &amp;SecTQCharRef::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="211" column="5"/>
            <symbol>SecTQCharRef</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="116" column="5"/>
            <symbol>SecTQString</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SecTQString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="122" column="5"/>
            <symbol>SecTQString</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;truncate&apos; argument 1 names different: declaration &apos;pos&apos; definition &apos;newLen&apos;." verbose="Function &apos;truncate&apos; argument 1 names different: declaration &apos;pos&apos; definition &apos;newLen&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" line="413" column="34"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="133" column="32"/>
            <symbol>truncate</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;setLength&apos; argument 1 names different: declaration &apos;newLength&apos; definition &apos;newLen&apos;." verbose="Function &apos;setLength&apos; argument 1 names different: declaration &apos;newLength&apos; definition &apos;newLen&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" line="426" column="35"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="167" column="26"/>
            <symbol>setLength</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;grow&apos; argument 1 names different: declaration &apos;newLength&apos; definition &apos;newLen&apos;." verbose="Function &apos;grow&apos; argument 1 names different: declaration &apos;newLength&apos; definition &apos;newLen&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" line="450" column="30"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="179" column="21"/>
            <symbol>grow</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;replace&apos; argument 4 names different: declaration &apos;clen&apos; definition &apos;slen&apos;." verbose="Function &apos;replace&apos; argument 4 names different: declaration &apos;clen&apos; definition &apos;slen&apos;." cwe="628" inconclusive="true">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" line="664" column="80"/>
            <location file0="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.h" line="144" column="72"/>
            <symbol>replace</symbol>
        </error>
        <error id="doubleFree" severity="error" msg="Resource handle &apos;ttyfi&apos; freed twice." verbose="Resource handle &apos;ttyfi&apos; freed twice." cwe="415">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tty/pinentry-tty.c" line="556" column="7"/>
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tty/pinentry-tty.c" line="537" column="15"/>
            <symbol>ttyfi</symbol>
        </error>
        <error id="constArgument" severity="style" msg="Argument &apos;(w_buffer_size+1)*sizeof(*w_buffer)&apos; to function secmem_malloc is always 1024" verbose="Argument &apos;(w_buffer_size+1)*sizeof(*w_buffer)&apos; to function secmem_malloc is always 1024" cwe="570">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/w32/main.c" line="551" column="49" info="Argument &apos;(w_buffer_size+1)*sizeof(*w_buffer)&apos; to function secmem_malloc is always 1024"/>
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/w32/main.c" line="547" column="26" info="Assignment &apos;w_buffer_size=255&apos;, assigned value is 255"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/w32/main.c" line="628" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/w32/main.c" line="630" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;allSelected&apos; is never used." verbose="The function &apos;allSelected&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="234" column="0"/>
            <symbol>allSelected</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;argparse_register_outfnc&apos; is never used." verbose="The function &apos;argparse_register_outfnc&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="286" column="0"/>
            <symbol>argparse_register_outfnc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cleanup&apos; is never used." verbose="The function &apos;cleanup&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqinternal.cpp" line="599" column="0"/>
            <symbol>cleanup</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;clearModified&apos; is never used." verbose="The function &apos;clearModified&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="803" column="0"/>
            <symbol>clearModified</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;clipboardChanged&apos; is never used." verbose="The function &apos;clipboardChanged&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1715" column="0"/>
            <symbol>clipboardChanged</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cursorBackward&apos; is never used." verbose="The function &apos;cursorBackward&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="675" column="0"/>
            <symbol>cursorBackward</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cursorPosition&apos; is never used." verbose="The function &apos;cursorPosition&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="591" column="0"/>
            <symbol>cursorPosition</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;drawContents&apos; is never used." verbose="The function &apos;drawContents&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1537" column="0"/>
            <symbol>drawContents</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;edited&apos; is never used." verbose="The function &apos;edited&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="815" column="0"/>
            <symbol>edited</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;focusInEvent&apos; is never used." verbose="The function &apos;focusInEvent&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1507" column="0"/>
            <symbol>focusInEvent</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;focusOutEvent&apos; is never used." verbose="The function &apos;focusOutEvent&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1523" column="0"/>
            <symbol>focusOutEvent</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;imComposeEvent&apos; is never used." verbose="The function &apos;imComposeEvent&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1475" column="0"/>
            <symbol>imComposeEvent</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;imEndEvent&apos; is never used." verbose="The function &apos;imEndEvent&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1492" column="0"/>
            <symbol>imEndEvent</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;imStartEvent&apos; is never used." verbose="The function &apos;imStartEvent&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1462" column="0"/>
            <symbol>imStartEvent</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isModified&apos; is never used." verbose="The function &apos;isModified&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="793" column="0"/>
            <symbol>isModified</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;isReadOnly&apos; is never used." verbose="The function &apos;isReadOnly&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1011" column="0"/>
            <symbol>isReadOnly</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;m_is_secure&apos; is never used." verbose="The function &apos;m_is_secure&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="420" column="0"/>
            <symbol>m_is_secure</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;minimumSizeHint&apos; is never used." verbose="The function &apos;minimumSizeHint&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="573" column="0"/>
            <symbol>minimumSizeHint</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mouseDoubleClickEvent&apos; is never used." verbose="The function &apos;mouseDoubleClickEvent&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1208" column="0"/>
            <symbol>mouseDoubleClickEvent</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mouseMoveEvent&apos; is never used." verbose="The function &apos;mouseMoveEvent&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1175" column="0"/>
            <symbol>mouseMoveEvent</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mousePressEvent&apos; is never used." verbose="The function &apos;mousePressEvent&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1159" column="0"/>
            <symbol>mousePressEvent</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mouseReleaseEvent&apos; is never used." verbose="The function &apos;mouseReleaseEvent&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1192" column="0"/>
            <symbol>mouseReleaseEvent</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;optfile_parse&apos; is never used." verbose="The function &apos;optfile_parse&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="557" column="0"/>
            <symbol>optfile_parse</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;secmem_dump_stats&apos; is never used." verbose="The function &apos;secmem_dump_stats&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="448" column="0"/>
            <symbol>secmem_dump_stats</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;secmem_get_flags&apos; is never used." verbose="The function &apos;secmem_get_flags&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="274" column="0"/>
            <symbol>secmem_get_flags</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;secmem_get_max_size&apos; is never used." verbose="The function &apos;secmem_get_max_size&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/secmem.c" line="460" column="0"/>
            <symbol>secmem_get_max_size</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;selectionStart&apos; is never used." verbose="The function &apos;selectionStart&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="870" column="0"/>
            <symbol>selectionStart</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setCursorPosition&apos; is never used." verbose="The function &apos;setCursorPosition&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="597" column="0"/>
            <symbol>setCursorPosition</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setEdited&apos; is never used." verbose="The function &apos;setEdited&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="816" column="0"/>
            <symbol>setEdited</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setReadOnly&apos; is never used." verbose="The function &apos;setReadOnly&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="1016" column="0"/>
            <symbol>setReadOnly</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setSelection&apos; is never used." verbose="The function &apos;setSelection&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="882" column="0"/>
            <symbol>setSelection</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sizeHint&apos; is never used." verbose="The function &apos;sizeHint&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqlineedit.cpp" line="554" column="0"/>
            <symbol>sizeHint</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;truncate&apos; is never used." verbose="The function &apos;truncate&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/tqt/secqstring.cpp" line="413" column="0"/>
            <symbol>truncate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;usage&apos; is never used." verbose="The function &apos;usage&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/pinentry/argparse.c" line="1424" column="0"/>
            <symbol>usage</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;xwrite&apos; is never used." verbose="The function &apos;xwrite&apos; is never used." cwe="561">
            <location file="/home/capstone/Desktop/root/pinentry-1.1.0/secmem/util.c" line="45" column="0"/>
            <symbol>xwrite</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
