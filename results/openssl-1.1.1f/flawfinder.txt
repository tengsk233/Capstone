/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:67:9:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
ssize_t readlink(const char *pathname, char *buf, size_t bufsiz)
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:221:9:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
    n = readlink(fullpath, linktarget, sizeof(linktarget));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:33:11:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#  define chmod   _chmod
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:242:5:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
    chmod(file, 0600);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/bio.h:784:29:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
                      int (*gets) (BIO *, char *, int));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:2351:12:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
    return access(name, flag);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/engine.c:83:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(p, s);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ocsp.c:846:13:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
        if (vsnprintf(buf, sizeof(buf), fmt, ap) > 0) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:110:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(p, t);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:114:5:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
    strcat(p, OPENSSL_CONF);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:230:33:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
                    p += strlen(strcpy(p, text));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:237:29:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
                p += strlen(strcpy(p, text));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:882:25:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
            p += strlen(strcpy(p, o->name));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:887:25:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
            p += strlen(strcpy(p, valtype2param(o)));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3232:13:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
            printf(mr ? ":%d" : "%7d bytes", lengths[testnum]);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3247:17:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
                printf(mr ? ":%.2f" : " %11.2f ", results[k][testnum]);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/vms_term_sock.c:570:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf (MsgBuff, "%02d-%s-%04d %02d:%02d:%02d [%08X] %s\n",
/home/capstone/Desktop/root/openssl-1.1.1f/apps/vms_term_sock.c:580:5:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    vfprintf (stderr, MsgBuff, args);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/win32_init.c:164:5:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
    wcscpy(p, wcmdline);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_vms.c:126:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy((*ctx)->filespec, directory);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_vms.c:134:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(ctx_filespec_32p, (*ctx)->filespec);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_win.c:147:21:  [4] (buffer) _tcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
                    _tcscpy(wdir + sz, TEXT("/*"));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_win.c:149:21:  [4] (buffer) _tcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
                    _tcscpy(wdir + sz, TEXT("*"));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_win.c:157:17:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
                strcpy(buf, directory);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_sock.c:264:13:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
            strcpy(*ip_port, host);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_sock.c:266:13:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
            strcat(*ip_port, port);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bio_local.h:160:26:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define UP_fprintf      fprintf
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cryptlib.c:175:12:  [4] (format) _vsntprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   define _vsntprintf _vsnwprintf
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cryptlib.c:177:12:  [4] (format) _vsntprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   define _vsntprintf _vsnprintf
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cryptlib.c:345:5:  [4] (format) _vsntprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
    _vsntprintf(buf, OSSL_NELEM(buf) - 1, fmt, ap);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cryptlib.c:405:5:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    vfprintf(stderr, fmta, ap);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:197:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(merged, filespec2);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:199:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(&merged[spec2len + 1], filespec1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:232:13:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
            sprintf(translated, "lib%s%s", filename, DSO_EXTENSION);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:234:13:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
            sprintf(translated, "%s%s", filename, DSO_EXTENSION);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:236:9:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
        sprintf(translated, "%s", filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:246:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(merged, filespec2);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:248:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(&merged[spec2len + 1], filespec1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:274:13:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
            sprintf(translated, "lib%s" DSO_EXTENSION, filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:276:13:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
            sprintf(translated, "%s" DSO_EXTENSION, filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:278:9:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
        sprintf(translated, "%s", filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:188:9:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
        strcat(p->imagename, ext);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:192:5:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
    strcat(p->imagename, sp2);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:296:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(symname_32p, symname);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:400:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(filespec1_32p, filespec1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:401:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(filespec2_32p, filespec2);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:462:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(not_translated, filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:473:9:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
        sprintf(translated, "%s.dll", filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:475:9:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
        sprintf(translated, "%s", filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_ctrl.c:110:23:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        return strlen(strcpy(s, cdp->cmd_name));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_ctrl.c:115:23:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        return strlen(strcpy(s, cdp->cmd_desc == NULL ? int_no_description
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/c_allc.c:21:20:  [4] (crypto) EVP_des_cfb:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
    EVP_add_cipher(EVP_des_cfb());
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/c_allc.c:29:20:  [4] (crypto) EVP_des_ofb:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
    EVP_add_cipher(EVP_des_ofb());
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/c_allc.c:33:20:  [4] (crypto) EVP_desx_cbc:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
    EVP_add_cipher(EVP_desx_cbc());
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/c_allc.c:37:20:  [4] (crypto) EVP_des_cbc:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
    EVP_add_cipher(EVP_des_cbc());
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/c_allc.c:45:20:  [4] (crypto) EVP_des_ecb:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
    EVP_add_cipher(EVP_des_ecb());
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/c_allc.c:58:20:  [4] (crypto) EVP_rc4_40:These keysizes are too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
    EVP_add_cipher(EVP_rc4_40());
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/c_allc.c:97:20:  [4] (crypto) EVP_rc2_40_cbc:These keysizes are too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
    EVP_add_cipher(EVP_rc2_40_cbc());
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/c_allc.c:98:20:  [4] (crypto) EVP_rc2_64_cbc:These keysizes are too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
    EVP_add_cipher(EVP_rc2_64_cbc());
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_old.c:34:10:  [4] (crypto) EVP_des_cfb:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
#  undef EVP_des_cfb
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_old.c:35:19:  [4] (crypto) EVP_des_cfb:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_des_cfb(void);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_old.c:36:19:  [4] (crypto) EVP_des_cfb:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_des_cfb(void)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_rc2.c:73:19:  [4] (crypto) EVP_rc2_64_cbc:These keysizes are too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_rc2_64_cbc(void)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_rc2.c:78:19:  [4] (crypto) EVP_rc2_40_cbc:These keysizes are too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_rc2_40_cbc(void)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_rc4.c:64:19:  [4] (crypto) EVP_rc4_40:These keysizes are too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_rc4_40(void)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_xcbc_d.c:47:19:  [4] (crypto) EVP_desx_cbc:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_desx_cbc(void)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_str.c:35:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(ret, str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_egd.c:75:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(addr.sun_path, path);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:302:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(buf, s);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:306:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(buf, s);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:310:9:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
        strcat(buf, RFILE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/s390xcap.c:24:6:  [4] (buffer) sscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. If the scanf format is influenceable by an attacker, it's exploitable.
    (sscanf(tok_begin,							\
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/s390xcap.c:43:6:  [4] (buffer) sscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. If the scanf format is influenceable by an attacker, it's exploitable.
    (sscanf(tok_begin,							\
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/s390xcap.c:646:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(buff, env);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/keccak1600.c:1235:9:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
        printf(++i % 16 && i != sizeof(out) ? " " : "\n");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_verify.c:504:17:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
                strcat(failure_text, ts_failure_info[i].text);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_alt.c:132:17:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
                strcat(oline, htmp);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.h:19:27:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  define ALG_DGB(x, ...) fprintf(stderr, "ALG_DBG: " x, __VA_ARGS__)
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.h:20:28:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  define ALG_INFO(x, ...) fprintf(stderr, "ALG_INFO: " x, __VA_ARGS__)
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.h:21:28:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  define ALG_WARN(x, ...) fprintf(stderr, "ALG_WARN: " x, __VA_ARGS__)
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.h:28:26:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define ALG_ERR(x, ...) fprintf(stderr, "ALG_ERR: " x, __VA_ARGS__)
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.h:31:21:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
                    fprintf(stderr, "ALG_PERR: " x, __VA_ARGS__); \
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.h:36:21:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
                    fprintf(stderr, "ALG_PERR: " x, __VA_ARGS__); \
/home/capstone/Desktop/root/openssl-1.1.1f/fuzz/test-corpus.c:82:17:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
                strcpy(pathname, argv[n]);
/home/capstone/Desktop/root/openssl-1.1.1f/fuzz/test-corpus.c:89:13:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
            strcpy(pathname + dirname_len, filename);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/evp.h:736:19:  [4] (crypto) EVP_des_ecb:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_des_ecb(void);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/evp.h:742:11:  [4] (crypto) EVP_des_cfb:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
#  define EVP_des_cfb EVP_des_cfb64
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/evp.h:751:19:  [4] (crypto) EVP_des_ofb:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_des_ofb(void);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/evp.h:754:19:  [4] (crypto) EVP_des_cbc:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_des_cbc(void);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/evp.h:757:19:  [4] (crypto) EVP_desx_cbc:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_desx_cbc(void);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/evp.h:767:19:  [4] (crypto) EVP_rc4_40:These keysizes are too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_rc4_40(void);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/evp.h:782:19:  [4] (crypto) EVP_rc2_40_cbc:These keysizes are too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_rc2_40_cbc(void);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/evp.h:783:19:  [4] (crypto) EVP_rc2_64_cbc:These keysizes are too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
const EVP_CIPHER *EVP_rc2_64_cbc(void);
/home/capstone/Desktop/root/openssl-1.1.1f/ms/applink.c:107:49:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
        OPENSSL_ApplinkTable[APPLINK_FPRINTF] = fprintf;
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_init.c:31:20:  [4] (crypto) EVP_des_cbc:DES only supports a 56-bit keysize, which is too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
    EVP_add_cipher(EVP_des_cbc());
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_init.c:49:20:  [4] (crypto) EVP_rc2_40_cbc:These keysizes are too small given today's computers (CWE-327).  Use a different patent-free encryption algorithm with a larger keysize, such as 3DES or AES. 
    EVP_add_cipher(EVP_rc2_40_cbc());
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:2617:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(p, c->name);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:5240:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(cursor, prefix);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_mcnf.c:23:70:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
static int ssl_do_config(SSL *s, SSL_CTX *ctx, const char *name, int system)
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_mcnf.c:37:25:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
    if (name == NULL && system)
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_mcnf.c:40:14:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
        if (!system) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_mcnf.c:51:10:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
    if (!system)
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:192:13:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
            strcpy((char *)tls13tbs + TLS13_TBS_START_SIZE, servercontext);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:194:13:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
            strcpy((char *)tls13tbs + TLS13_TBS_START_SIZE, clientcontext);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bioprinttest.c:286:12:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return vfprintf(stdout, fmt, ap);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bioprinttest.c:291:12:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return vfprintf(stderr, fmt, ap);
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:123:5:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
    strcat(client_log_buffer, line);
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:139:5:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
    strcat(server_log_buffer, line);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:2413:25:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
                        printf((io1 == client_io) ?
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:2463:25:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
                        printf((io2 == client_io) ?
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil.h:166:56:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  define PRINTF_FORMAT(a, b)   __attribute__ ((format(printf, a, b)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/driver.c:295:21:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        p += strlen(strcpy(p, list[i]));
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/format_output.c:254:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(p - strlen(q), q);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:388:15:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
        tmp = getenv(arg + 4);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:2507:37:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if (istext(format) && (prefix = getenv("HARNESS_OSSL_PREFIX")) != NULL) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:104:14:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ((t = getenv("OPENSSL_CONF")) != NULL)
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:148:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    p = getenv("OPENSSL_DEBUG_MEMORY");
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:153:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if (getenv("OPENSSL_FIPS")) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:515:23:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    } else if ((env = getenv(X509_get_default_cert_dir_env())) != NULL) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_time.c:189:18:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
        cipher = getenv("SSL_CIPHER");
/home/capstone/Desktop/root/openssl-1.1.1f/apps/vms_decc_init.c:116:31:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    openssl_debug_decc_init = getenv("OPENSSL_DEBUG_DECC_INIT");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/armcap.c:112:14:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ((e = getenv("OPENSSL_armcap"))) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cryptlib.c:49:24:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#   define ossl_getenv getenv
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:523:11:  [3] (misc) LoadLibrary:Ensure that the full path to the library is specified, or current directory may be used (CWE-829, CWE-20).  Use registry entry or GetWindowsDirectory to find library path, if you aren't already. 
    dll = LoadLibrary(TEXT(DLLNAME));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:622:11:  [3] (misc) LoadLibrary:Ensure that the full path to the library is specified, or current directory may be used (CWE-829, CWE-20).  Use registry entry or GetWindowsDirectory to find library path, if you aren't already. 
    dll = LoadLibrary(TEXT(DLLNAME));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/getenv.c:29:12:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    return getenv(name);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem.c:140:11:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
#  define random() rand()
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem.c:147:22:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
    int roll = (int)(random() % 100);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem.c:183:22:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    const char *cp = getenv("OPENSSL_MALLOC_FAILURES");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem.c:187:15:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ((cp = getenv("OPENSSL_MALLOC_FD")) != NULL)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:243:14:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ((e = getenv("OPENSSL_ppccap"))) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_unix.c:177:26:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
            ts.tv_nsec = random();
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/s390xcap.c:77:11:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    env = getenv("OPENSSL_s390xcap");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sparcv9cap.c:160:14:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ((e = getenv("OPENSSL_sparcv9cap"))) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/threads_win.c:34:5:  [3] (misc) InitializeCriticalSection:Exceptions can be thrown in low-memory situations.  Use InitializeCriticalSectionAndSpinCount instead. 
    InitializeCriticalSection(lock);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/threads_win.c:42:5:  [3] (misc) EnterCriticalSection:On some versions of Windows, exceptions can be thrown in low-memory situations.  Use InitializeCriticalSectionAndSpinCount instead. 
    EnterCriticalSection(lock);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/threads_win.c:48:5:  [3] (misc) EnterCriticalSection:On some versions of Windows, exceptions can be thrown in low-memory situations.  Use InitializeCriticalSectionAndSpinCount instead. 
    EnterCriticalSection(lock);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:465:27:  [3] (misc) LoadLibrary:Ensure that the full path to the library is specified, or current directory may be used (CWE-829, CWE-20).  Use registry entry or GetWindowsDirectory to find library path, if you aren't already. 
        HMODULE cryptui = LoadLibrary(TEXT("CRYPTUI.DLL"));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:5091:32:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
        *out = s->clienthello->random;
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:676:19:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
    unsigned char random[SSL3_RANDOM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:1508:29:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
        memset(clienthello->random, 0, SSL3_RANDOM_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:1522:50:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
        if (!PACKET_copy_bytes(pkt, clienthello->random, SSL3_RANDOM_SIZE)
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:1647:47:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
    memcpy(s->s3->client_random, clienthello->random, SSL3_RANDOM_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ct_test.c:516:19:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ((ct_dir = getenv("CT_DIR")) == NULL)
/home/capstone/Desktop/root/openssl-1.1.1f/test/ct_test.c:518:22:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ((certs_dir = getenv("CERTS_DIR")) == NULL)
/home/capstone/Desktop/root/openssl-1.1.1f/test/memleaktest.c:33:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    p = getenv("OPENSSL_DEBUG_MEMORY");
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:6481:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if (getenv("OPENSSL_TEST_GETCOUNTS") != NULL) {
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:926:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    p = getenv("OPENSSL_DEBUG_MEMORY");
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/driver.c:85:27:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    char *mem_debug_env = getenv("OPENSSL_DEBUG_MEMORY");
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/driver.c:104:24:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    char *TAP_levels = getenv("HARNESS_OSSL_LEVEL");
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/driver.c:105:23:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    char *test_seed = getenv("OPENSSL_TEST_RAND_ORDER");
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:381:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *tmp, tpass[APP_PASS_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:413:17:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            i = atoi(arg + 3);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:556:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tpass[PEM_BUFSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1377:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1421:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1][BSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1471:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[2][BSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1541:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[BSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1628:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[3][BSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1675:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[5][BSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1871:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tbuf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:2142:14:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
        if (!MultiByteToWideChar(CP_ACP, 0, from, flen, (WCHAR *)tfrom, flen))
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:2147:14:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
        if (!MultiByteToWideChar(CP_ACP, 0, to, tlen, (WCHAR *)tto, tlen))
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:2368:10:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
    if (!MultiByteToWideChar(CP_ACP, 0, name, len_0, tempname, MAX_PATH))
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:2617:14:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        fd = open(filename, mode, 0600, "ctx=bin");
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:2620:14:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        fd = open(filename, mode, 0600);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:249:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char new_cert[PATH_MAX];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:250:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmp[10 + 1] = "\0";
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:317:20:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            days = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:376:23:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            crldays = atol(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:379:24:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            crlhours = atol(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:382:22:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            crlsec = atol(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:644:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        if (!check_time_format((char *)pp[DB_exp_date])) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:1407:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[25];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:1861:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(row[DB_exp_date], tm->data, tm->length);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:2055:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *row[DB_NUMBER], **rrow, **irow;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:2094:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(row[DB_exp_date], tm->data, tm->length);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:2159:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *row[DB_NUMBER], **rrow;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:2177:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(row[DB_serial] + 1, serial, serial_len);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:2181:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(row[DB_serial], serial, serial_len);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:2242:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(a_tm_s, a_tm->data, a_tm->length);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:2458:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[25], *pbuf;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ciphers.c:98:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[512];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/crl.c:297:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/enc.c:94:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char buf[128];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/enc.c:105:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mbuf[sizeof(magic) - 1];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/enc.c:111:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[EVP_MAX_KEY_LENGTH], iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/enc.c:342:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                char prompt[200];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/enc.c:468:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                unsigned char tmpkeyiv[EVP_MAX_KEY_LENGTH + EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/enc.c:479:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(key, tmpkeyiv, iklen);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/enc.c:480:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(iv, tmpkeyiv+iklen, ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/engine.c:244:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/engine.c:257:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(buf, cmd, (int)(arg - cmd));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/engine.c:284:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/errstr.c:33:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[256], *prog;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ocsp.c:293:27:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            req_timeout = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ocsp.c:470:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            ndays = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ocsp.c:515:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            multi = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ocsp.c:845:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ocsp.c:1273:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *itmp, *row[DB_NUMBER], **rrow;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ocsp.c:1370:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char inbuf[2048], reqbuf[2048];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:125:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:483:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char *new_argv[3];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:35:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char prog[40];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:508:13:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        i = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:513:13:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        i = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:835:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char start[80 + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:25:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned const char cov_2char[64] = {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:236:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            static char *passwds_static[2] = { NULL, NULL };
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:276:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                    char trash[BUFSIZ];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:314:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char out_buf[6 + 9 + 24 + 2];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:315:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[MD5_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:316:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char ascii_magic[5];         /* "apr1" plus '\0' */
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:317:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char ascii_salt[9];          /* Max 8 chars plus '\0' */
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:441:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char buf_perm[sizeof(buf)];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:507:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char out_buf[3 + 17 + 17 + 86 + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:508:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[SHA512_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:509:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char temp_buf[SHA512_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:511:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char ascii_magic[2];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:512:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char ascii_salt[17];          /* Max 16 chars plus '\0' */
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:588:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char tmp_buf[80]; /* "rounds=999999999" */
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:589:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(tmp_buf, "rounds=%u", rounds);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:652:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(cp, temp_buf, buf_size);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:653:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cp, temp_buf, n);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:669:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(cp, temp_buf, buf_size);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:670:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cp, temp_buf, n);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/pkcs12.c:126:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pass[PASSWD_BUF_SIZE] = "", macpass[PASSWD_BUF_SIZE] = "";
/home/capstone/Desktop/root/openssl-1.1.1f/apps/pkcs8.c:72:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pass[APP_PASS_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/pkeyutl.c:182:22:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            kdflen = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/prime.c:61:20:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            bits = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/prime.c:67:22:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            checks = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rand.c:101:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char buf[4096];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:79:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char digest[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:184:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ep->digest, digest, evpmdsize);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:198:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char linktarget[PATH_MAX], *endptr;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:239:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char digest[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:334:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char idmask[MAX_COLLISIONS / 8];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:516:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char lsc[2] = { LIST_SEPARATOR_CHAR, '\0' };
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:372:20:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            days = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1076:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[100];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1311:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1331:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1448:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf, name, name_len);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1449:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf + name_len, tail, tail_len + 1);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1468:18:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        keylen = atol(gstr);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1500:26:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                keylen = atol(p + 1);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_cb.c:30:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cookie_secret[COOKIE_SECRET_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_cb.c:635:55:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            BIO_printf(bio, " %02x", ((const unsigned char *)buf)[i]);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_cb.c:787:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buffer, &port, sizeof(port));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_cb.c:803:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char result[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:164:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(psk, key, key_len);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:411:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pem_name[100];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:412:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ext_buf[4 + 65536];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:420:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ext_buf + 4, in, inlen);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:1098:33:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            verify_args.depth = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:1263:32:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            srp_arg.strength = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:1345:26:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            socket_mtu = atol(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:1436:58:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                    serverinfo_types[serverinfo_count] = atoi(p + start);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:1462:31:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            keymatexportlen = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:1468:19:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            len = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:1490:33:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            max_send_fragment = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:1493:35:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            split_send_fragment = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:1496:29:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            max_pipelines = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:1499:28:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            read_buf_len = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:168:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(psk, key, key_len);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:303:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buff[1];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1163:23:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            naccept = atol(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1167:33:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            verify_args.depth = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1175:33:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            verify_args.depth = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1341:33:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            tlscstatp.timeout = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1506:26:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            socket_mtu = atol(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1556:31:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            keymatexportlen = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1562:33:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            max_send_fragment = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1565:35:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            split_send_fragment = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1568:29:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            max_pipelines = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1571:28:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            read_buf_len = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1577:30:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            max_early_data = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1584:35:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            recv_max_early_data = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:2849:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[BUFSIZ];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:3508:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(id, session_id_prefix,
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_socket.c:324:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char sink[64];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_time.c:92:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1024 * 8];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:644:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md2[MD2_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:661:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char mdc2[MDC2_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:678:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md4[MD4_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:695:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md5[MD5_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:707:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hmac[MD5_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:723:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sha[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:734:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sha256[SHA256_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:745:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sha512[SHA512_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:757:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char whirlpool[WHIRLPOOL_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:770:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char rmd160[RIPEMD160_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:795:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char DES_iv[8];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:824:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char iv[2 * MAX_BLOCK_SIZE / 8];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:963:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tag[12];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1001:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char aad[13] = { 0xcc };
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1002:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char faketag[16] = { 0xcc };
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1031:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1433:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const unsigned char key16[16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1437:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const unsigned char key24[24] = {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1442:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const unsigned char key32[32] = {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1449:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const unsigned char ckey24[24] = {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1454:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const unsigned char ckey32[32] = {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1477:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const unsigned char *rsa_data[RSA_NUM] = {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1592:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            multi = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1597:26:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            async_jobs = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1641:58:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                        = seconds.ecdh = seconds.eddsa = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:1644:30:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            lengths_single = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3439:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char isdelim[256];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3502:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3522:23:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                alg = atoi(sstrsep(&p, sep));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3531:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                k = atoi(sstrsep(&p, sep));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3546:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                k = atoi(sstrsep(&p, sep));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3562:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                k = atoi(sstrsep(&p, sep));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3575:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                k = atoi(sstrsep(&p, sep));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3585:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                k = atoi(sstrsep(&p, sep));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3619:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char *inp, *out, *key, no_key[32], no_iv[16];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:3646:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char aad[EVP_AEAD_TLS1_AAD_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/srp.c:126:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char password[1025];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/srp.c:163:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char password[1025];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/srp.c:428:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                char *row[DB_NUMBER];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ts.c:493:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char buffer[4096];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ts.c:528:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ts.c:546:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(nonce->data, buf + i, nonce->length);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ts.c:769:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/vms_term_sock.c:100:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char TerminalDeviceBuff[255 + 2];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/vms_term_sock.c:129:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char TermBuff[80];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/vms_term_sock.c:293:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char AscTimeBuff[32];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/vms_term_sock.c:356:5:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
    sprintf (AscTimeBuff, "0 0:0:%02d.00", SOCKET_PAIR_TIMEOUT_VALUE);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/vms_term_sock.c:553:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char MsgBuff[256];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/x509.c:247:20:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            days = atoi(opt_arg());
/home/capstone/Desktop/root/openssl-1.1.1f/apps/x509.c:774:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/x509.c:923:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(buf, CAfile, len);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/x509.c:924:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(buf + len, POSTFIX, sizeof(POSTFIX));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_unix.c:78:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char entry_name[LP_ENTRY_SIZE + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_unix.c:81:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char previous_entry_name[LP_ENTRY_SIZE + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_vms.c:63:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char filespec[NAMX_MAXRSS + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_vms.c:64:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char result[NAMX_MAXRSS + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_vms.c:82:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char ctx_filespec_32[NAMX_MAXRSS + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_vms.c:127:9:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
        strcat((*ctx)->filespec, "*.*;");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_win.c:71:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char entry_name[NAME_MAX + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_win.c:107:27:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
                if ((sz = MultiByteToWideChar((cp = CP_UTF8), 0,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_win.c:113:22:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
                sz = MultiByteToWideChar((cp = CP_ACP), 0,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_win.c:124:22:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
                if (!MultiByteToWideChar(cp, 0, directory, len_0,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_win.c:159:21:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
                    strcpy(buf + dirlen, "/*");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:31:34:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
# define load_block(d, s)        memcpy((d).data, (s), AES_BLOCK_SIZE)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:32:34:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
# define store_block(d, s)       memcpy((d), (s).data, AES_BLOCK_SIZE)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:77:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ivec, ivp->data, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:78:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ivec + AES_BLOCK_SIZE, iv2p->data, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:102:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ivec, iv.data, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:103:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ivec + AES_BLOCK_SIZE, iv2.data, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:130:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ivec, ivp->data, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:131:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ivec + AES_BLOCK_SIZE, iv2p->data, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:156:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ivec, iv.data, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:157:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ivec + AES_BLOCK_SIZE, iv2.data, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:176:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp[AES_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:177:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp2[AES_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:178:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp3[AES_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:179:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char prev[AES_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:203:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(prev, in, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:219:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(tmp, out, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:238:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(prev, tmp, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:251:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(tmp, in, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:252:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(tmp2, in, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:258:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(tmp3, tmp2, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:269:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(tmp, out, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:270:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(tmp2, out, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aes/aes_ige.c:276:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(tmp3, tmp2, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aria/aria.c:693:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(rk_head, rk_tail, ARIA_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aria/aria.c:756:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char sb1[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aria/aria.c:791:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char sb2[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aria/aria.c:826:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char sb3[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aria/aria.c:861:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char sb4[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aria/aria.c:1130:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(w0.c, userKey, sizeof(w0));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aria/aria.c:1147:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(kr.c, userKey + ARIA_BLOCK_SIZE, sizeof(kr) / 2);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/aria/aria.c:1156:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(kr.c, userKey + ARIA_BLOCK_SIZE, sizeof(kr));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_bitstr.c:71:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, d, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_bitstr.c:122:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s, p, (int)len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_int.c:231:40:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static size_t asn1_put_uint64(unsigned char b[sizeof(uint64_t)], uint64_t r)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_int.c:334:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tbuf[sizeof(r)];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_int.c:373:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tbuf[sizeof(r)];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_int.c:431:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s, p, (int)len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_int.c:608:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[sizeof(uint64_t)];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_int.c:624:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[sizeof(uint64_t)];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_mbstr.c:52:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char strbuf[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_object.c:43:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(p, a->data, a->length);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_object.c:56:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char ftmp[24], *tmp = ftmp;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_object.c:187:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[80], *p = buf;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_object.c:315:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(data, p, length);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_print.c:71:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_strex.c:71:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmphex[HEX_SIZE(long) + 3];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_strex.c:205:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char utfbuf[6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_strex.c:239:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char hextmp[2];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_strex.c:430:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char objtmp[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_time.c:423:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(t.data, str + 2, t.length);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_time.c:464:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const char _asn1_mon[12][4] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn1_gen.c:225:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(p, cpy_start, cpy_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn1_gen.c:350:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char erch[2];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn1_lib.c:293:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(str->data, data, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn1_par.c:28:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char str[128];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn_mime.c:234:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char bound[33], c;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn_mime.c:491:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char linebuf[MAX_SMLEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn_mime.c:535:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char iobuf[4096];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn_mime.c:571:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char linebuf[MAX_SMLEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn_mime.c:636:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char linebuf[MAX_SMLEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn_moid.c:90:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(lntmp, ln, p - ln);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/evp_asn1.c:45:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(data, p, num);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/evp_asn1.c:108:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(data, ASN1_STRING_get0_data(atmp->oct), n);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/f_int.c:20:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[2];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/f_string.c:20:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[2];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/p5_pbe.c:54:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(sstr, salt, saltlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/p5_pbev2.c:47:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/p5_pbev2.c:69:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(iv, aiv, EVP_CIPHER_iv_length(cipher));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/p5_pbev2.c:172:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(osalt->data, salt, saltlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/p5_scrypt.c:48:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/p5_scrypt.c:84:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(iv, aiv, EVP_CIPHER_iv_length(cipher));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/p5_scrypt.c:216:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char *salt, key[EVP_MAX_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/tasn_dec.c:1050:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(buf->data + len, *p, plen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/tasn_enc.c:417:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, tder->data, tder->length);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/tasn_enc.c:607:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(cout, cont, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/tasn_prn.c:408:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char objbuf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/tasn_utl.c:151:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(enc->enc, in, inlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/tasn_utl.c:166:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(*out, enc->enc, enc->len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/x_int64.c:110:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cp, &utmp, sizeof(utmp));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/x_int64.c:219:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cp, &utmp2, sizeof(utmp2));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/x_long.c:55:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(pval, &it->size, COPY_SIZE(*pval, it->size));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/x_long.c:61:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(pval, &it->size, COPY_SIZE(*pval, it->size));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/x_long.c:96:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&ltmp, pval, COPY_SIZE(*pval, ltmp));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/x_long.c:189:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(pval, &ltmp, COPY_SIZE(*pval, ltmp));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/x_long.c:198:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&l, pval, COPY_SIZE(*pval, l));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/async/async.c:234:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ctx->currjob->funcargs, args, size);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bf/bf_ofb64.c:25:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char d[8];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bf/bf_skey.c:22:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(key, &bf_init, sizeof(BF_KEY));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:69:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(ap->s_in), sa, sizeof(struct sockaddr_in));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:74:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(ap->s_in6), sa, sizeof(struct sockaddr_in6));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:80:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(ap->s_un), sa, sizeof(struct sockaddr_un));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:157:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, addrptr, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:198:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char host[NI_MAXHOST] = "", serv[NI_MAXSERV] = "";
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:241:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char serv[6];        /* port is 16 bits => max 5 decimal digits */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_dump.c:32:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[288 + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_dump.c:52:21:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
                    strcpy(buf + n, "   ");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_dump.c:62:13:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
            strcpy(buf + n, "  ");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_print.c:424:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char convert[DECIMAL_SIZE(value) + 3];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_print.c:552:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char iconvert[20];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_print.c:553:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char fconvert[20];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_print.c:554:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char econvert[20];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_print.c:829:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(*buffer, *sbuffer, *currlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_print.c:870:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char hugebuf[1024 * 2];     /* Was previously 10k, which is unreasonable
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_buff.c:109:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, &(ctx->ibuf[ctx->ibuf_off]), i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_buff.c:176:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(ctx->obuf[ctx->obuf_off + ctx->obuf_len]), in, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_buff.c:184:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&(ctx->obuf[ctx->obuf_off + ctx->obuf_len]), in, i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_buff.c:300:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->ibuf, ptr, (int)num);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_buff.c:391:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char fake_buf[1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_buff.c:396:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, &(ctx->ibuf[ctx->ibuf_off]), num);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_lbuf.c:145:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(&(ctx->obuf[ctx->obuf_len]), in, p - in);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_lbuf.c:151:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(&(ctx->obuf[ctx->obuf_len]), in, i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_lbuf.c:198:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(ctx->obuf[ctx->obuf_len]), in, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_lbuf.c:246:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(p, ctx->obuf, ctx->obuf_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bio_cb.c:21:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bio_local.h:168:26:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
# define UP_fopen        fopen
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bio_local.h:182:27:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#  define UP_open         open
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_bio.c:170:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(buf, peer_b->buf + peer_b->offset, chunk);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_bio.c:326:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(b->buf + write_offset, buf, chunk);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:232:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&timeleft, &(data->next_timeout), sizeof(struct timeval));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:578:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, &data->peer, (ret = num));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:584:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(data->next_timeout), ptr, sizeof(struct timeval));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:1014:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char cmsgbuf[512];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:1243:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char cmsgbuf[CMSG_SPACE(sizeof(struct sctp_sndinfo)) +
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:1248:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char cmsgbuf[CMSG_SPACE(sizeof(struct sctp_sndrcvinfo))];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:1422:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&authkey->sca_key[0], ptr, 64 * sizeof(uint8_t));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:1517:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, &(data->sndinfo), num);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:1525:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(data->sndinfo), ptr, num);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:1532:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, &data->rcvinfo, num);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:1541:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(data->rcvinfo), ptr, num);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:1548:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, &(data->prinfo), num);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:1556:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(data->prinfo), ptr, num);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_file.c:183:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char p[4];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_log.c:133:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char str[10];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_log.c:203:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf, in, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_log.c:254:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pidbuf[DECIMAL_SIZE(DWORD) + 4];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_log.c:283:5:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
    sprintf(pidbuf, "[%lu] ", GetCurrentProcessId());
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_log.c:327:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[10240];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_log.c:370:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(opcdef_p->opc$z_ms_target_classes, &VMS_OPC_target, 3);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_log.c:372:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&opcdef_p->opc$l_ms_text, buf, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_mem.c:205:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, bm->data, ret);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_mem.c:238:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(bbm->buf->data + blen, in, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/blake2/blake2_impl.h:71:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(dst, &w, sizeof(w));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/blake2/blake2_impl.h:89:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(dst, &w, sizeof(w));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/blake2/blake2b.c:221:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(c->buf + c->buflen, in, fill); /* Fill buffer */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/blake2/blake2b.c:243:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(c->buf + c->buflen, in, datalen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/blake2/blake2s.c:215:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(c->buf + c->buflen, in, fill); /* Fill buffer */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/blake2/blake2s.c:237:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(c->buf + c->buflen, in, datalen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/bn_ctx.c:269:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(newitems, st->indexes, sizeof(*newitems) * st->depth);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/bn_intern.c:166:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, in->d, sizeof(*out) * in->top);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/bn_intern.c:195:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(a->d, words, sizeof(BN_ULONG) * num_words);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/bn_lib.c:276:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(a, b->d, sizeof(*a) * b->top);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/bn_lib.c:333:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(a->d, b->d, sizeof(b->d[0]) * b->top);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/bn_print.c:332:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char data[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/bn_rand.c:214:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char random_bytes[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/bn_rand.c:215:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char digest[SHA512_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/bn_rand.c:219:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char private_bytes[96];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/bn_rand.c:251:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(k_bytes + done, digest, todo);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/rsaz_exp.c:62:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char storage[320 * 3 + 32 * 9 * 16 + 64]; /* 5.5KB */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bn/rsaz_exp.c:262:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char storage[16 * 8 * 8 + 64 * 2 + 64]; /* 1.2KB */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/buffer/buffer.c:65:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ret, str->data, str->length);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/camellia/cmll_ctr.c:13:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/camellia/cmll_ctr.c:13:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/camellia/cmll_ctr.c:15:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[CAMELLIA_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/camellia/cmll_ctr.c:16:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ecount_buf[CAMELLIA_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cast/c_ofb64.c:25:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char d[8];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/chacha/chacha_enc.c:73:30:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/chacha/chacha_enc.c:73:56:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cmac/cmac.c:21:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char k1[EVP_MAX_BLOCK_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cmac/cmac.c:22:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char k2[EVP_MAX_BLOCK_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cmac/cmac.c:24:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tbl[EVP_MAX_BLOCK_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cmac/cmac.c:26:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char last_block[EVP_MAX_BLOCK_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cmac/cmac.c:95:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out->k1, in->k1, bl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cmac/cmac.c:96:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out->k2, in->k2, bl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cmac/cmac.c:97:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out->tbl, in->tbl, bl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cmac/cmac.c:98:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out->last_block, in->last_block, bl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cmac/cmac.c:106:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const unsigned char zero_iv[EVP_MAX_BLOCK_LENGTH] = { 0 };
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cmac/cmac.c:161:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->last_block + ctx->nlast_block, data, nleft);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cmac/cmac.c:180:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ctx->last_block, data, dlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_asn1.c:386:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char kl[4];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_dd.c:58:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_enc.c:29:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[EVP_MAX_IV_LENGTH], *piv = NULL;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_enc.c:175:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ec->key, key, keylen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_ess.c:155:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char dig[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_ess.c:180:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char dig[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_kari.c:191:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char kek[EVP_MAX_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_pwri.c:50:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_pwri.c:223:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, tmp + 4, *outlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_pwri.c:258:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out + 4, in, inlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_sd.c:584:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_sd.c:600:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_sd.c:809:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char mval[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_smime.c:34:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[4096];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_api.c:203:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(v->section, section, i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_def.c:189:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char btmp[DECIMAL_SIZE(eline) + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_mod.c:175:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char rcode[DECIMAL_SIZE(ret) + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cryptlib.c:264:5:  [2] (buffer) TCHAR:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    TCHAR buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cryptlib.c:302:18:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
            if (!MultiByteToWideChar(CP_ACP, 0, fmta, len_0, fmtw, len_0))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ct/ct_log.c:74:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                  unsigned char log_id[CT_V1_HASHLEN])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ct/ct_oct.c:191:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, sct->sig, sct->sig_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ct/ct_oct.c:237:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, sct->log_id, CT_V1_HASHLEN);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ct/ct_oct.c:242:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(p, sct->ext, sct->ext_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ct/ct_oct.c:248:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, sct->sct, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ct/ct_prn.c:32:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char genstr[20];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ct/ct_vfy.c:31:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmpbuf[12];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/cfb64ede.c:95:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ovec[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/cfb_enc.c:35:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ovec[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/ecb_enc.c:18:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char buf[12];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/fcrypt.c:28:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned const char con_salt[128] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/fcrypt.c:47:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned const char cov_2char[64] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/fcrypt.c:60:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char buff[14];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/fcrypt.c:65:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char e_salt[2 + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/fcrypt.c:66:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char e_buf[32 + 1];         /* replace 32 by 8 ? */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/fcrypt.c:98:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char bb[9];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/set_key.c:24:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char odd_parity[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/str2key.c:67:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(key2, key1, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dh/dh_kdf.c:57:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char ctr[4] = { 0xF3, 0x17, 0x22, 0x53 };
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dh/dh_kdf.c:119:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char mtmp[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dh/dh_kdf.c:139:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(out, mtmp, outlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dh/dh_meth.c:45:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ret, dhm, sizeof(*dhm));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dh/dh_pmeth.c:227:15:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        len = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dh/dh_pmeth.c:233:15:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        len = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dh/dh_pmeth.c:252:15:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        len = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dh/dh_pmeth.c:257:15:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        len = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dh/dh_pmeth.c:262:15:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        typ = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dh/dh_pmeth.c:267:15:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        pad = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:50:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char seed[SHA256_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:51:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[SHA256_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:52:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[SHA256_DIGEST_LENGTH], buf2[SHA256_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:92:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(seed, seed_in, seed_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:133:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(buf, seed, qsize);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:134:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(buf2, seed, qsize);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:293:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(seed_out, seed, qsize);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:314:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:361:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(seed, seed_in, seed_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:386:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(seed_tmp, seed, seed_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:445:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(seed_out, seed, seed_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_gen.c:551:31:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        static const unsigned char ggen[4] = { 0x67, 0x67, 0x65, 0x6e };
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_lib.c:150:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[4];       /* 4 bytes looks really small. However,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_meth.c:53:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ret, dsam, sizeof(*dsam));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_pmeth.c:176:17:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        nbits = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dsa/dsa_pmeth.c:180:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        int qbits = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:71:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char errbuf[160];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:137:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char errbuf[160];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:263:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(path, inf.filename, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:432:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(path, dli.dli_fname, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:70:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char filename[NAMX_MAXRSS + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:76:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char imagename[NAMX_MAXRSS + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:282:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char symname_32[NAMX_MAXRSS + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:322:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char errstring[257];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:370:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char esa[NAMX_MAXRSS + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:382:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char filespec1_32[NAMX_MAXRSS + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:383:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char filespec2_32[NAMX_MAXRSS + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:424:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char errstring[257];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:49:10:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
    if (!MultiByteToWideChar(CP_ACP, 0, lpLibFileName, len_0, fnamw, len_0))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:343:9:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
        strcpy(&result[offset], "\\\\");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:596:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(path, me32.szExePath, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ebcdic.c:24:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
const unsigned char os_toascii[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ebcdic.c:60:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
const unsigned char os_toebcdic[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ebcdic.c:111:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
const unsigned char os_toascii[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ebcdic.c:179:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
const unsigned char os_toebcdic[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ebcdic.c:255:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
const unsigned char os_toascii[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ebcdic.c:294:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
const unsigned char os_toebcdic[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:209:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(e, scalar, 32);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:701:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(e, scalar, 32);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4230:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    signed char e[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4375:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(e, scalar, 32);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4536:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    signed char aslide[256];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4537:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    signed char bslide[256];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:5474:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const char allzeroes[15];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:5578:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(e, private_key, 32);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve448/eddsa.c:221:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(signature, nonce_point, sizeof(nonce_point));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve448/point_448.h:96:52:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                    const unsigned char ser[C448_SCALAR_BYTES]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve448/point_448.h:114:38:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void curve448_scalar_encode(unsigned char ser[C448_SCALAR_BYTES],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve448/scalar.c:153:48:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                const unsigned char ser[C448_SCALAR_BYTES])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve448/scalar.c:210:38:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void curve448_scalar_encode(unsigned char ser[C448_SCALAR_BYTES],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_asn1.c:745:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ret->seed, params->curve->seed->data,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_asn1.c:1279:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[4];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:28:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 24 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:60:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 28 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:98:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 48 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:142:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 66 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:199:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 24 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:231:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 24 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:263:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 30 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:301:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 30 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:339:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 30 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:377:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 32 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:416:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 14 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:448:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 14 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:480:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 16 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:512:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 16 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:544:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 21 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:574:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 21 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:606:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 21 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:638:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 24 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:668:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 29 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:704:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 32 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:741:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 15 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:771:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 21 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:801:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 28 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:840:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 15 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:872:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 15 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:904:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 17 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:936:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 17 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:968:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 21 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:998:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 21 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1027:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 21 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1056:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 25 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1094:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 25 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1132:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 30 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1167:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 30 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1205:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 30 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1240:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 36 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1275:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 36 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1313:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 52 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1361:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 52 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1411:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 72 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1465:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 72 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1521:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 21 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1553:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 21 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1585:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 21 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1617:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 23 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1647:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 24 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1679:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 24 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1711:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 24 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1743:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 27 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1779:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 30 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1817:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 30 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1855:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 30 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1893:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 35 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1929:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 39 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:1971:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[20 + 45 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2015:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 47 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2057:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 54 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2105:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 15 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2141:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 20 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2176:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 24 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2216:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 20 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2246:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 20 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2276:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 24 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2306:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 24 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2336:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 28 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2372:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 28 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2408:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 32 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2444:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 32 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2480:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 40 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2522:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 40 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2564:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 48 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2606:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 48 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2648:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 64 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2702:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 64 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_curve.c:2757:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[0 + 32 * 6];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_kmeth.c:149:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, sec, outlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_lib.c:221:14:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        if (!memcpy(dest->seed, src->seed, src->seed_len))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_lib.c:491:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(group->seed, p, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_mult.c:639:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(wNAF[i], pp, wNAF_len[i]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ec_pmeth.c:387:19:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        co_mode = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecdh_kdf.c:28:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ctr[4];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecdh_kdf.c:37:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char mtmp[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecdh_kdf.c:60:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(out, mtmp, outlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/eck_prn.c:227:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char str[128 + 1 + 4];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp224.c:1180:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(nq, tmp, 3 * sizeof(felem));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp224.c:1219:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(nq, tmp, 3 * sizeof(felem));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp521.c:1571:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(nq, tmp, 3 * sizeof(felem));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp521.c:1601:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(nq, tmp, 3 * sizeof(felem));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp521.c:1991:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(pre_comp[i][1][0], x_out, sizeof(felem));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp521.c:1992:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(pre_comp[i][1][1], y_out, sizeof(felem));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp521.c:1993:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(pre_comp[i][1][2], z_out, sizeof(felem));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistputil.c:77:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
# define tmp_felem(I) (&((char *)tmp_felems)[(I) * felem_size])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistputil.c:78:19:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
# define X(I) (&((char *)point_array)[3*(I) * felem_size])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistputil.c:79:19:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
# define Y(I) (&((char *)point_array)[(3*(I) + 1) * felem_size])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistputil.c:80:19:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
# define Z(I) (&((char *)point_array)[(3*(I) + 2) * felem_size])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:430:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r->X, res_x, sizeof(res_x));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:431:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r->Y, res_y, sizeof(res_y));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:432:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r->Z, res_z, sizeof(res_z));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:516:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r->X, res_x, sizeof(res_x));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:517:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r->Y, res_y, sizeof(res_y));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:518:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r->Z, res_z, sizeof(res_z));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:596:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r, res, sizeof(res));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:619:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char (*p_str)[33] = NULL;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:733:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r, &temp[0], sizeof(temp[0]));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:982:46:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                    unsigned char p_str[33],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:1123:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r->Z, ONE, sizeof(ONE));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:1156:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char p_str[33] = { 0 };
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:1339:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(new_scalars, scalars, num * sizeof(BIGNUM *));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:1341:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(new_points, points, num * sizeof(EC_POINT *));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistz256.c:1586:31:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        static const unsigned char expLo[32]  = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_s390x_nistp.c:47:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char param[S390X_SIZE_PARAM];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_s390x_nistp.c:126:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char param[S390X_SIZE_PARAM];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_s390x_nistp.c:163:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(param + S390X_OFF_H(len) + off, dgst, len - off);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_s390x_nistp.c:219:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char param[S390X_SIZE_PARAM];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_s390x_nistp.c:257:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(param + S390X_OFF_H(len) + off, dgst, len - off);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:79:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(pubkey, p, plen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:101:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(privkey, p, KEYLENID(id));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:385:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(priv, key->privkey, *len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:405:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(pub, key->pubkey, *len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:848:41:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void s390x_x25519_mod_p(unsigned char u[32])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:850:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char u_red[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:872:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void s390x_x448_mod_p(unsigned char u[56])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:874:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char u_red[56];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:904:38:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static int s390x_x25519_mul(unsigned char u_dst[32],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:905:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                            const unsigned char u_src[32],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:906:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                            const unsigned char d_src[32])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:910:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char u_dst[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:911:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char u_src[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:912:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char d_src[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:937:36:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static int s390x_x448_mul(unsigned char u_dst[56],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:938:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          const unsigned char u_src[56],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:939:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          const unsigned char d_src[56])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:943:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char u_dst[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:944:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char u_src[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:945:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char d_src[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:953:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(param.x448.u_src, u_src, 56);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:954:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(param.x448.d_src, d_src, 56);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:966:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(u_dst, param.x448.u_dst, 56);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:973:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static int s390x_ed25519_mul(unsigned char x_dst[32],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:974:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char y_dst[32],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:975:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             const unsigned char x_src[32],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:976:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             const unsigned char y_src[32],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:977:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             const unsigned char d_src[32])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:981:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char x_dst[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:982:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char y_dst[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:983:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char x_src[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:984:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char y_src[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:985:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char d_src[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1007:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static int s390x_ed448_mul(unsigned char x_dst[57],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1008:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char y_dst[57],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1009:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           const unsigned char x_src[57],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1010:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           const unsigned char y_src[57],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1011:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           const unsigned char d_src[57])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1015:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char x_dst[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1016:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char y_dst[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1017:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char x_src[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1018:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char y_src[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1019:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char d_src[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1027:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(param.ed448.x_src, x_src, 57);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1028:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(param.ed448.y_src, y_src, 57);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1029:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(param.ed448.d_src, d_src, 57);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1038:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(x_dst, param.ed448.x_dst, 57);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1039:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(y_dst, param.ed448.y_dst, 57);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1145:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char x_dst[32], buff[SHA512_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1202:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char x_dst[57], buff[114];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1292:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char sig[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1293:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char priv[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1332:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char sig[128];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1333:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char priv[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1351:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(param.ed448.priv + 64 - 57, edkey->privkey, 57);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1360:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(sig, param.ed448.sig, 57);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1361:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(sig + 57, param.ed448.sig + 64, 57);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1375:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char sig[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1376:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char pub[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1402:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char sig[128];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1403:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char pub[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1413:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(param.ed448.sig, sig, 57);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1415:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(param.ed448.sig + 64, sig + 57, 57);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecx_meth.c:1417:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(param.ed448.pub, edkey->pubkey, 57);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_devcrypto.c:65:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char partial[EVP_MAX_BLOCK_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_devcrypto.c:184:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char saved_iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_devcrypto.c:206:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(saved_iv, ivptr, ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_devcrypto.c:235:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(iv, ivptr, ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_devcrypto.c:762:16:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    if ((cfd = open("/dev/crypto", O_RDWR, 0)) < 0) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_dyn.c:462:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&cpy, e, sizeof(ENGINE));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_dyn.c:487:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(e, &cpy, sizeof(ENGINE));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_openssl.c:187:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[TEST_RC4_KEY_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_openssl.c:197:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&test(ctx)->key[0], key, EVP_CIPHER_CTX_key_length(ctx));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/err/err.c:205:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char strerror_pool[SPACE_SYS_STR_REASONS];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/err/err.c:587:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char lsbuf[64], fsbuf[64], rsbuf[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/err/err.c:628:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/err/err_prn.c:20:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/err/err_prn.c:21:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf2[4096];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_b64.c:42:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[EVP_ENCODE_LENGTH(B64_BLOCK_SIZE) + 10];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_b64.c:43:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmp[B64_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_b64.c:142:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, &(ctx->buf[ctx->buf_off]), i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_b64.c:313:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, ctx->buf, i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_b64.c:386:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(&(ctx->tmp[ctx->tmp_len]), in, n);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_b64.c:403:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(ctx->tmp, in, n);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_enc.c:39:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[BUF_OFFSET + ENC_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_enc.c:125:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, &(ctx->buf[ctx->buf_off]), i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_enc.c:222:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, ctx->buf, i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_ok.c:107:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[IOBS];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_ok.c:193:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(out, &(ctx->buf[ctx->buf_off]), i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_ok.c:304:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&ctx->buf[ctx->buf_len], in, n);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_ok.c:471:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&(ctx->buf[ctx->buf_len]), md_data, md_size);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_ok.c:492:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_ok.c:509:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(md_data, &(ctx->buf[ctx->buf_off]), md_size);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_ok.c:572:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/cmeth_lib.c:34:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(to, cipher, sizeof(*to));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/digest.c:233:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, in, sizeof(*out));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/digest.c:255:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out->md_data, in->md_data, out->digest->ctx_size);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:56:36:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    void (*stream) (const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:57:30:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                    unsigned char *out, size_t length,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:59:36:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                    const unsigned char iv[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:91:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tag[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:92:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data_buf[16]; /* Store partial data blocks */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:93:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char aad_buf[16];  /* Store partial AAD blocks */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:120:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void bsaes_cbc_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:120:58:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void bsaes_cbc_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:122:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char ivec[16], int enc);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:123:48:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void bsaes_ctr32_encrypt_blocks(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:123:67:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void bsaes_ctr32_encrypt_blocks(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:125:48:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                const unsigned char ivec[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:126:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void bsaes_xts_encrypt(const unsigned char *inp, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:126:59:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void bsaes_xts_encrypt(const unsigned char *inp, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:128:60:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       const AES_KEY *key2, const unsigned char iv[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:129:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void bsaes_xts_decrypt(const unsigned char *inp, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:129:59:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void bsaes_xts_decrypt(const unsigned char *inp, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:131:60:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       const AES_KEY *key2, const unsigned char iv[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:134:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void AES_ctr32_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:134:58:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void AES_ctr32_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:136:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       const unsigned char ivec[AES_BLOCK_SIZE]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:139:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void AES_xts_encrypt(const unsigned char *inp, unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:139:57:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void AES_xts_encrypt(const unsigned char *inp, unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:141:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                     const unsigned char iv[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:142:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void AES_xts_decrypt(const unsigned char *inp, unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:142:57:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void AES_xts_decrypt(const unsigned char *inp, unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:144:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                     const unsigned char iv[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:221:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void aesni_xts_encrypt(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:222:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:225:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       const unsigned char iv[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:227:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void aesni_xts_decrypt(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:228:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:231:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       const unsigned char iv[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:233:48:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void aesni_ccm64_encrypt_blocks(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:234:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:237:48:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                const unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:238:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                unsigned char cmac[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:240:48:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void aesni_ccm64_decrypt_blocks(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:241:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:244:48:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                const unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:245:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                unsigned char cmac[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:248:41:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t aesni_gcm_encrypt(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:249:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                         unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:251:52:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                         const void *key, unsigned char ivec[16], u64 *Xi);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:253:41:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t aesni_gcm_decrypt(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:254:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                         unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:256:52:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                         const void *key, unsigned char ivec[16], u64 *Xi);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:371:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx->iv, iv, gctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:428:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), iv, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:454:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), iv, 15 - cctx->L);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:465:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void aesni_ocb_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:465:58:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void aesni_ocb_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:468:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char offset_i[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:470:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char checksum[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:471:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void aesni_ocb_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:471:58:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void aesni_ocb_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:474:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char offset_i[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:476:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char checksum[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:522:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(octx->iv, iv, octx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:790:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx->iv, iv, gctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:866:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), iv, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:891:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), iv, 15 - cctx->L);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:945:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(octx->iv, iv, octx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1013:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char k[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1028:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char cv[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1029:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char k[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1046:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char cv[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1047:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char k[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1064:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char reserved[12];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1067:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                unsigned char b[4];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1071:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                unsigned char b[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1073:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char h[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1080:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char k[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1094:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ares[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1095:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char mres[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1096:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char kres[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1114:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char pad[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1126:30:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                    unsigned char b[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1128:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                unsigned char k[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1134:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                unsigned char b[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1138:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                unsigned char b[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1150:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char pad[140];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1197:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cctx->km.param.k, key, keylen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1229:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cctx->kmo.param.cv, iv, ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1230:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cctx->kmo.param.k, key, keylen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1300:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cctx->kmf.param.cv, iv, ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1301:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cctx->kmf.param.k, key, keylen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1372:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cctx->kmf.param.cv, iv, ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1373:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cctx->kmf.param.k, key, keylen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1485:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char b[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1578:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&ctx->kma.param.j0, iv, ctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1583:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->iv, iv, ctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1657:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(buf, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1666:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, gctx->kma.param.t.b, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1672:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx->iv, ptr, gctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1684:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx->iv, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1702:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, gctx->iv + gctx->ivlen - arg, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1716:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(gctx->iv + gctx->ivlen - arg, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1727:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(buf, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1763:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx_out->iv, gctx->iv, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1787:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&gctx->kma.param.k, key, keylen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1805:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx->iv, iv, gctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1843:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out + len, gctx->kma.param.t.b, EVP_GCM_TLS_TAG_LEN);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1869:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char *buf, tmp[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:1967:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ctx->aes.ccm.nonce.b + 1, nonce, 15 - ctx->aes.ccm.l);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2147:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, buf, EVP_CCM_TLS_EXPLICIT_IV_LEN);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2155:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ivec + EVP_CCM_TLS_FIXED_IV_LEN, in, EVP_CCM_TLS_EXPLICIT_IV_LEN);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2168:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out + len, cctx->aes.ccm.kmac_param.icv.b, cctx->aes.ccm.m);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2200:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(cctx->aes.ccm.kmac_param.k, key, keylen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2214:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ivec, iv, 15 - cctx->aes.ccm.l);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2346:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(buf, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2377:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(iv, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2402:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(buf, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2416:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, cctx->aes.ccm.kmac_param.icv.b, cctx->aes.ccm.m);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2583:48:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void HWAES_ctr32_encrypt_blocks(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2583:67:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void HWAES_ctr32_encrypt_blocks(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2585:48:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                const unsigned char ivec[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2586:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void HWAES_xts_encrypt(const unsigned char *inp, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2586:59:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void HWAES_xts_encrypt(const unsigned char *inp, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2588:60:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       const AES_KEY *key2, const unsigned char iv[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2589:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void HWAES_xts_decrypt(const unsigned char *inp, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2589:59:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void HWAES_xts_decrypt(const unsigned char *inp, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2591:60:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       const AES_KEY *key2, const unsigned char iv[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2887:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(c->buf, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2895:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, c->buf, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2901:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx->iv, ptr, gctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2912:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx->iv, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2924:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, gctx->iv + gctx->ivlen - arg, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2936:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(gctx->iv + gctx->ivlen - arg, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2945:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(c->buf, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:2981:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(gctx_out->iv, gctx->iv, gctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:3058:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx->iv, iv, gctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:3473:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), iv, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:3527:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_buf_noconst(c), ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:3554:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(c), ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:3573:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(EVP_CIPHER_CTX_buf_noconst(c), ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:3645:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), iv, 15 - cctx->L);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:3661:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, EVP_CIPHER_CTX_buf_noconst(ctx),
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:3664:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(EVP_CIPHER_CTX_iv_noconst(ctx) + EVP_CCM_TLS_FIXED_IV_LEN, in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:3688:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char tag[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:3756:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char tag[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:3807:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), iv, EVP_CIPHER_CTX_iv_length(ctx));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4001:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(octx->tag, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4008:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, octx->tag, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4026:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void HWAES_ocb_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4026:58:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void HWAES_ocb_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4029:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char offset_i[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4031:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char checksum[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4036:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void HWAES_ocb_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4036:58:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void HWAES_ocb_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4039:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char offset_i[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4041:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char checksum[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4121:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(octx->iv, iv, octx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4174:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(buf + (*buf_len), in, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4178:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(buf + (*buf_len), in, remaining);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes.c:4228:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(buf, in, trailing_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:30:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char tls_aad[16]; /* 13 used */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:54:54:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                        const AES_KEY *key, unsigned char iv[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:58:57:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           const AES_KEY *key, unsigned char iv[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:161:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char storage[sizeof(SHA1_MB_CTX) + 32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:196:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ciph_d[0].out - 16, IVs, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:197:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ciph_d[0].iv, IVs, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:203:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ciph_d[i].out - 16, IVs, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:204:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ciph_d[i].iv, IVs, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:209:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(blocks[0].c, key->md.data, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:240:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(blocks[i].c + 13, hash_d[i].ptr, 64 - 13);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:277:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(ciph_d[i].iv, ciph_d[i].out - 16, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:294:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(blocks[i].c, ptr, off);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:359:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ciph_d[i].out, ciph_d[i].inp, len - processed);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:455:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(out + aes_off, in + aes_off, plen - aes_off);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:477:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char c[32 + SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:489:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                unsigned char c[SHA_CBLOCK];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:492:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char tail_iv[AES_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:502:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), in, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:513:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(tail_iv, in + len - 2 * AES_BLOCK_SIZE,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:569:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(ctx->iv, tail_iv, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:777:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char hmac_key[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:786:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(hmac_key, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha1.c:830:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(key->aux.tls_aad, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:31:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char tls_aad[16]; /* 13 used */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:55:55:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                         const AES_KEY *key, unsigned char iv[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:157:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char storage[sizeof(SHA256_MB_CTX) + 32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:193:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ciph_d[0].out - 16, IVs, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:194:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ciph_d[0].iv, IVs, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:200:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ciph_d[i].out - 16, IVs, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:201:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ciph_d[i].iv, IVs, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:206:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(blocks[0].c, key->md.data, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:240:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(blocks[i].c + 13, hash_d[i].ptr, 64 - 13);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:277:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(ciph_d[i].iv, ciph_d[i].out - 16, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:294:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(blocks[i].c, ptr, off);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:371:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ciph_d[i].out, ciph_d[i].inp, len - processed);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:485:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(out + aes_off, in + aes_off, plen - aes_off);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:507:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char c[64 + SHA256_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:523:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                unsigned char c[SHA256_CBLOCK];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:755:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char hmac_key[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:767:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(hmac_key, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aes_cbc_hmac_sha256.c:811:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(key->aux.tls_aad, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:240:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx->iv, iv, gctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:284:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_buf_noconst(c), ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:292:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, EVP_CIPHER_CTX_buf_noconst(c), arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:298:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx->iv, ptr, gctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:309:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(gctx->iv, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:322:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, gctx->iv + gctx->ivlen - arg, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:335:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(gctx->iv + gctx->ivlen - arg, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:344:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_buf_noconst(c), ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:382:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(gctx_out->iv, gctx->iv, gctx->ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:525:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), iv, 15 - cctx->L);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:550:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_buf_noconst(c), ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:577:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(c), ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:599:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(EVP_CIPHER_CTX_buf_noconst(c), ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:642:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, EVP_CIPHER_CTX_buf_noconst(ctx),
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:645:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(EVP_CIPHER_CTX_iv_noconst(ctx) + EVP_CCM_TLS_FIXED_IV_LEN, in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:667:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char tag[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_aria.c:735:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char tag[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:27:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[CHACHA_BLK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:36:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           const unsigned char user_key[CHACHA_KEY_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:37:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           const unsigned char iv[CHACHA_CTR_SIZE], int enc)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:154:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tag[POLY1305_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:155:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tls_aad[POLY1305_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:181:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char temp[CHACHA_CTR_SIZE] = { 0 };
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:185:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(temp + CHACHA_CTR_SIZE - actx->nonce_len, iv,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:207:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char zero[4 * CHACHA_BLK_SIZE] = { 0 };
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:209:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char zero[2 * CHACHA_BLK_SIZE] = { 0 };
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:217:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char *buf, *tohash, *ctr, storage[sizeof(zero) + 32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:234:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(tohash, actx->tls_aad, POLY1305_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:259:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(tohash, actx->tls_aad, POLY1305_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:319:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ctr, (unsigned char *)&actx->len, POLY1305_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:350:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, actx->tag, POLY1305_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:362:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char zero[CHACHA_BLK_SIZE] = { 0 };
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:433:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char temp[POLY1305_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:476:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(out, actx->tag, POLY1305_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:562:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(actx->tag, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:570:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ptr, actx->tag, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_chacha20_poly1305.c:580:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(actx->tls_aad, ptr, EVP_AEAD_TLS1_AAD_LEN);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des.c:41:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                        const DES_key_schedule *ks, unsigned char iv[8]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des.c:43:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                        const DES_key_schedule *ks, unsigned char iv[8]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des.c:148:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char c[1], d[1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:45:69:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             const DES_key_schedule ks[3], unsigned char iv[8]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:47:69:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             const DES_key_schedule ks[3], unsigned char iv[8]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:166:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char c[1], d[1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:239:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&dat->ks3, &dat->ks1, sizeof(dat->ks1));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:248:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&dat->ks3, &dat->ks1, sizeof(dat->ks1));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:313:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char wrap_iv[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:319:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char icv[8], iv[8], sha1tmp[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:325:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), wrap_iv, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:365:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sha1tmp[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:372:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out + inl + 8, sha1tmp, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:377:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, EVP_CIPHER_CTX_iv_noconst(ctx), 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_des3.c:381:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), wrap_iv, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_null.c:48:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, in, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_rc2.c:127:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_rc4_hmac_md5.c:112:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(out + rc4_off, in + rc4_off, plen - rc4_off);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_rc4_hmac_md5.c:125:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char mac[MD5_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_rc4_hmac_md5.c:185:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char hmac_key[64];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_rc4_hmac_md5.c:194:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(hmac_key, ptr, arg);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_xcbc_d.c:58:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&data(ctx)->inw[0], &key[8], 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/e_xcbc_d.c:59:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&data(ctx)->outw[0], &key[16], 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/encode.c:48:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char data_bin2ascii[65] =
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/encode.c:52:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char srpdata_bin2ascii[65] =
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/encode.c:72:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char data_ascii2bin[128] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/encode.c:91:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char srpdata_ascii2bin[128] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/encode.c:139:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dctx, sctx, sizeof(EVP_ENCODE_CTX));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/encode.c:173:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(ctx->enc_data[ctx->num]), in, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/encode.c:179:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(ctx->enc_data[ctx->num]), in, i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/encode.c:210:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(ctx->enc_data[0]), in, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_enc.c:183:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(ctx->oiv, iv, EVP_CIPHER_CTX_iv_length(ctx));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_enc.c:184:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ctx->iv, ctx->oiv, EVP_CIPHER_CTX_iv_length(ctx));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_enc.c:191:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(ctx->iv, iv, EVP_CIPHER_CTX_iv_length(ctx));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_enc.c:352:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&(ctx->buf[i]), in, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_enc.c:358:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&(ctx->buf[i]), in, j);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_enc.c:377:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->buf, &(in[inl]), i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_enc.c:505:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, ctx->final, b);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_enc.c:521:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->final, &out[*outl], b);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_enc.c:671:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, in, sizeof(*out));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_enc.c:680:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out->cipher_data, in->cipher_data, in->cipher->ctx_size);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_key.c:18:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char prompt_string[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_key.c:52:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buff[BUFSIZ];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_key.c:80:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md_buf[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_lib.c:99:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(c->iv, c->oiv, l);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_lib.c:349:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(to, md, sizeof(*to));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_local.h:30:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char oiv[EVP_MAX_IV_LENGTH]; /* original iv */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_local.h:31:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[EVP_MAX_IV_LENGTH]; /* working iv */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_local.h:32:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[EVP_MAX_BLOCK_LENGTH]; /* saved partial block */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_local.h:41:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char final[EVP_MAX_BLOCK_LENGTH]; /* possible final block */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_local.h:59:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char enc_data[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_pbe.c:94:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char obj_tmp[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_pkey.c:25:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char obj_tmp[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_md5_sha1.c:52:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char padtmp[48];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_md5_sha1.c:53:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md5tmp[MD5_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_md5_sha1.c:54:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sha1tmp[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sha1.c:37:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char padtmp[40];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sha1.c:38:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sha1tmp[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sha3.c:29:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[KECCAK1600_WIDTH / 8 - 32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sha3.c:76:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ctx->buf + num, inp, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sha3.c:85:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->buf + num, inp, rem);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sha3.c:98:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->buf, inp + len - rem, rem);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sha3.c:253:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ctx->buf + num, inp, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sha3.c:257:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->buf + num, inp, rem);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sha3.c:268:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->buf, inp + len - rem, rem);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sha3.c:279:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(md, ctx->A, ctx->md_size);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sigver.c:124:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/m_sigver.c:176:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p5_crpt.c:29:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md_tmp[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p5_crpt.c:30:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[EVP_MAX_KEY_LENGTH], iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p5_crpt.c:103:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(key, md_tmp, kl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p5_crpt.c:104:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, md_tmp + (16 - ivl), ivl);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p5_crpt2.c:36:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char digtmp[EVP_MAX_MD_SIZE], *p, itmp[4];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p5_crpt2.c:90:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, digtmp, cplen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p5_crpt2.c:190:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char *salt, key[EVP_MAX_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p_seal.c:22:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[EVP_MAX_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p_sign.c:20:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char m[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p_verify.c:20:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char m[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/pbe_scrypt.c:75:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(B_ + (i / 2 + (i & 1) * r) * 16, X, sizeof(X));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/hmac/hm_ameth.c:89:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(priv, ASN1_STRING_get0_data(os), *len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/hmac/hmac.c:23:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char pad[HMAC_MAX_MD_CBLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/hmac/hmac.c:25:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char keytmp[HMAC_MAX_MD_CBLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/hmac/hmac.c:61:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(keytmp, key, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/hmac/hmac.c:110:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/hmac/hmac.c:216:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/hmac/hmac.c:217:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const unsigned char dummy_key[1] = {'\0'};
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/idea/i_ofb64.c:25:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char d[8];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/kdf/hkdf.c:43:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char info[HKDF_MAXBUF];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/kdf/hkdf.c:124:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(kctx->info + kctx->info_len, p2, p1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/kdf/hkdf.c:268:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char prk[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/kdf/hkdf.c:305:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char prev[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/kdf/hkdf.c:347:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(okm + done_len, prev, copy_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/kdf/tls1_prf.c:32:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char seed[TLS1_PRF_MAXBUF];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/kdf/tls1_prf.c:83:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(kctx->seed + kctx->seedlen, p2, p1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/kdf/tls1_prf.c:188:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char A1[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/kdf/tls1_prf.c:238:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(out, A1, olen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/md2/md2_dgst.c:90:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&(p[c->num]), data, MD2_BLOCK - c->num);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/md2/md2_dgst.c:97:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&(p[c->num]), data, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/md2/md2_dgst.c:112:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(p, data, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/md2/md2_dgst.c:146:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(sp1, state, 16 * sizeof(MD2_INT));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/md2/md2_one.c:22:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[MD2_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/md2/md2_one.c:32:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char temp[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/md4/md4_one.c:22:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[MD4_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/md4/md4_one.c:32:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char temp[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/md5/md5_one.c:22:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[MD5_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/md5/md5_one.c:32:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char temp[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mdc2/mdc2_one.c:17:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[MDC2_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mdc2/mdc2dgst.c:47:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&(c->data[i]), in, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mdc2/mdc2dgst.c:53:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&(c->data[i]), in, j);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mdc2/mdc2dgst.c:65:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(c->data[0]), &(in[i]), j);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mdc2/mdc2dgst.c:123:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(md, (char *)c->h, MDC2_BLOCK);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mdc2/mdc2dgst.c:124:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&(md[MDC2_BLOCK]), (char *)c->hh, MDC2_BLOCK);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem.c:126:16:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    md_count = atol(md_failstring);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem.c:128:44:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    md_fail_percent = atsign == NULL ? 0 : atoi(atsign + 1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem.c:152:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buff[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem.c:188:22:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        md_tracefd = atoi(cp);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem.c:289:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ret, str, old_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem_dbg.c:457:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem_dbg.c:535:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(buf + buf_len, amip->info, 128 - buf_len - 3);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem_dbg.c:590:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem_sec.c:451:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        if ((fd = open("/dev/zero", O_RDWR)) >= 0) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cbc128.c:18:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cbc128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cbc128.c:18:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cbc128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cbc128.c:20:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ivec[16], block128_f block)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cbc128.c:66:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ivec, iv, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cbc128.c:69:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cbc128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cbc128.c:69:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cbc128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cbc128.c:71:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ivec[16], block128_f block)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cbc128.c:76:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char c[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cbc128.c:110:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ivec, iv, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ccm128.c:54:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&ctx->nonce.c[1], nonce, 14 - L);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ccm128.c:169:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(temp.c, inp, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ccm128.c:182:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, temp.c, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ccm128.c:252:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(temp.c, inp, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ccm128.c:255:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, scratch.c, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ccm128.c:430:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tag, ctx->cmac.c, M);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:19:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:19:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:21:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ivec[16], int *num,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:137:47:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void cfbr_encrypt_block(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:137:66:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void cfbr_encrypt_block(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:139:41:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                               unsigned char ivec[16], int enc,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:143:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ovec[16 * 2 + 1]; /* +1 because we dereference (but don't
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:150:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ovec, ivec, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:164:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ivec, ovec + num, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:173:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_1_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:173:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_1_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:175:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[16], int *num,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:179:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char c[1], d[1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:189:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_8_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:189:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_8_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cfb128.c:191:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[16], int *num,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ctr128.c:71:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ctr128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ctr128.c:71:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ctr128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ctr128.c:73:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ctr128.c:74:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ecount_buf[16], unsigned int *num,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ctr128.c:147:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ctr128_encrypt_ctr32(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ctr128.c:147:68:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ctr128_encrypt_ctr32(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ctr128.c:149:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                 unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ctr128.c:150:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                 unsigned char ecount_buf[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:27:51:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_encrypt_block(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:28:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                   unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:29:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                   const void *key, unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:50:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, out - 16, residue);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:51:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out - 16, ivec, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:56:55:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_encrypt_block(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:57:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                       unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:59:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                       unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:82:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out - 16 + residue, ivec, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:87:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:87:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:89:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[16], cbc128_f cbc)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:94:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char c[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:111:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp.c, out - 16, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:113:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, tmp.c, residue);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:116:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp.c, in, residue);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:117:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, out - 16, residue);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:123:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:123:68:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:125:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                 unsigned char ivec[16], cbc128_f cbc)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:130:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char c[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:152:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp.c, in, residue);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:158:51:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_decrypt_block(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:159:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                   unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:160:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                   const void *key, unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:166:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char c[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:185:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp.c, tmp.c + 16, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:186:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp.c, in + 16, residue);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:200:55:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_decrypt_block(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:201:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                       unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:203:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                       unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:209:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char c[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:232:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp.c, tmp.c + 16, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:233:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp.c, in, residue);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:248:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:248:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:250:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[16], cbc128_f cbc)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:255:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char c[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:278:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp.c, in + 16, residue);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:283:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, tmp.c, 16 + residue);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:288:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:288:68:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:290:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                 unsigned char ivec[16], cbc128_f cbc)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:295:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char c[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:322:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp.c, in, residue);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/cts128.c:327:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, tmp.c, 16 + residue);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/gcm128.c:845:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->Yi.c, iv, 12);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/gcm128.c:1017:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->Xn, ctx->Xi.c, sizeof(ctx->Xi));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/gcm128.c:1252:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->Xn, ctx->Xi.c, sizeof(ctx->Xi));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/gcm128.c:1497:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->Xn, ctx->Xi.c, sizeof(ctx->Xi));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/gcm128.c:1661:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->Xn, ctx->Xi.c, sizeof(ctx->Xi));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/gcm128.c:1850:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ctx->Xn + mres, &bitlen, sizeof(bitlen));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/gcm128.c:1871:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tag, ctx->Xi.c,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/modes_local.h:132:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char Xn[48];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/modes_local.h:155:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char c[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:199:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dest, src, sizeof(OCB128_CONTEXT));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:209:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(dest->l, src->l, (src->l_index + 1) * 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:220:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ktop[16], tmp[16], mask;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:221:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char stretch[24], nonce[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:238:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(nonce + 16 - len, iv, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:242:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp, nonce, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:247:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(stretch, ktop, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:289:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(tmp.c, aad, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:311:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(tmp.c, aad, last_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:358:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                    (const unsigned char (*)[16])ctx->l, ctx->sess.checksum.c);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:371:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(tmp.c, in, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:382:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(out, tmp.c, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:407:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(pad.c, in, last_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:450:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                    (const unsigned char (*)[16])ctx->l, ctx->sess.checksum.c);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:463:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(tmp.c, in, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:474:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(out, tmp.c, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:499:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(pad.c, out, last_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ocb128.c:527:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(tag, &tmp, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ofb128.c:19:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ofb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ofb128.c:19:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ofb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/ofb128.c:21:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ivec[16], int *num, block128_f block)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:53:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char *A, B[16], *R;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:63:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(A, iv, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:68:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(B + 8, R, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:76:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(R, B + 8, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:79:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, A, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:104:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char *A, B[16], *R;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:111:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(A, in, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:122:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(B + 8, R, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:124:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(R, B + 8, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:127:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, A, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:155:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char got_iv[8];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:198:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char aiv[8];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:207:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(aiv, default_aiv, 4);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:209:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(aiv, icv, 4);    /* Standard doesn't mention this. */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:223:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, aiv, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:262:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char aiv[8];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:263:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char zeros[8] = { 0x0 };
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:277:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char buff[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:280:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(aiv, buff, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/wrap128.c:282:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, buff + 8, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/xts128.c:15:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          const unsigned char iv[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/xts128.c:35:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tweak.c, iv, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/xts128.c:44:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(scratch.c, inp, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/xts128.c:55:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, scratch.c, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/xts128.c:99:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out - 16, scratch.c, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/xts128.c:127:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(scratch.c, inp, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/modes/xts128.c:149:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, scratch.c, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_fopen.c:57:15:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
    if ((sz = MultiByteToWideChar(CP_UTF8, (flags = MB_ERR_INVALID_CHARS),
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_fopen.c:60:16:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
         (sz = MultiByteToWideChar(CP_UTF8, (flags = 0),
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_fopen.c:66:13:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
        if (MultiByteToWideChar(CP_UTF8, flags,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_fopen.c:68:13:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
            MultiByteToWideChar(CP_UTF8, 0, mode, strlen(mode) + 1,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_fopen.c:77:20:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            file = fopen(filename, mode);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_fopen.c:80:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        file = fopen(filename, mode);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_fopen.c:109:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        file = fopen(filename, mode);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_fopen.c:114:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    file = fopen(filename, mode);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_str.c:51:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ret, str, maxlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_str.c:69:12:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    return memcpy(ret, data, siz);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_time.c:37:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(result, ts2, sizeof(struct tm));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_time.c:53:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(result, ts, sizeof(struct tm));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/objects/obj_dat.c:402:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tbuf[DECIMAL_SIZE(i) + DECIMAL_SIZE(l) + 2];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/objects/obj_dat.c:643:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[512];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/objects/obj_dat.h:13:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char so[7762] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ocsp/ocsp_ext.c:268:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(tmpval, val, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ocsp/ocsp_lib.c:50:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ocsp/ocsp_srv.c:265:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ocsp/ocsp_srv.c:289:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char md[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ocsp/ocsp_vfy.c:173:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmphash[SHA_DIGEST_LENGTH], *keyhash;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ocsp/ocsp_vfy.c:284:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ocsp/v3_ocsp.c:177:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(*pp, os->data, os->length);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_info.c:254:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[PEM_BUFSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:40:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(buf, userdata, i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:316:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[PEM_BUFSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:317:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[EVP_MAX_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:318:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:416:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[EVP_MAX_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:417:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[PEM_BUFSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:763:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(*name, linebuf + BEGINLEN, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_pk8.c:69:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[PEM_BUFSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_pk8.c:119:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char psbuf[PEM_BUFSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_pkey.c:55:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char psbuf[PEM_BUFSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_pkey.c:110:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pem_str[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_pkey.c:156:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pem_str[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pvkfmt.c:206:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hdr_buf[16], *buf = NULL;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pvkfmt.c:682:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char keybuf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pvkfmt.c:686:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char psbuf[PEM_BUFSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pvkfmt.c:706:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(enctmp, p, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pvkfmt.c:751:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char pvk_hdr[24], *buf = NULL;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pvkfmt.c:827:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char psbuf[PEM_BUFSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pvkfmt.c:828:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char keybuf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_crpt.c:27:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[EVP_MAX_KEY_LENGTH], iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_crt.c:40:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char keyid[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_decr.c:102:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char fname[30];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_decr.c:104:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(fname, "DER%d", fnm++);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_decr.c:105:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        op = fopen(fname, "wb");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_key.c:137:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, Ai, min(n, u));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_mutl.c:54:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[96];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_mutl.c:64:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(key, out + sizeof(out) - TK26_MAC_KEY_LEN, TK26_MAC_KEY_LEN);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_mutl.c:81:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[EVP_MAX_MD_SIZE], *salt;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_mutl.c:152:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char mac[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_mutl.c:179:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char mac[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_mutl.c:237:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p12->mac->salt->data, salt, saltlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_npas.c:66:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char mac[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs7/pk7_doit.c:273:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char key[EVP_MAX_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs7/pk7_doit.c:274:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs7/pk7_doit.c:617:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md_data[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs7/pk7_doit.c:777:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char md_data[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs7/pk7_doit.c:996:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char md_dat[EVP_MAX_MD_SIZE], *abuf = NULL;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305.c:135:53:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void poly1305_init(void *ctx, const unsigned char key[16])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305.c:215:47:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void poly1305_emit(void *ctx, unsigned char mac[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305.c:273:53:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void poly1305_init(void *ctx, const unsigned char key[16])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305.c:381:47:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void poly1305_emit(void *ctx, unsigned char mac[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305.c:428:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int poly1305_init(void *ctx, const unsigned char key[16], void *func);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305.c:431:40:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void poly1305_emit(void *ctx, unsigned char mac[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305.c:435:50:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void Poly1305_Init(POLY1305 *ctx, const unsigned char key[32])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305.c:486:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ctx->data + num, inp, rem);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305.c:492:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ctx->data + num, inp, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305.c:507:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->data, inp, rem);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305.c:512:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void Poly1305_Final(POLY1305 *ctx, unsigned char mac[16])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305_ameth.c:83:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(priv, ASN1_STRING_get0_data(os), ASN1_STRING_length(os));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305_base2_44.c:57:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int poly1305_init(void *ctx, const unsigned char key[16])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305_base2_44.c:135:40:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void poly1305_emit(void *ctx, unsigned char mac[16], const u32 nonce[4])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305_ieee754.c:110:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int poly1305_init(void *ctx, const unsigned char key[16])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305_ieee754.c:430:40:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void poly1305_emit(void *ctx, unsigned char mac[16], const u32 nonce[4])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305_local.h:12:54:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef void (*poly1305_emit_f) (void *ctx, unsigned char mac[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305_local.h:21:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[POLY1305_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/poly1305/poly1305_pmeth.c:68:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&dctx->ctx, &sctx->ctx, sizeof(POLY1305));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:87:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32_int(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:87:60:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32_int(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:90:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32_vmx(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:90:60:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32_vmx(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:93:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32_vsx(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:93:60:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32_vsx(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:96:30:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:96:56:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:109:50:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void poly1305_init_int(void *ctx, const unsigned char key[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:112:40:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void poly1305_emit(void *ctx, unsigned char mac[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:114:50:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void poly1305_init_fpu(void *ctx, const unsigned char key[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:117:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void poly1305_emit_fpu(void *ctx, unsigned char mac[16],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:119:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int poly1305_init(void *ctx, const unsigned char key[16], void *func[2]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:120:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int poly1305_init(void *ctx, const unsigned char key[16], void *func[2])
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ppccap.c:259:33:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        if (uname(&uts) != 0 || atoi(uts.version) < 6)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/drbg_ctr.c:132:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ctr->bltmp + ctr->bltmp_pos, in, left);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/drbg_ctr.c:149:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctr->bltmp + ctr->bltmp_pos, in, inlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/drbg_ctr.c:257:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctr->V + 8, ctr->V, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/drbg_ctr.c:258:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctr->V, ctr->K + 24, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/drbg_ctr.c:337:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(out, ctr->K, outlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/drbg_ctr.c:404:31:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        static const unsigned char df_key[32] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/drbg_lib.c:1040:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char dummy[1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_egd.c:54:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char sun_path[108];         /* path name (gag) */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_egd.c:65:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tempbuf[255];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_lib.c:642:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, pool->buffer, pool->len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_lib.c:753:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(pool->buffer + pool->len, buffer, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_local.h:145:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char K[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_local.h:146:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char V[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_local.h:148:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char bltmp[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_local.h:150:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char KX[48];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_unix.c:449:29:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                kernel[0] = atoi(un.release);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_unix.c:451:45:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                kernel[1] = p == NULL ? 0 : atoi(p + 1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_unix.c:459:23:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            if ((fd = open(DEVRANDOM_WAIT, O_RDONLY)) != -1) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_unix.c:529:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    if ((rd->fd = open(random_device_paths[n], O_RDONLY)) == -1)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_vms.c:461:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buf[100];           /* That should be enough */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_vms.c:536:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buffer[256];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:34:11:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#  define open    _open
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:65:60:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        (__FILE_ptr32 (*)(const char *, const char *, ...))fopen;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:86:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[RAND_LOAD_BUF_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:176:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[RAND_BUF_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:203:18:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        int fd = open(file, O_WRONLY | O_CREAT | O_BINARY, 0600);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rc2/rc2_skey.c:13:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char key_table[256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rc2/rc2ofb64.c:25:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char d[8];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rc5/rc5ofb64.c:25:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char d[8];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ripemd/rmd_one.c:18:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[RIPEMD160_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_meth.c:45:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ret, meth, sizeof(*meth));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_none.c:27:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(to, from, (unsigned int)flen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_none.c:41:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(to + tlen - flen, from, flen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_oaep.c:50:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char seedmask[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_oaep.c:80:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(db + emlen - flen - mdlen, from, (unsigned int)flen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_oaep.c:277:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cnt[4];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_oaep.c:279:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_oaep.c:304:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(mask + outlen, md, len - outlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_ossl.c:485:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(to, buf, (r = j));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_ossl.c:581:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(to, buf, (r = i));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_pk1.c:40:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(p, from, (unsigned int)flen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_pk1.c:112:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(to, p, (unsigned int)j);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_pk1.c:150:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(p, from, (unsigned int)flen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_pmeth.c:157:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(rctx->tbuf, tbs, tbslen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_pmeth.c:219:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(rout, rctx->tbuf, ret);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_pmeth.c:630:23:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            saltlen = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_pmeth.c:635:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        int nbits = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_pmeth.c:653:23:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        int nprimes = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_pmeth.c:674:27:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            int saltlen = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_pss.c:42:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char H_[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_sign.c:160:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(rm, decrypt_buf, SSL_SIG_LENGTH);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_sign.c:180:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(rm, decrypt_buf + 2, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_sign.c:226:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(rm, m, m_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_ssl.c:52:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(p, from, (unsigned int)flen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_x931.c:47:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(p, from, (unsigned int)flen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rsa/rsa_x931.c:93:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(to, p, (unsigned int)j);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/s390x_arch.h:33:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void s390x_flip_endian32(unsigned char dst[32], const unsigned char src[32]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/s390x_arch.h:33:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void s390x_flip_endian32(unsigned char dst[32], const unsigned char src[32]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/s390x_arch.h:34:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void s390x_flip_endian64(unsigned char dst[64], const unsigned char src[64]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/s390x_arch.h:34:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void s390x_flip_endian64(unsigned char dst[64], const unsigned char src[64]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/s390xcap.c:47:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(cap, &NAME, sizeof(*cap));				\
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/s390xcap.c:637:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *tok_begin, *tok_end, *buff, tok[S390X_STFLE_MAX][LEN + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed.c:326:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char SEED_Sbox[2][256] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed.c:440:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_set_key(const unsigned char rawkey[SEED_KEY_LENGTH],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed.c:499:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_encrypt(const unsigned char s[SEED_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed.c:500:28:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                  unsigned char d[SEED_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed.c:544:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_decrypt(const unsigned char s[SEED_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed.c:545:28:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                  unsigned char d[SEED_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed_cbc.c:13:38:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_cbc_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed_cbc.c:13:57:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_cbc_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed_cbc.c:15:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                      unsigned char ivec[SEED_BLOCK_SIZE], int enc)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed_cfb.c:13:41:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_cfb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed_cfb.c:13:60:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_cfb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed_cfb.c:15:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                         unsigned char ivec[SEED_BLOCK_SIZE], int *num,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed_ofb.c:13:41:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_ofb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed_ofb.c:13:60:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_ofb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/seed/seed_ofb.c:15:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                         unsigned char ivec[SEED_BLOCK_SIZE], int *num)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/keccak1600.c:72:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char rhotates[5][5] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/keccak1600.c:1154:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char test[168] = { '\xf3', '\x3' };
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/keccak1600.c:1155:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[512];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/keccak1600.c:1157:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const unsigned char result[512] = {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/sha1_one.c:18:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/sha256.c:52:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[SHA224_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/sha256.c:66:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[SHA256_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/sha512.c:284:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(p + c->num, data, len), c->num += (unsigned int)len;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/sha512.c:287:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(p + c->num, data, n), c->num = 0;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/sha512.c:297:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(p, data, sizeof(c->u)),
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/sha512.c:307:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, data, len), c->num = (int)len;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/sha512.c:329:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[SHA384_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sha/sha512.c:343:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[SHA512_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/siphash/siphash.c:163:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&ctx->leavings[ctx->len], in, inlen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/siphash/siphash.c:169:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&ctx->leavings[ctx->len], in, available);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/siphash/siphash.c:193:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ctx->leavings, end, left);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/siphash/siphash_ameth.c:84:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(priv, ASN1_STRING_get0_data(os), ASN1_STRING_length(os));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/siphash/siphash_local.h:22:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char leavings[SIPHASH_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/siphash/siphash_pmeth.c:68:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&dctx->ctx, &sctx->ctx, sizeof(SIPHASH));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/siphash/siphash_pmeth.c:162:28:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        size_t hash_size = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sm2/sm2_pmeth.c:79:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(dctx->id, sctx->id, sctx->id_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sm2/sm2_pmeth.c:203:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(tmp_id, p2, p1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/sm2/sm2_pmeth.c:216:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p2, smctx->id, smctx->id_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_lib.c:25:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char digest[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_lib.c:122:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char dig[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_vfy.c:134:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char pad[2] = {0, 0};
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_vfy.c:222:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp[MAX_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_vfy.c:306:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp[MAX_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_vfy.c:532:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char digv[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_vfy.c:533:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char digs[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_vfy.c:588:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp[MAX_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_vfy.c:589:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp2[MAX_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_vfy.c:686:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp2[MAX_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/stack/stack.c:66:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ret->data, sk->data, sizeof(void *) * sk->num);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:217:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char tpass[PEM_BUFSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:332:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char kbuf[PEM_BUFSIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:725:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char search_name[9];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:862:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                char errbuf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:873:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char peekbuf[4096] = { 0, };
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:1261:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                    char errbuf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/store_lib.c:45:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char scheme_copy[256], *p, *schemes[2];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/store_lib.c:78:34:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            loader_ctx = loader->open(loader, uri, ui_method, ui_data);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/store_lib.c:527:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buf1[20], buf2[20];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/store_local.h:104:24:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    OSSL_STORE_open_fn open;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_conf.c:391:24:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                secs = atoi(val->value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_conf.c:394:26:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                millis = atoi(val->value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_conf.c:397:26:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                micros = atoi(val->value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_lib.c:40:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char obj_txt[128];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_sign.c:768:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cert_sha1[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_sign.c:901:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hash[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_sign.c:992:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char genTime_str[17 + TS_MAX_CLOCK_PRECISION_DIGITS];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_verify.c:98:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[4096];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_verify.c:287:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cert_sha1[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_verify.c:317:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cert_digest[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_verify.c:478:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char failure_text[TS_STATUS_BUF_SIZE] = "";
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_verify.c:509:9:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
        strcpy(failure_text, "unspecified");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_verify.c:575:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buffer[4096];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_verify_ctx.c:131:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ret->imprint, ASN1_STRING_get0_data(msg), ret->imprint_len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_lib.c:895:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char number1[DECIMAL_SIZE(uis->_.string_data.result_minsize) + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_lib.c:896:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char number2[DECIMAL_SIZE(uis->_.string_data.result_maxsize) + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_lib.c:924:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(uis->result_buf, result, len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:268:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[SIZE + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:284:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char result[BUFSIZ];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:386:20:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    if ((tty_out = fopen("conout$", "w")) == NULL)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:393:23:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        if ((tty_in = fopen("conin$", "r")) == NULL)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:402:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    if ((tty_in = fopen(DEV_TTY, "r")) == NULL)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:404:20:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    if ((tty_out = fopen(DEV_TTY, "w")) == NULL)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:452:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                char tmp_num[10];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:466:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char tmp_num[12];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:487:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&(tty_new), &(tty_orig), sizeof(tty_orig));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:503:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char tmp_num[2][12];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:529:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&(tty_new), &(tty_orig), sizeof(tty_orig));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:541:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char tmp_num[2][12];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:572:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char tmp_num[12];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_util.c:22:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buff[BUFSIZ];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_util.c:108:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char result[PEM_BUFSIZE + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/whrlpool/wp_block.c:506:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(K.q, L, 64);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/whrlpool/wp_block.c:513:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(S.q, L, 64);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/whrlpool/wp_block.c:522:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(S.c, p, 64);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/whrlpool/wp_dgst.c:121:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(c->data + byteoff, inp, bitrem);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/whrlpool/wp_dgst.c:126:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(c->data + byteoff, inp, bits / 8);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/whrlpool/wp_dgst.c:240:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(md, c->H.c, WHIRLPOOL_DIGEST_LENGTH);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/whrlpool/wp_dgst.c:250:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char m[WHIRLPOOL_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/t_x509.c:227:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char SHA1md[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/t_x509.c:329:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char oidstr[80], first;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_cmp.c:36:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_cmp.c:189:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_cmp.c:213:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_obj.c:33:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const char hex[17] = "0123456789ABCDEF";
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_obj.c:35:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmp_buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_obj.c:37:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ebcdic_buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_obj.c:135:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, s, (unsigned int)l1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_vfy.c:2566:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char mdbuf[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_vpm.c:442:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ipout[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509name.c:44:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf, data->data, i);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x_all.c:370:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(md, data->sha1_hash, sizeof(data->sha1_hash));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x_all.c:385:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(md, data->sha1_hash, sizeof(data->sha1_hash));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x_name.c:178:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(nm.x->bytes->data, q, p - q);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x_name.c:225:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(*out, a->bytes->data, ret);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:106:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(addr, bs->data, bs->length);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:131:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char addr[ADDR_RAW_BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:279:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char addr_a[ADDR_RAW_BUF_LEN], addr_b[ADDR_RAW_BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:486:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[3];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:684:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char a_min[ADDR_RAW_BUF_LEN], a_max[ADDR_RAW_BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:685:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char b_min[ADDR_RAW_BUF_LEN], b_max[ADDR_RAW_BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:807:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char a_min[ADDR_RAW_BUF_LEN], a_max[ADDR_RAW_BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:808:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char b_min[ADDR_RAW_BUF_LEN], b_max[ADDR_RAW_BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:852:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char a_min[ADDR_RAW_BUF_LEN], a_max[ADDR_RAW_BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:904:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char min[ADDR_RAW_BUF_LEN], max[ADDR_RAW_BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:1095:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char p_min[ADDR_RAW_BUF_LEN], p_max[ADDR_RAW_BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_addr.c:1096:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char c_min[ADDR_RAW_BUF_LEN], c_max[ADDR_RAW_BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_admis.c:89:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char objbuf[128];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_admis.c:189:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                    char objbuf[128];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_alt.c:82:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char oline[256], htmp[5];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_extku.c:60:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char obj_tmp[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_ia5.c:38:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp, ia5->data, ia5->length);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_info.c:67:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char objtmp[80], *ntmp;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_pci.c:142:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(&(*policy)->data[(*policy)->length],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_pci.c:161:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char buf[2048];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_pci.c:189:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(&(*policy)->data[(*policy)->length], buf, n);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_pci.c:206:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(&(*policy)->data[(*policy)->length],
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_pmaps.c:53:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char obj_tmp1[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_pmaps.c:54:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char obj_tmp2[80];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_skey.c:62:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char pkey_dig[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:947:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ipout[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:965:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ipout[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:989:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ipout[32];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:1060:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp[16];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:1119:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(v6, v6stat.tmp, v6stat.zero_pos);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:1124:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(v6 + v6stat.zero_pos + 16 - v6stat.total,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:1128:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(v6, v6stat.tmp, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/demos/bio/client-arg.c:18:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmpbuf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/demos/bio/client-conf.c:19:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmpbuf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/demos/bio/saccept.c:54:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[512];
/home/capstone/Desktop/root/openssl-1.1.1f/demos/bio/sconnect.c:35:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1024 * 10], *p;
/home/capstone/Desktop/root/openssl-1.1.1f/demos/bio/server-arg.c:29:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[512];
/home/capstone/Desktop/root/openssl-1.1.1f/demos/bio/server-cmod.c:24:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[512];
/home/capstone/Desktop/root/openssl-1.1.1f/demos/bio/server-conf.c:35:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[512];
/home/capstone/Desktop/root/openssl-1.1.1f/demos/evp/aesccm.c:54:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char outbuf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/demos/evp/aesccm.c:91:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char outbuf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/demos/evp/aesgcm.c:54:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char outbuf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/demos/evp/aesgcm.c:86:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char outbuf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/demos/pkcs12/pkread.c:63:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    if ((fp = fopen(argv[1], "rb")) == NULL) {
/home/capstone/Desktop/root/openssl-1.1.1f/demos/pkcs12/pkread.c:81:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    if ((fp = fopen(argv[3], "w")) == NULL) {
/home/capstone/Desktop/root/openssl-1.1.1f/demos/pkcs12/pkwrite.c:30:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    if ((fp = fopen(argv[1], "r")) == NULL) {
/home/capstone/Desktop/root/openssl-1.1.1f/demos/pkcs12/pkwrite.c:44:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    if ((fp = fopen(argv[4], "wb")) == NULL) {
/home/capstone/Desktop/root/openssl-1.1.1f/e_os.h:312:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#   define open _open
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.c:332:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(CMSG_DATA(cmsg), &op, ALG_OP_LEN);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.c:345:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(aiv->iv, iv, len);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.c:417:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char cbuf[CMSG_SPACE(ALG_IV_LEN(ALG_AES_IV_LEN)) + CMSG_SPACE(ALG_OP_LEN)];
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.c:570:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char nxtiv[ALG_AES_IV_LEN] = { 0 };
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.c:590:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(nxtiv, in + (inl - ALG_AES_IV_LEN), ALG_AES_IV_LEN);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.c:607:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), out + (inl - ALG_AES_IV_LEN),
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.c:610:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), nxtiv, ALG_AES_IV_LEN);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.c:782:19:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        kver[i] = atoi(str);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:665:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char magstr[10];
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:711:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char magstr[10];
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:758:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char algstr[10];
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:865:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char algstr[10];
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:947:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char errstr[10];
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:972:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(to, tmpbuf, (flen = (int)dlen));
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:1000:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char csigbuf[40];
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:1101:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char errstr[10];
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:1204:21:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
        if ((clen = MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1,
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:1207:13:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
            MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1, (WCHAR *)cspname,
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:1569:24:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
            if ((len = MultiByteToWideChar(CP_ACP, 0, id, -1, NULL, 0)) &&
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:1571:18:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
                 MultiByteToWideChar(CP_ACP, 0, id, -1, contname, len)) &&
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:1572:24:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
                (len = MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1,
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:1575:18:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
                 MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1,
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:1640:20:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
        if ((len = MultiByteToWideChar(CP_ACP, 0, pname, -1, NULL, 0))) {
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:1642:13:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
            MultiByteToWideChar(CP_ACP, 0, pname, -1, (WCHAR *)name, len);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_dasync.c:141:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tlsaad[SSL_MAX_PIPELINES][EVP_AEAD_TLS1_AAD_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_dasync.c:607:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(pipe_ctx->tlsaad[pipe_ctx->aadctr], ptr,
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_ossltest.c:603:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(tmpbuf, in, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_ossltest.c:610:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, tmpbuf, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_ossltest.c:634:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(tmpbuf, in, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_ossltest.c:641:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, tmpbuf, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_padlock.c:83:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char padlock_name[100];
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_padlock.c:184:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[AES_BLOCK_SIZE]; /* Initialization vector */
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_padlock.c:312:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cdata->iv, EVP_CIPHER_CTX_iv(ctx), AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_padlock.c:314:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), cdata->iv, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_padlock.c:348:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cdata->iv, EVP_CIPHER_CTX_iv(ctx), AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_padlock.c:384:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), cdata->iv, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_padlock.c:416:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cdata->iv, EVP_CIPHER_CTX_iv(ctx), AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_padlock.c:439:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(EVP_CIPHER_CTX_iv_noconst(ctx), cdata->iv, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_padlock.c:449:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ctx->iv, ivec, AES_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_padlock.c:623:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(cdata->ks.rd_key, key, AES_KEY_SIZE_128);
/home/capstone/Desktop/root/openssl-1.1.1f/fuzz/server.c:623:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char early_buf[16384];
/home/capstone/Desktop/root/openssl-1.1.1f/fuzz/test-corpus.c:48:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    f = fopen(pathname, "rb");
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/aria.h:29:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char c[ARIA_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/aria.h:33:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef unsigned char ARIA_c128[ARIA_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/chacha.h:26:30:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/chacha.h:26:56:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void ChaCha20_ctr32(unsigned char *out, const unsigned char *inp,
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/evp.h:385:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char pubkey[MAX_KEYLEN];
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/md32_common.h:150:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(p + n, data, HASH_CBLOCK - n);
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/md32_common.h:164:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(p + n, data, len);
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/md32_common.h:181:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, data, len);
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/poly1305.h:19:50:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void Poly1305_Init(POLY1305 *ctx, const unsigned char key[32]);
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/poly1305.h:21:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void Poly1305_Final(POLY1305 *ctx, unsigned char mac[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/x509.h:107:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sha1_hash[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/include/crypto/x509.h:182:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sha1_hash[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/camellia.h:72:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/camellia.h:72:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/camellia.h:74:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[CAMELLIA_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/camellia.h:75:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ecount_buf[CAMELLIA_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/des.h:28:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef unsigned char DES_cblock[8];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/des.h:29:30:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef /* const */ unsigned char const_DES_cblock[8];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/ebcdic.h:25:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
extern const unsigned char os_toascii[256];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/ebcdic.h:26:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
extern const unsigned char os_toebcdic[256];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/err.h:46:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *err_data[ERR_NUM_ERRORS];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/err.h:48:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const char *err_file[ERR_NUM_ERRORS];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/evp.h:398:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/md2.h:28:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[MD2_BLOCK];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/mdc2.h:27:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[MDC2_BLOCK];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:18:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef void (*block128_f) (const unsigned char in[16],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:19:38:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                            unsigned char out[16], const void *key);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:21:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef void (*cbc128_f) (const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:21:61:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef void (*cbc128_f) (const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:23:36:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          unsigned char ivec[16], int enc);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:25:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef void (*ctr128_f) (const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:25:61:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef void (*ctr128_f) (const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:27:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          const unsigned char ivec[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:29:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef void (*ccm128_f) (const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:29:61:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef void (*ccm128_f) (const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:31:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          const unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:32:36:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          unsigned char cmac[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:34:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cbc128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:34:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cbc128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:36:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ivec[16], block128_f block);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:37:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cbc128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:37:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cbc128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:39:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ivec[16], block128_f block);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:41:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ctr128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:41:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ctr128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:43:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:44:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ecount_buf[16], unsigned int *num,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:47:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ctr128_encrypt_ctr32(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:47:68:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ctr128_encrypt_ctr32(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:49:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                 unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:50:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                 unsigned char ecount_buf[16],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:53:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ofb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:53:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_ofb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:55:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ivec[16], int *num,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:58:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:58:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:60:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char ivec[16], int *num,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:62:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_8_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:62:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_8_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:64:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[16], int *num,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:66:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_1_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:66:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void CRYPTO_cfb128_1_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:68:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[16], int *num,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:71:51:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_encrypt_block(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:72:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                   unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:73:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                   const void *key, unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:75:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:75:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:77:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[16], cbc128_f cbc);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:78:51:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_decrypt_block(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:79:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                   unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:80:62:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                   const void *key, unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:82:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:82:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_cts128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:84:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[16], cbc128_f cbc);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:86:55:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_encrypt_block(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:87:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                       unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:89:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                       unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:91:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:91:68:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:93:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                 unsigned char ivec[16], cbc128_f cbc);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:94:55:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_decrypt_block(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:95:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                       unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:97:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                       unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:99:49:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:99:68:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
size_t CRYPTO_nistcts128_decrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:101:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                 unsigned char ivec[16], cbc128_f cbc);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:152:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          const unsigned char iv[16],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:175:42:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef void (*ocb128_f) (const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:175:61:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef void (*ocb128_f) (const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:178:36:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          unsigned char offset_i[16],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/modes.h:180:36:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          unsigned char checksum[16]);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:68:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_set_key(const unsigned char rawkey[SEED_KEY_LENGTH],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:71:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_encrypt(const unsigned char s[SEED_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:72:28:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                  unsigned char d[SEED_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:74:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_decrypt(const unsigned char s[SEED_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:75:28:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                  unsigned char d[SEED_BLOCK_SIZE],
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:80:38:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_cbc_encrypt(const unsigned char *in, unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:80:57:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_cbc_encrypt(const unsigned char *in, unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:82:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                      unsigned char ivec[SEED_BLOCK_SIZE], int enc);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:83:41:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_cfb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:83:60:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_cfb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:85:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                         unsigned char ivec[SEED_BLOCK_SIZE], int *num,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:87:41:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_ofb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:87:60:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
void SEED_ofb128_encrypt(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/seed.h:89:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                         unsigned char ivec[SEED_BLOCK_SIZE], int *num);
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/sha.h:100:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char p[SHA512_CBLOCK];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/whrlpool.h:28:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char c[WHIRLPOOL_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/whrlpool.h:32:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[WHIRLPOOL_BBLOCK / 8];
/home/capstone/Desktop/root/openssl-1.1.1f/ms/applink.c:115:47:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        OPENSSL_ApplinkTable[APPLINK_FOPEN] = fopen;
/home/capstone/Desktop/root/openssl-1.1.1f/ms/uplink.c:26:8:  [2] (buffer) TCHAR:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static TCHAR msg[128];
/home/capstone/Desktop/root/openssl-1.1.1f/ms/uplink.c:60:9:  [2] (buffer) _tcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. Risk is low because the source is a constant string.
        _tcscpy(msg + len, _T("unimplemented function"));
/home/capstone/Desktop/root/openssl-1.1.1f/ms/uplink.c:65:17:  [2] (buffer) _tcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. Risk is low because the source is a constant string.
                _tcscpy(msg + len, _T("no host application"));
/home/capstone/Desktop/root/openssl-1.1.1f/ms/uplink.c:79:17:  [2] (buffer) _tcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. Risk is low because the source is a constant string.
                _tcscpy(msg + len, _T("no OPENSSL_Applink"));
/home/capstone/Desktop/root/openssl-1.1.1f/ms/uplink.c:85:17:  [2] (buffer) _tcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. Risk is low because the source is a constant string.
                _tcscpy(msg + len, _T("no ApplinkTable"));
/home/capstone/Desktop/root/openssl-1.1.1f/ms/uplink.h:19:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
#define UP_fgets  (*(char *(*)(char *,int,void *))OPENSSL_UplinkTable[APPLINK_FGETS])
/home/capstone/Desktop/root/openssl-1.1.1f/ms/uplink.h:19:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
#define UP_fgets  (*(char *(*)(char *,int,void *))OPENSSL_UplinkTable[APPLINK_FGETS])
/home/capstone/Desktop/root/openssl-1.1.1f/ms/uplink.h:26:38:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
#define UP_fopen  (*(void *(*)(const char *,const char *))OPENSSL_UplinkTable[APPLINK_FOPEN])
/home/capstone/Desktop/root/openssl-1.1.1f/ms/uplink.h:26:51:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
#define UP_fopen  (*(void *(*)(const char *,const char *))OPENSSL_UplinkTable[APPLINK_FOPEN])
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/d1_lib.c:307:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(timeleft, &(s->d1->next_timeout), sizeof(struct timeval));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/d1_lib.c:449:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cookie[DTLS1_COOKIE_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/d1_lib.c:450:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char seq[SEQ_NUM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/d1_lib.c:776:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&wbuf[DTLS1_RT_HEADER_LENGTH + 1],
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/d1_msg.c:40:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[DTLS1_AL_HEADER_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/packet.c:372:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dest, src, len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/packet_local.h:366:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(data, pkt->curr, len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/packet_local.h:402:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dest, pkt->curr, pkt->remaining);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/dtls1_bitmap.c:72:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(bitmap->max_seq_num, seq, SEQ_NUM_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:101:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(rl->d->curr_write_sequence,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:106:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(rl->d->last_write_sequence,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:116:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(rl->write_sequence, seq, SEQ_NUM_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:130:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&s->rlayer.rbuf, &(rdata->rbuf), sizeof(SSL3_BUFFER));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:131:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&s->rlayer.rrec, &(rdata->rrec), sizeof(SSL3_RECORD));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:134:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&(s->rlayer.read_sequence[2]), &(rdata->packet[5]), 6);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:160:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&(rdata->rbuf), &s->rlayer.rbuf, sizeof(SSL3_BUFFER));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:161:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&(rdata->rrec), &s->rlayer.rrec, sizeof(SSL3_RECORD));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:512:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(buf, &(SSL3_RECORD_get_data(rr)[SSL3_RECORD_get_off(rr)]), n);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:607:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char tmp[16];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:913:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(SSL3_RECORD_get_data(&wr), SSL3_RECORD_get_input(&wr),
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:966:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(pseq, &(s->rlayer.write_sequence[2]), 6);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_d1.c:1053:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->rlayer.d->last_write_sequence, seq,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_s3.c:427:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char aad[13];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_s3.c:481:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(aad, s->rlayer.write_sequence, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_s3.c:1411:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(buf, &(rr->data[rr->off]), n);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_s3.c:1539:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char tmp[16];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/rec_layer_s3.c:1629:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(dest + *dest_len,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/record.h:68:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char seq_num[SEQ_NUM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/record.h:75:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char max_seq_num[SEQ_NUM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/record.h:115:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char last_write_sequence[8];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/record.h:116:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char curr_write_sequence[8];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/record.h:152:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char handshake_fragment[4];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/record.h:163:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char read_sequence[SEQ_NUM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/record.h:164:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char write_sequence[SEQ_NUM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_buffer.c:16:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(b->buf, d, n);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:16:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char ssl3_pad_1[48] = {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:25:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char ssl3_pad_2[48] = {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:62:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r->seq_num, seq_num, SEQ_NUM_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:182:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:582:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char mac_tmp[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:941:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[SSL_MAX_PIPELINES][EVP_AEAD_TLS1_AAD_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1042:30:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                    unsigned char dtlsseq[9], *p = dtlsseq;
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1046:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(p, &seq[2], 6);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1047:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(buf[ctr], dtlsseq, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1049:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(buf[ctr], seq, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1099:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char *data[SSL_MAX_PIPELINES];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1226:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char header[75];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1228:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(header + j, mac_sec, md_size);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1230:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(header + j, ssl3_pad_1, npad);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1232:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(header + j, seq, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1287:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char header[13];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1318:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char dtlsseq[8], *p = dtlsseq;
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1322:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, &seq[2], 6);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1324:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(header, dtlsseq, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1326:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(header, seq, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1533:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char rotated_mac_buf[64 + EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1536:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char rotated_mac[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1585:29:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        ((volatile unsigned char *)rotated_mac)[rotate_offset ^ 32];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1612:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1702:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char mac_tmp[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record.c:1897:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(RECORD_LAYER_get_read_sequence(&s->rlayer)[2]), p, 6);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record_tls13.c:28:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[EVP_MAX_IV_LENGTH], recheader[SSL3_RT_HEADER_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/ssl3_record_tls13.c:134:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, staticiv, offset);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:129:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           unsigned char *md_out,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:131:43:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                           const unsigned char header[13],
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:140:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char c[sizeof(LARGEST_DIGEST_CTX)];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:149:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char length_bytes[MAX_HASH_BIT_COUNT_BYTES];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:151:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hmac_pad[MAX_HASH_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:152:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char first_block[MAX_HASH_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:153:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char mac_out[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:339:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(hmac_pad, mac_secret, mac_secret_length);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:379:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(first_block, header + md_block_size, overhang);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:380:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(first_block + overhang, data, md_block_size - overhang);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:386:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(first_block, header, 13);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:387:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(first_block + 13, data, md_block_size - 13);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_cbc.c:404:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char block[MAX_HASH_BLOCK_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_enc.c:21:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[16], smd[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_enc.c:71:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(km, smd, (num - i));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_enc.c:231:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(mac_secret, ms, i);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_enc.c:470:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const unsigned char *salt[3] = {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_enc.c:481:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_enc.c:495:47:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                strlen((const char *)salt[i])) <= 0
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_lib.c:3849:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(keys, ctx->ext.tick_key_name,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_lib.c:3851:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(keys + sizeof(ctx->ext.tick_key_name),
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_lib.c:3854:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(keys + sizeof(ctx->ext.tick_key_name) +
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_lib.c:4597:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(result + len - sizeof(tls12downgrade), tls12downgrade,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_lib.c:4600:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(result + len - sizeof(tls11downgrade), tls11downgrade,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_lib.c:4634:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(t, pms, pmslen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_lib.c:4637:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(t, s->s3->tmp.psk, psklen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_asn1.c:110:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cipher_data[2];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_asn1.c:234:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dst, src->data, src->length);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_cert.c:130:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ret->pkeys[i].serverinfo,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_cert.c:141:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ret->conf_sigalgs, cert->conf_sigalgs,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_cert.c:152:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ret->client_sigalgs, cert->client_sigalgs,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_cert.c:721:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_ciph.c:1282:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char name[80];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_ciph.c:1289:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(name, elem, len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_conf.c:88:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *cert_filename[SSL_PKEY_NUM];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_conf.c:559:22:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    int block_size = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_conf.c:578:23:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    int num_tickets = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:352:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(t->data, data, dlen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:805:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->ext.alpn, s->ctx->ext.alpn, s->ctx->ext.alpn_len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:881:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ctx->sid_ctx, sid_ctx, sid_ctx_len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:895:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ssl->sid_ctx, sid_ctx, sid_ctx_len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:933:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r.session_id, id, id_len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:1414:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(buf, s->s3->tmp.finish_md, count);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:1428:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(buf, s->s3->tmp.peer_finish_md, count);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:2922:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp_storage[4];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:2926:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(tmp_storage, a->session_id, a->session_id_length);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:4174:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, ssl->s3->client_random, outlen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:4184:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, ssl->s3->server_random, outlen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:4195:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, session->master_key, outlen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:4205:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(sess->master_key, in, len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:5245:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(cursor, "%02x", parameter_1[i]);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:5251:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(cursor, "%02x", parameter_2[i]);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:5389:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cipher[SSLV2_CIPHER_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:512:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char early_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:517:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char master_key[TLS13_MAX_RESUMPTION_PSK_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:520:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char session_id[SSL_MAX_SSL_SESSION_ID_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:527:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sid_ctx[SSL_MAX_SID_CTX_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:676:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char random[SSL3_RANDOM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:678:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char session_id[SSL_MAX_SSL_SESSION_ID_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:680:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char dtls_cookie[DTLS1_COOKIE_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:683:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char compressions[MAX_COMPRESSIONS_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:732:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tick_hmac_key[TLSEXT_TICK_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:733:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tick_aes_key[TLSEXT_TICK_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:876:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sid_ctx[SSL_MAX_SID_CTX_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:931:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char tick_key_name[TLSEXT_KEYNAME_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1001:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char cookie_hmac_key[SHA256_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1146:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char early_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1147:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char handshake_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1148:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char master_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1149:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char resumption_master_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1150:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char client_finished_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1151:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char server_finished_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1152:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char server_finished_hash[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1153:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char handshake_traffic_hash[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1154:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char client_app_traffic_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1155:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char server_app_traffic_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1156:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char exporter_master_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1157:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char early_exporter_master_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1159:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char read_iv[EVP_MAX_IV_LENGTH]; /* TLSv1.3 static read IV */
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1164:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char write_iv[EVP_MAX_IV_LENGTH]; /* TLSv1.3 static write IV */
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1175:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cert_verify_hash[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1187:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sid_ctx[SSL_MAX_SID_CTX_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1200:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp_session_id[SSL_MAX_SSL_SESSION_ID_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1534:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char read_mac_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1536:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char write_mac_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1537:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char server_random[SSL3_RANDOM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1538:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char client_random[SSL3_RANDOM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1562:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char send_alert[2];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1573:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char finish_md[EVP_MAX_MD_SIZE * 2];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1575:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char peer_finish_md[EVP_MAX_MD_SIZE * 2];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1654:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char previous_client_finished[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1656:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char previous_server_finished[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1755:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char priority[8];  /* 64-bit value in big-endian encoding */
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:1775:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cookie[DTLS1_COOKIE_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:2071:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
extern const unsigned char tls11downgrade[8];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:2072:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
extern const unsigned char tls12downgrade[8];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:2624:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                  unsigned char *md_out,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_local.h:2626:50:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                  const unsigned char header[13],
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_rsa.c:886:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ctx->cert->key->serverinfo, serverinfo, serverinfo_length);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_rsa.c:1015:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(serverinfo + serverinfo_length + contextoff,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_sess.c:114:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dest, src, sizeof(*dest));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_sess.c:406:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ss->sid_ctx, s->sid_ctx, s->sid_ctx_length);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_sess.c:432:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(data.session_id, sess_id, sess_id_len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_sess.c:820:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->session_id, sid, sid_len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_sess.c:965:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->sid_ctx, sid_ctx, sid_ctx_len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_sess.c:1033:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(s->ext.session_ticket->data, ext_data, ext_len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions.c:1448:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hash[EVP_MAX_MD_SIZE], binderkey[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions.c:1449:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char finishedkey[EVP_MAX_MD_SIZE], tmpbinder[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_clnt.c:243:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->session->ext.tick,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_clnt.c:738:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char identity[PSK_MAX_IDENTITY_LEN + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_clnt.c:761:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char psk[PSK_MAX_PSK_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_clnt.c:1600:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(s->ext.npn, selected, selected_len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_clnt.c:1989:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->early_secret, s->psksession->early_secret, EVP_MAX_MD_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_srvr.c:741:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hmac[SHA256_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_srvr.c:742:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hrr[MAX_HRR_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_srvr.c:1099:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char pskdata[PSK_MAX_PSK_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_srvr.c:1163:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(sess->sid_ctx, s->sid_ctx, s->sid_ctx_length);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_srvr.c:1901:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char cryptopro_ext[36] = {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:1217:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(s->tmp_session_id, s->session->session_id, sess_id_len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:1629:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy(s->session->session_id, PACKET_data(&session_id),
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:1699:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char sctpauthkey[64];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:1700:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char labelbuffer[sizeof(DTLS1_SCTP_AUTH_LABEL)];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:1707:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(labelbuffer, DTLS1_SCTP_AUTH_LABEL,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:2885:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char identity[PSK_MAX_IDENTITY_LEN + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:2887:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char psk[PSK_MAX_PSK_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:3174:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char shared_ukm[32], tmp[256];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:3395:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char sctpauthkey[64];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:3396:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char labelbuffer[sizeof(DTLS1_SCTP_AUTH_LABEL)];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:3403:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(labelbuffer, DTLS1_SCTP_AUTH_LABEL,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:510:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&p[frag->msg_header.frag_off], frag->fragment,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:536:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char seq64be[8];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:558:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(frag->msg_header), msg_hdr, sizeof(*msg_hdr));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:576:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char devnull[256];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:645:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char seq64be[8];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:673:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char devnull[256];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:697:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&(frag->msg_header), msg_hdr, sizeof(*msg_hdr));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:739:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char wire[DTLS1_HM_HEADER_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:776:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->init_buf->data, wire, readbytes);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:1034:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char seq64be[8];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:1047:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(frag->fragment, s->init_buf->data, s->init_num);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:1104:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char seq64be[8];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_dtls.c:1128:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(s->init_buf->data, frag->fragment,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:203:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(tls13tbs + TLS13_TBS_PREAMBLE_SIZE, s->cert_verify_hash,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:239:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tls13tbs[TLS13_TBS_PREAMBLE_SIZE + EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:359:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tls13tbs[TLS13_TBS_PREAMBLE_SIZE + EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:599:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->s3->previous_client_finished, s->s3->tmp.finish_md,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:603:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->s3->previous_server_finished, s->s3->tmp.finish_md,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:825:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->s3->previous_client_finished, s->s3->tmp.peer_finish_md,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:829:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->s3->previous_server_finished, s->s3->tmp.peer_finish_md,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:2185:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hashvaltmp[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:2186:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char msghdr[SSL3_HM_HEADER_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:2365:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tbs, s->s3->client_random, SSL3_RANDOM_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:2366:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tbs + SSL3_RANDOM_SIZE, s->s3->server_random, SSL3_RANDOM_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_lib.c:2368:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tbs + SSL3_RANDOM_SIZE * 2, param, paramlen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:852:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char sctpauthkey[64];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:853:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char labelbuffer[sizeof(DTLS1_SCTP_AUTH_LABEL)];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:860:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(labelbuffer, DTLS1_SCTP_AUTH_LABEL,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:1647:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(s->s3->client_random, clienthello->random, SSL3_RANDOM_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:1848:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->tmp_session_id, s->clienthello->session_id,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:2924:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char psk[PSK_MAX_PSK_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:2991:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char rand_premaster_secret[SSL_MAX_MASTER_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:3344:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char premaster_secret[32];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:3520:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char sctpauthkey[64];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:3521:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char labelbuffer[sizeof(DTLS1_SCTP_AUTH_LABEL)];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:3527:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(labelbuffer, DTLS1_SCTP_AUTH_LABEL,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:3858:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:3859:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key_name[TLSEXT_KEYNAME_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:3968:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(key_name, tctx->ext.tick_key_name,
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:4043:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tick_nonce[TICKET_NONCE_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:4045:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char age_add_c[sizeof(uint32_t)];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_enc.c:252:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(mac_secret, ms, i);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_enc.c:440:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hash[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_enc.c:466:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char hash[EVP_MAX_MD_SIZE * 2];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_enc.c:546:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(val + currentvalpos, (unsigned char *)label, llen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_enc.c:548:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(val + currentvalpos, s->s3->client_random, SSL3_RANDOM_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_enc.c:550:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(val + currentvalpos, s->s3->server_random, SSL3_RANDOM_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_enc.c:559:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(val + currentvalpos, context, contextlen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_lib.c:253:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ctmp[2];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_lib.c:388:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char etmp[20];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_lib.c:395:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(etmp, elem, len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_lib.c:1028:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char sigalgstr[2];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_lib.c:1366:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tick_hmac[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_lib.c:1506:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(sess->session_id, sess_id, sesslen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_lib.c:1595:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sigalgstr[2];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_lib.c:1961:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char etmp[TLS_MAX_SIGSTRING_LEN], *p;
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_lib.c:1969:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(etmp, elem, len);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/t1_lib.c:2045:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(sigalgs, psigs, salglen * sizeof(*sigalgs));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:19:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char default_zeros[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:47:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hkdflabel[sizeof(uint16_t) + sizeof(uint8_t)
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:180:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char preextractsec[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:206:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char hash[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:292:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hash[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:309:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char finsecret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:368:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[EVP_MAX_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:452:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:453:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hashval[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:647:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->server_finished_hash, hashval, hashlen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:650:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->handshake_traffic_hash, hashval, hashlen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:675:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->server_app_traffic_secret, secret, hashlen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:692:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->client_app_traffic_secret, secret, hashlen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:726:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:755:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(insecret, secret, hashlen);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:778:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char exportsecret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:784:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hash[EVP_MAX_MD_SIZE], data[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:825:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char exportsecret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls13_enc.c:826:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hash[EVP_MAX_MD_SIZE], data[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls_srp.c:143:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char b[SSL_MAX_MASTER_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls_srp.c:370:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char rnd[SSL_MAX_MASTER_KEY_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/test/afalgtest.c:55:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char in[BUFFER_SIZE] = "\x53\x69\x6e\x67\x6c\x65\x20\x62"
/home/capstone/Desktop/root/openssl-1.1.1f/test/afalgtest.c:57:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ebuf[BUFFER_SIZE + 32];
/home/capstone/Desktop/root/openssl-1.1.1f/test/afalgtest.c:58:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char dbuf[BUFFER_SIZE + 32];
/home/capstone/Desktop/root/openssl-1.1.1f/test/asn1_encode_test.c:474:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char bytes[1];       /* In reality, there's more */
/home/capstone/Desktop/root/openssl-1.1.1f/test/asn1_encode_test.c:643:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(p, t_true, sizeof(t_true)); /* Marks decoding success */
/home/capstone/Desktop/root/openssl-1.1.1f/test/asn1_encode_test.c:649:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(p, custom_data->bytes1, custom_data->nbytes1);
/home/capstone/Desktop/root/openssl-1.1.1f/test/asn1_encode_test.c:659:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, custom_data->bytes2, custom_data->nbytes2);
/home/capstone/Desktop/root/openssl-1.1.1f/test/asynciotest.c:209:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                    char smallrec[MIN_RECORD_LEN] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/asynciotest.c:297:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[sizeof(testdata)];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:47:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char client_random[SSL3_RANDOM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:48:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char server_random[SSL3_RANDOM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:51:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char session_id[32];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:52:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char master_secret[48];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:53:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cookie[20];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:56:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char key_block[104];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:108:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(session_asn1 + SS_SESSID_OFS, session_id, sizeof(session_id));
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:109:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(session_asn1 + SS_SECRET_OFS, master_secret, sizeof(master_secret));
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:213:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(hello_verify + HV_COOKIE_OFS, cookie, sizeof(cookie));
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:257:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(server_hello + SH_RANDOM_OFS, server_random, sizeof(server_random));
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:258:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(server_hello + SH_SESSID_OFS, session_id, sizeof(session_id));
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:277:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char epoch[2] = { 0x00, 0x01 };
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:278:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char seq[6] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:279:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char ver[2] = { 0x01, 0x00 }; /* DTLS1_BAD_VER */
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:280:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char lenbytes[2];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:283:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:300:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(enc, msg, len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:347:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char finished_msg[DTLS1_HM_HEADER_LENGTH +
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:356:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char handshake_hash[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bad_dtls_test.c:462:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(server_random, &now, sizeof(now));
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:30:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char bf_key[2][30] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:50:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char ecb_data[NUM_TESTS][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:87:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char plain_data[NUM_TESTS][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:124:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cipher_data[NUM_TESTS][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:161:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc_key[16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:165:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc_iv[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:167:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char cbc_data[40] = "7654321 Now is the time for ";
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:168:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc_ok[32] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:190:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char key_test[KEY_TEST_NUM] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:197:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char key_data[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:200:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char key_out[KEY_TEST_NUM][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:298:51:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    BF_set_key(&key, strlen(bf_key[n]), (unsigned char *)bf_key[n]);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:317:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:336:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:349:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_in[40], cbc_out[40], iv[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:365:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, cbc_iv, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:375:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_in[40], cbc_out[40], iv[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:385:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, cbc_iv, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:395:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, cbc_iv, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:407:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_in[40], cbc_out[40], iv[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:417:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, cbc_iv, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:427:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, cbc_iv, 8);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bio_callback_test.c:19:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const char *my_param_argp[MAXCOUNT];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bio_callback_test.c:48:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bio_enc_test.c:42:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char inp[BUF_SIZE] = { 0 };
/home/capstone/Desktop/root/openssl-1.1.1f/test/bio_enc_test.c:43:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[BUF_SIZE], ref[BUF_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bio_memleak_test.c:22:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[100];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bio_memleak_test.c:76:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char data[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bio_memleak_test.c:111:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char data[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bio_memleak_test.c:152:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char data[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bio_memleak_test.c:188:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char data[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bioprinttest.c:133:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char bio_buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bioprinttest.c:162:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char bio_buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bioprinttest.c:192:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char format[80], result[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/bioprinttest.c:246:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/casttest.c:21:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char k[16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/casttest.c:26:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char in[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/casttest.c:31:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char c[3][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/casttest.c:37:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char in_a[16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/casttest.c:42:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char in_b[16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/casttest.c:47:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char c_a[16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/casttest.c:52:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char c_b[16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/casttest.c:61:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/casttest.c:83:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out_a[16], out_b[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/casttest.c:85:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out_a, in_a, sizeof(in_a));
/home/capstone/Desktop/root/openssl-1.1.1f/test/casttest.c:86:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out_b, in_b, sizeof(in_b));
/home/capstone/Desktop/root/openssl-1.1.1f/test/chacha_internal_test.c:162:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[sizeof(ref)];
/home/capstone/Desktop/root/openssl-1.1.1f/test/chacha_internal_test.c:166:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf + i, ref + i, sizeof(ref) - i);
/home/capstone/Desktop/root/openssl-1.1.1f/test/cmsapitest.c:21:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/conf_include_test.c:162:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char max[(sizeof(long) * 8) / 3 + 3];
/home/capstone/Desktop/root/openssl-1.1.1f/test/conf_include_test.c:165:15:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
    p = max + sprintf(max, "0%ld", LONG_MAX) - 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/ct_test.c:225:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char expected_sct_text[CT_TEST_MAX_FILE_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/d2i_test.c:49:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[2048];
/home/capstone/Desktop/root/openssl-1.1.1f/test/danetest.c:155:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:26:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char key_data[NUM_TESTS][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:63:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char plain_data[NUM_TESTS][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:100:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cipher_data[NUM_TESTS][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:137:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cipher_ecb2[NUM_TESTS - 1][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:173:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc_key[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:175:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc2_key[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:177:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc3_key[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:179:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc_iv[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:186:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc_data[40] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:194:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc_ok[32] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:204:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc2_key[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:206:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char xcbc_ok[32] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:213:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char xcbc_ok[32] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:221:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc3_ok[32] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:228:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char pcbc_ok[32] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:235:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cfb_key[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:237:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cfb_iv[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:239:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cfb_buf1[40], cfb_buf2[40], cfb_tmp[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:240:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char plain[24] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:247:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cfb_cipher8[24] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:252:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cfb_cipher16[24] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:257:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cfb_cipher32[24] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:262:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cfb_cipher48[24] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:267:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cfb_cipher64[24] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:272:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char ofb_key[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:274:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char ofb_iv[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:276:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char ofb_buf1[24], ofb_buf2[24], ofb_tmp[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:277:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char ofb_cipher[24] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:283:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cbc_cksum_data[8] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:286:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char *pt(const unsigned char *p, char buf[DATA_BUF_SIZE])
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:286:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char *pt(const unsigned char *p, char buf[DATA_BUF_SIZE])
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:286:41:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char *pt(const unsigned char *p, char buf[DATA_BUF_SIZE])
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:305:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char b1[DATA_BUF_SIZE], b2[DATA_BUF_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:308:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(in, plain_data[i], 8);
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:331:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char b1[DATA_BUF_SIZE], b2[DATA_BUF_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:336:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(in, plain_data[i], 8);
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:357:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_in[40];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:358:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_out[40];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:367:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv3, cbc_iv, sizeof(cbc_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:373:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv3, cbc_iv, sizeof(cbc_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:383:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_in[40];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:384:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_out[40];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:391:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv3, cbc_iv, sizeof(cbc_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:396:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv3, cbc_iv, sizeof(cbc_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:406:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_in[40];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:407:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_out[40];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:419:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv3, cbc_iv, sizeof(cbc_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:428:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv3, cbc_iv, sizeof(cbc_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:436:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_out[40];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:442:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, cbc_iv, sizeof(cbc_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:451:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_out[40];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:457:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, cbc_iv, sizeof(cbc_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:482:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_in[40];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:483:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cbc_out[40];
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:505:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cfb_tmp, cfb_iv, sizeof(cfb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:510:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cfb_tmp, cfb_iv, sizeof(cfb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:546:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cfb_tmp, cfb_iv, sizeof(cfb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:553:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cfb_tmp, cfb_iv, sizeof(cfb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:561:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cfb_tmp, cfb_iv, sizeof(cfb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:568:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cfb_tmp, cfb_iv, sizeof(cfb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:581:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cfb_tmp, cfb_iv, sizeof(cfb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:589:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cfb_tmp, cfb_iv, sizeof(cfb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:603:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ofb_tmp, ofb_iv, sizeof(ofb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:608:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ofb_tmp, ofb_iv, sizeof(ofb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:621:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ofb_tmp, ofb_iv, sizeof(ofb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:630:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ofb_tmp, ofb_iv, sizeof(ofb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:644:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ofb_tmp, ofb_iv, sizeof(ofb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:654:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ofb_tmp, ofb_iv, sizeof(ofb_iv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:665:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cret[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/drbgtest.c:169:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buff[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/test/drbgtest.c:289:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char zero[sizeof(RAND_DRBG)];
/home/capstone/Desktop/root/openssl-1.1.1f/test/drbgtest.c:292:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buff[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/test/drbgtest.c:595:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[32];
/home/capstone/Desktop/root/openssl-1.1.1f/test/drbgtest.c:721:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char rand_add_buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/drbgtest.c:850:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/drbgtest.c:963:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char rand_buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/drbgtest.c:997:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char rand_buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/dsa_no_digest_size_test.c:144:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(paddedData, dataToSign, digestlen);
/home/capstone/Desktop/root/openssl-1.1.1f/test/dsa_no_digest_size_test.c:146:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(paddedData + digestlen - len, dataToSign, len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/dsatest.c:31:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char seed[20] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/dsatest.c:71:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/dsatest.c:73:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sig[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/dtls_mtu_test.c:56:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[600];
/home/capstone/Desktop/root/openssl-1.1.1f/test/dtlstest.c:253:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cookie, dummy_cookie, sizeof(dummy_cookie));
/home/capstone/Desktop/root/openssl-1.1.1f/test/ecdsatest.c:29:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const char *numbers[2];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ecdsatest.c:100:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char digest[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ecdsatest.c:202:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char dirt, offset, tbs[128];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ectest.c:156:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[100];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ectest.c:969:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[100];
/home/capstone/Desktop/root/openssl-1.1.1f/test/enginetest.c:47:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/enginetest.c:144:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(buf, "id%d", loop);
/home/capstone/Desktop/root/openssl-1.1.1f/test/enginetest.c:146:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(buf, "Fake engine type %d", loop);
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:383:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[EVP_MAX_IV_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:386:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ciphertext[32], plaintext[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:848:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:861:24:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        in = (unsigned char *)keys[tst].pub;
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:868:24:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        in = (unsigned char *)keys[tst].priv;
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:1001:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[20];
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:1077:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char key[32] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:1082:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[12] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:1086:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ciphertext[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:1087:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char plaintext[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_test.c:154:17:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    int ncopy = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_test.c:167:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(p, db->buf, db->buflen);
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_test.c:182:17:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    int count = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_test.c:605:14:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        in = memcpy(tmp + out_misalign, in, in_len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_test.c:620:14:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        in = memcpy(tmp + out_misalign + in_len + 2 * EVP_MAX_BLOCK_LENGTH +
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_test.c:750:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char rtag[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_test.c:796:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        static char aux_err[64];
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_test.c:1423:23:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        pdata->iter = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_test.c:1443:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        pdata->id = atoi(value);
/home/capstone/Desktop/root/openssl-1.1.1f/test/fatalerrtest.c:26:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/handshake_helper.c:355:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(*out + 1, protos, len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:30:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:32:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[64];
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:101:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    if (!TEST_str_eq(p, (char *)test[idx].digest))
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:132:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:152:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    if (!TEST_str_eq(p, (char *)test[4].digest))
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:165:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    if (!TEST_str_eq(p, (char *)test[5].digest))
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:173:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    if (!TEST_str_eq(p, (char *)test[6].digest))
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:182:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    if (!TEST_str_eq(p, (char *)test[6].digest))
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:194:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    if (!TEST_str_eq(p, (char *)test[6].digest))
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:211:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    if (!TEST_str_eq(p, (char *)test[4].digest))
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:222:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:238:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    if (!TEST_str_eq(p, (char *)test[7].digest))
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:252:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/hmactest.c:255:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(&(buf[i * 2]), "%02x", md[i]);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ideatest.c:18:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char k[16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/ideatest.c:23:24:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const  unsigned char in[8] = { 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03 };
/home/capstone/Desktop/root/openssl-1.1.1f/test/ideatest.c:24:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char c[8] = { 0x11, 0xFB, 0xED, 0x2B, 0x01, 0x98, 0x6D, 0xE5 };
/home/capstone/Desktop/root/openssl-1.1.1f/test/ideatest.c:26:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char out[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ideatest.c:30:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char cfb_key[16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/ideatest.c:34:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char cfb_iv[80] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/ideatest.c:36:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char cfb_buf1[40], cfb_buf2[40], cfb_tmp[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ideatest.c:38:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char plain[CFB_TEST_SIZE] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/ideatest.c:45:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char cfb_cipher64[CFB_TEST_SIZE] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/ideatest.c:71:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[IDEA_BLOCK];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:25:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char rkey[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:26:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char rkey2[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:27:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char plaintext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:28:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char saved_iv[AES_BLOCK_SIZE * 4];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:33:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char key[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:34:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char iv[32];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:35:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char in[MAX_VECTOR_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:36:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char out[MAX_VECTOR_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:76:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char key1[32];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:77:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char key2[32];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:78:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char iv[64];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:79:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char in[MAX_VECTOR_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:80:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char out[MAX_VECTOR_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:148:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[MAX_VECTOR_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:149:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[AES_BLOCK_SIZE * 2];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:172:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf, v->in, v->length);
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:191:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[MAX_VECTOR_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:221:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[AES_BLOCK_SIZE * 4];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:222:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ciphertext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:223:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char checktext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:239:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[AES_BLOCK_SIZE * 4];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:240:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ciphertext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:241:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char checktext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:261:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[AES_BLOCK_SIZE * 4];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:262:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ciphertext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:263:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char checktext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:287:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[AES_BLOCK_SIZE * 4];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:288:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ciphertext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:289:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char checktext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:325:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[AES_BLOCK_SIZE * 4];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:326:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ciphertext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:327:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char checktext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:346:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[AES_BLOCK_SIZE * 4];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:347:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ciphertext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:348:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char checktext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:377:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[AES_BLOCK_SIZE * 4];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:378:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ciphertext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:379:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char checktext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:408:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[AES_BLOCK_SIZE * 4];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:409:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ciphertext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/igetest.c:410:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char checktext[BIG_TEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/md2test.c:45:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/md2test.c:46:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[MD2_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/test/md2test.c:49:41:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    if (!TEST_true(EVP_Digest((unsigned char *)test[n], strlen(test[n]),
/home/capstone/Desktop/root/openssl-1.1.1f/test/md2test.c:54:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(&(buf[i * 2]), "%02x", md[i]);
/home/capstone/Desktop/root/openssl-1.1.1f/test/mdc2_internal_test.c:21:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char expected[MDC2_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/test/mdc2_internal_test.c:49:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[MDC2_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/test/mdc2test.c:27:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char pad1[16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/mdc2test.c:32:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char pad2[16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/mdc2test.c:40:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[MDC2_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:33:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char cts128_test_key[16] = "chicken teriyaki";
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:34:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char cts128_test_input[64] =
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:40:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char vector_17[17] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:46:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char vector_31[31] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:53:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char vector_32[32] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:60:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char vector_47[47] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:69:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char vector_48[48] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:78:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char vector_64[64] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:130:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    size_t (*encrypt_block)(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:131:38:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                            unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:132:55:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                            const void *key, unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:134:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    size_t (*encrypt_stream)(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:134:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    size_t (*encrypt_stream)(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:136:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[16], cbc128_f cbc);
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:137:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    size_t (*decrypt_block)(const unsigned char *in,
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:138:38:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                            unsigned char *out, size_t len,
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:139:55:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                            const void *key, unsigned char ivec[16],
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:141:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    size_t (*decrypt_stream)(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:141:64:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    size_t (*decrypt_stream)(const unsigned char *in, unsigned char *out,
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:143:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                             unsigned char ivec[16], cbc128_f cbc);
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:151:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, in, len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:167:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, in, len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:169:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out + len, in + len + 16, tail);
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:170:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out + len + tail, in + len, 16);
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:186:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:188:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char cleartext[64], ciphertext[64], vector[64];
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:196:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, test_iv, test_iv_len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:205:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, test_iv, test_iv_len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:215:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, test_iv, test_iv_len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:225:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, test_iv, test_iv_len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/modes_internal_test.c:840:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[512];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ocspapitest.c:71:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char keybytes[128] = {7};
/home/capstone/Desktop/root/openssl-1.1.1f/test/ossl_shim/ossl_shim.cc:293:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(out_psk, config->psk.data(), config->psk.size());
/home/capstone/Desktop/root/openssl-1.1.1f/test/ossl_shim/ossl_shim.cc:311:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(out_psk, config->psk.data(), config->psk.size());
/home/capstone/Desktop/root/openssl-1.1.1f/test/ossl_shim/ossl_shim.cc:388:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(key_name, kZeros, sizeof(kZeros));
/home/capstone/Desktop/root/openssl-1.1.1f/test/ossl_shim/ossl_shim.cc:522:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ossl_shim/packeted_bio.cc:207:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, buf, outl);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ossl_shim/packeted_bio.cc:215:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&GetData(bio)->read_deadline, ptr, sizeof(timeval));
/home/capstone/Desktop/root/openssl-1.1.1f/test/ossl_shim/test_config.cc:185:20:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      *int_field = atoi(argv[i]);
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:15:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char smbuf[BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:180:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char bytes[4];
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:204:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp[BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:243:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf1[10], buf2[10];
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:270:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf1[10], buf2[10];
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:305:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf1[BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:350:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf1[BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:374:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf1[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:397:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf1[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:420:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf1[BUF_LEN];
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:443:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/test/pkey_meth_kdf_test.c:22:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/pkey_meth_kdf_test.c:48:24:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        const unsigned char expected[sizeof(out)] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/pkey_meth_kdf_test.c:63:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[10];
/home/capstone/Desktop/root/openssl-1.1.1f/test/pkey_meth_kdf_test.c:93:24:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        const unsigned char expected[sizeof(out)] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/pkey_meth_kdf_test.c:108:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[64];
/home/capstone/Desktop/root/openssl-1.1.1f/test/pkey_meth_kdf_test.c:154:24:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        const unsigned char expected[sizeof(out)] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/poly1305_internal_test.c:22:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char data[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/test/poly1305_internal_test.c:1516:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc2test.c:16:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char RC2key[4][16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc2test.c:27:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char RC2plain[4][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc2test.c:34:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char RC2cipher[4][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc2test.c:45:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[8], buf2[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc4test.c:19:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char keys[6][30] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc4test.c:28:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char data_len[6] = { 8, 8, 8, 20, 28, 10 };
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc4test.c:30:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char data[6][30] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc4test.c:44:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char output[6][30] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc4test.c:60:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char obuf[512];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc4test.c:71:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char obuf[512];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc4test.c:84:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char obuf[512];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc4test.c:97:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[513];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc4test.c:99:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md[SHA_DIGEST_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc5test.c:18:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char RC5key[5][16] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc5test.c:31:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char RC5plain[5][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc5test.c:39:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char RC5cipher[5][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc5test.c:48:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char rc5_cbc_cipher[RC5_CBC_NUM][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc5test.c:78:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char rc5_cbc_key[RC5_CBC_NUM][17] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc5test.c:111:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char rc5_cbc_plain[RC5_CBC_NUM][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc5test.c:148:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char rc5_cbc_iv[RC5_CBC_NUM][8] = {
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc5test.c:182:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[8], buf2[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc5test.c:202:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[8], buf2[8], ivb[8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc5test.c:208:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ivb, &rc5_cbc_iv[n][0], 8);
/home/capstone/Desktop/root/openssl-1.1.1f/test/rc5test.c:216:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ivb, &rc5_cbc_iv[n][0], 8);
/home/capstone/Desktop/root/openssl-1.1.1f/test/rdrand_sanitytest.c:31:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char prior[31] = {0}, buf[31] = {0}, check[7];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rdrand_sanitytest.c:70:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(prior, buf, sizeof(buf));
/home/capstone/Desktop/root/openssl-1.1.1f/test/recordlentest.c:29:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char header[SSL3_RT_HEADER_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/test/recordlentest.c:31:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_mp_test.c:190:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ptext[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_mp_test.c:191:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ctext[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_test.c:45:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(c, ctext_ex, sizeof(ctext_ex) - 1);                  \
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_test.c:245:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ptext[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_test.c:246:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ctext[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_test.c:248:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ctext_ex[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_test.c:275:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ptext[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_test.c:276:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ctext[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_test.c:278:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ctext_ex[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_test.c:305:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ptext[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_test.c:306:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ctext[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/rsa_test.c:308:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ctext_ex[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sanitytest.c:17:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char bytes[sizeof(p)];
/home/capstone/Desktop/root/openssl-1.1.1f/test/shlibloadtest.c:109:25:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    FILE *atexit_file = fopen(path_atexit, "w");
/home/capstone/Desktop/root/openssl-1.1.1f/test/siphash_internal_test.c:23:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char data[64];
/home/capstone/Desktop/root/openssl-1.1.1f/test/siphash_internal_test.c:174:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[SIPHASH_KEY_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/siphash_internal_test.c:175:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char in[64];
/home/capstone/Desktop/root/openssl-1.1.1f/test/siphash_internal_test.c:179:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out[SIPHASH_MAX_DIGEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/siphash_internal_test.c:261:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[SIPHASH_KEY_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/siphash_internal_test.c:262:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char output[SIPHASH_MAX_DIGEST_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sm4_internal_test.c:58:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(block, input, SM4_BLOCK_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/test/srptest.c:37:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char rand_tmp[RANDOM_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssl_test.c:398:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char test_app[MAX_TESTCASE_NAME_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssl_test_ctx.c:58:22:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        ctx->field = atoi(value);                                       \
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:52:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char server_log_buffer[LOG_BUFFER_SIZE + 1] = {0};
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:54:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char client_log_buffer[LOG_BUFFER_SIZE + 1] = {0};
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:150:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char hexed[3];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:156:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(hexed, "%02x", raw[i]);
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:170:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char actual_client_random[SSL3_RANDOM_SIZE] = {0};
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:172:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char actual_master_key[SSL_MAX_MASTER_KEY_LENGTH] = {0};
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:402:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[1];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2264:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[20], data[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2495:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2630:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2812:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2903:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3071:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3130:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3771:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cookie, cookie_magic_value, sizeof(cookie_magic_value) - 1);
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4287:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const char label[LONG_LABEL_LEN + 1] = "test label";
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4290:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ckeymat1[80], ckeymat2[80], ckeymat3[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4291:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char skeymat1[80], skeymat2[80], skeymat3[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4441:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ckeymat1[80], ckeymat2[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4442:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char skeymat1[80], skeymat2[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4443:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[1];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4512:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4571:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5265:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5354:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[5];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5475:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5577:41:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static int tick_key_cb(SSL *s, unsigned char key_name[16],
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5578:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                       unsigned char iv[EVP_MAX_IV_LENGTH], EVP_CIPHER_CTX *ctx,
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5581:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char tick_aes_key[16] = "0123456789abcdef";
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5582:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const unsigned char tick_hmac_key[16] = "0123456789abcdef";
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5765:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:6210:68:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                                         (unsigned char *)
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslbuffertest.c:53:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[sizeof(testdata)];
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslcorrupttest.c:184:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static unsigned char junk[16000] = { 0 };
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:321:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(alpn_selected, *out, *outlen);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:1032:22:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            number = atoi(*(++argv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:1038:21:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            bytes = atol(*(++argv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:1184:30:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            should_reuse = !!atoi(*(++argv));
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:1875:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char addr_str[40];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:1966:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char cbuf[1024 * 8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:2045:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char sbuf[1024 * 8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:2228:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char cbuf[1024 * 8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:2307:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char sbuf[1024 * 8];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:2812:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *s, buf[256];
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltestlib.c:433:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(out, thispkt->data, outl);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltestlib.c:487:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(thispkt->data, in + len, inl - len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltestlib.c:490:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(thispkt->data, in, inl);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltestlib.c:882:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            unsigned char buf[20];
/home/capstone/Desktop/root/openssl-1.1.1f/test/stack_test.c:259:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(q, p, sizeof(*q));
/home/capstone/Desktop/root/openssl-1.1.1f/test/test_test.c:456:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[4] = { 0 }, *p = buf;
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil.h:428:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buff[4096];            /* Input buffer for a single key/value */
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/driver.c:107:38:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    level = TAP_levels != NULL ? 4 * atoi(TAP_levels) : 0;
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/driver.c:110:16:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        seed = atoi(test_seed);
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/format_output.c:46:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char b1[MAX_STRING_WIDTH + 1], b2[MAX_STRING_WIDTH + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/format_output.c:47:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char bdiff[MAX_STRING_WIDTH + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/format_output.c:269:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char b1[MAX_STRING_WIDTH + 1], b2[MAX_STRING_WIDTH + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/format_output.c:270:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *p, bdiff[MAX_STRING_WIDTH + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/format_output.c:275:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buffer[MEM_BUFFER_SIZE * 2], *bufp = buffer;
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/format_output.c:388:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        unsigned char buf[BN_OUTPUT_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/format_output.c:389:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char out[2 * sizeof(buf) + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/format_output.c:428:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char b1[MAX_STRING_WIDTH + 1], b2[MAX_STRING_WIDTH + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/format_output.c:429:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *p, bdiff[MAX_STRING_WIDTH + 1];
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/main.c:19:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char arg_used[1000];
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/stanza.c:43:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmpbuf[128];
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13ccstest.c:24:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char chsessid[SSL_MAX_SSL_SESSION_ID_LENGTH];
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13ccstest.c:249:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[80];
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13encryptiontest.c:38:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const char *plaintext[3];
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13encryptiontest.c:39:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const char *ciphertext[3];
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13encryptiontest.c:213:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char *multihexstr2buf(const char *str[3], size_t *len)
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13encryptiontest.c:213:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static unsigned char *multihexstr2buf(const char *str[3], size_t *len)
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13encryptiontest.c:270:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(rec->data, pt, ptlen);
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13encryptiontest.c:272:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(seq, sq, SEQ_NUM_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13encryptiontest.c:274:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(iv, ivtmp, ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13encryptiontest.c:369:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(RECORD_LAYER_get_write_sequence(&s->rlayer),
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13encryptiontest.c:371:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(s->write_iv, s->read_iv, ivlen);
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13secretstest.c:155:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, hs_full_hash, sizeof(hs_full_hash));
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13secretstest.c:158:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(out, hs_start_hash, sizeof(hs_start_hash));
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13secretstest.c:227:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char gensecret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13secretstest.c:228:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hash[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13secretstest.c:229:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char key[KEYLEN];
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13secretstest.c:230:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char iv[IVLEN];
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13secretstest.c:272:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char out_master_secret[EVP_MAX_MD_SIZE];
/home/capstone/Desktop/root/openssl-1.1.1f/test/uitest.c:38:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pass[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/uitest.c:80:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pass[16];
/home/capstone/Desktop/root/openssl-1.1.1f/test/v3nametest.c:270:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char msg[1024];
/home/capstone/Desktop/root/openssl-1.1.1f/test/v3nametest.c:295:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(name, *pname, namelen);
/home/capstone/Desktop/root/openssl-1.1.1f/test/wpackettest.c:49:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char sbuf[3];
/home/capstone/Desktop/root/openssl-1.1.1f/test/x509_time_test.c:406:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char d[16];
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:335:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            res = strlen(buf);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1428:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        j = strlen(serialfile);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1430:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        j = strlen(serialfile) + strlen(suffix) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1430:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        j = strlen(serialfile) + strlen(suffix) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1474:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(serialfile) + strlen(old_suffix);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1474:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(serialfile) + strlen(old_suffix);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1475:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    j = strlen(serialfile) + strlen(new_suffix);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1475:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    j = strlen(serialfile) + strlen(new_suffix);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1632:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    j = strlen(dbfile) + strlen(suffix);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1632:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    j = strlen(dbfile) + strlen(suffix);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1678:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(dbfile) + strlen(old_suffix);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1678:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(dbfile) + strlen(old_suffix);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1679:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    j = strlen(dbfile) + strlen(new_suffix);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1679:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    j = strlen(dbfile) + strlen(new_suffix);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1848:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        valstr, strlen((char *)valstr),
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:1967:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(in);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:2136:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t i, flen = strlen(from) + 1, tlen = strlen(to) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:2136:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t i, flen = strlen(from) + 1, tlen = strlen(to) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:2361:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t i, len_0 = strlen(name) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/apps.c:2456:12:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    return read(fileno_stdin(), buf, siz);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/bf_prefix.c:107:57:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (!BIO_write_ex(BIO_next(b), ctx->prefix, strlen(ctx->prefix),
/home/capstone/Desktop/root/openssl-1.1.1f/apps/bf_prefix.c:176:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return BIO_write(b, str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:525:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        OPENSSL_cleanse(key, strlen(key));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:649:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        j = strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:2161:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t serial_len = strlen(serial);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:2376:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        i += strlen(reason) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/ca.c:2378:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        i += strlen(other) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/dgst.c:472:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t i, e = 0, length = strlen(file), newline_count = 0, mem_len = 0;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/enc.c:211:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            i = (int)strlen(p) - 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/enc.c:424:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            size_t str_len = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/enc.c:525:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            OPENSSL_cleanse(hkey, strlen(hkey));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/enc.c:654:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(in);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/engine.c:53:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int len = strlen(s) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/engine.c:60:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        const int blen = strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/engine.c:201:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                if ((xpos > (int)strlen(indent)) &&
/home/capstone/Desktop/root/openssl-1.1.1f/apps/engine.c:202:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    (xpos + (int)strlen(name) > line_wrap)) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:69:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if ((len = strlen(f->name)) > maxlen)
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:108:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(t) + 1 + strlen(OPENSSL_CONF) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:108:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(t) + 1 + strlen(OPENSSL_CONF) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:112:5:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
    strcat(p, "/");
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:209:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            i = strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:226:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                i = strlen(text);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:230:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    p += strlen(strcpy(p, text));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/openssl.c:237:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                p += strlen(strcpy(p, text));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:48:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    for (p = argv0 + strlen(argv0); --p > argv0;)
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:55:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:76:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    for (p = argv0 + strlen(argv0); --p > argv0;)
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:83:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(prog, p, sizeof(prog) - 1);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:97:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    for (p = argv0 + strlen(argv0); --p > argv0;)
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:102:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(prog, p, sizeof(prog) - 1);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:341:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strncmp(v, b[i].prefix, strlen(b[i].prefix)) == 0) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:846:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        i = 2 + (int)strlen(o->name);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:848:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            i += 1 + strlen(valtype2param(o));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:882:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            p += strlen(strcpy(p, o->name));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/opt.c:887:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            p += strlen(strcpy(p, valtype2param(o)));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:325:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    passwd_len = strlen(passwd);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:328:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    magic_len = strlen(magic);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:337:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    salt_len = strlen(ascii_salt);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:362:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (strlen(out_buf) > 6 + 8) /* assert "$apr1$..salt.." */
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:457:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        assert(output == out_buf + strlen(out_buf));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:473:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        assert(strlen(out_buf) < sizeof(out_buf));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:475:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        ascii2ebcdic(out_buf, out_buf, strlen(out_buf));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:524:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    passwd_len = strlen(passwd);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:525:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    magic_len = strlen(magic);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:570:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    salt_len = strlen(ascii_salt);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:593:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            ebcdic2ascii(tmp_buf, tmp_buf, strlen(tmp_buf));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:601:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (strlen(out_buf) > 3 + 17 * rounds_custom + salt_len )
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:703:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    cp = out_buf + strlen(out_buf);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:760:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    ascii2ebcdic(out_buf, out_buf, strlen(out_buf));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:818:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if ((strlen(passwd) > pw_maxlen)) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/passwd.c:828:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    assert(strlen(passwd) <= pw_maxlen);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/pkcs8.c:258:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            p8 = PKCS8_set0_pbe(p8pass, strlen(p8pass), p8inf, pbe);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/pkcs8.c:318:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        p8inf = PKCS8_decrypt(p8, p8pass, strlen(p8pass));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:212:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strncasecmp(suffix, &filename[i], strlen(suffix)) == 0)
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:215:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i += strlen(suffixes[type]);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:314:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        path += strlen(path) - 1;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/rehash.c:346:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    buflen = strlen(dirname);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1387:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(buf);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1427:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    elen = strlen(end);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1428:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    slen = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1442:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const size_t name_len = strlen(name), tail_len = strlen(tail);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1442:54:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const size_t name_len = strlen(name), tail_len = strlen(tail);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/req.c:1481:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            len = strlen(gstr);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:233:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        *idlen = strlen(psk_identity);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:436:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    unsigned char *ret = app_malloc(strlen(in) / 2, "hexdecode");
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:1433:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            len = strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:2353:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (mbuf_len < (int)strlen("HTTP/1.0 200")) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:2624:13:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
            strncpy(sbuf, mbuf, 2);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:3352:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        strlen(keymatexportlabel),
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_client.c:3488:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t length = strlen(host);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:142:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                   (int)strlen(identity), identity);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:191:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (strlen(psk_identity) != identity_len
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:445:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return ebcdic_write(bp, str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1815:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strlen(session_id_prefix) >= 32)
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:1910:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (strlen(session_id_prefix) >= 32)
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:2270:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                       strlen((char *)context))) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:2557:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    BIO_write(SSL_get_wbio(con), str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:2915:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        strlen(keymatexportlabel),
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:2989:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                       strlen((char *)context))) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:3268:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                i = strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:3365:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                       strlen((char *)context))) {
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:3509:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
               (strlen(session_id_prefix) < *id_len) ?
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_server.c:3510:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
               strlen(session_id_prefix) : *id_len);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/s_time.c:173:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            buf_size = strlen(www_path) + fmt_http_get_cmd_size;
/home/capstone/Desktop/root/openssl-1.1.1f/apps/sess_id.c:105:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t ctx_len = strlen(context);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/speed.c:2200:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        int len = strlen(hmac_key);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/spkac.c:135:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                            challenge, (int)strlen(challenge));
/home/capstone/Desktop/root/openssl-1.1.1f/apps/vms_term_sock.c:357:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    AscTimeDesc.dsc$w_length = strlen (AscTimeBuff);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/vms_term_sock.c:514:5:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
    strcat (TerminalDeviceBuff, "\n");
/home/capstone/Desktop/root/openssl-1.1.1f/apps/win32_init.c:162:12:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    wlen = wcslen(wcmdline);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/x509.c:920:57:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t len = p != NULL ? (size_t)(p - CAfile) : strlen(CAfile);
/home/capstone/Desktop/root/openssl-1.1.1f/apps/x509.c:1114:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(names);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_unix.c:105:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            char c = directory[strlen(directory) - 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_unix.c:123:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy((*ctx)->previous_entry_name, (*ctx)->entry_name,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_unix.c:138:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        char *p = (*ctx)->entry_name + strlen((*ctx)->entry_name);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_vms.c:96:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t filespeclen = strlen(directory);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_vms.c:184:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy((*ctx)->result, r, l);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_win.c:83:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t dirlen = strlen(directory);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_win.c:161:21:  [1] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant character.
                    strcpy(buf + dirlen, "*");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/LPdir_win.c:196:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy((*ctx)->entry_name, (const char *)(*ctx)->ctx.cFileName,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_gentm.c:39:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    t.length = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_mbstr.c:55:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen((const char *)in);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_object.c:65:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        num = strlen(buf);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_strex.c:347:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        outlen += strlen(tagname);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_strex.c:528:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            objlen = strlen(objbuf);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_time.c:384:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    t.length = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/a_utctm.c:36:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    t.length = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/ameth_lib.c:110:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/ameth_lib.c:132:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if ((int)strlen(ameth->pem_str) == len
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn1_gen.c:567:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen(tagstr);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn1_lib.c:280:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            len = strlen(data);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn_mime.c:578:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    blen = strlen(bound);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn_mime.c:783:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    for (p = name + strlen(name) - 1; p >= name; p--) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn_mime.c:935:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        linelen = strlen(line);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/asn_mime.c:937:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        blen = strlen(bound);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/asn1/bio_asn1.c:300:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return asn1_bio_write(b, str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:98:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(ap->s_un.sun_path, where, sizeof(ap->s_un.sun_path) - 1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:148:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen(ap->s_un.sun_path);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:485:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            pl = strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:508:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            pl = strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:511:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            hl = strlen(h);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:514:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            pl = strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_addr.c:665:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (addrinfo_wrap(family, socktype, host, strlen(host), 0, res))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_print.c:461:60:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        min - OSSL_MAX(max, place) - (signvalue ? 1 : 0) - strlen(prefix);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_sock.c:255:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            *ip_port = OPENSSL_zalloc(strlen(host) + strlen(port) + 2);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_sock.c:255:54:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            *ip_port = OPENSSL_zalloc(strlen(host) + strlen(port) + 2);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/b_sock.c:265:13:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
            strcat(*ip_port, ":");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_buff.c:474:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return buffer_write(b, str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bf_lbuf.c:325:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return linebuffer_write(b, str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bio_cb.c:92:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        BIO_write(b, buf, strlen(buf));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bio_local.h:183:27:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  define UP_read         read
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_acpt.c:547:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_bio.c:605:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return bio_write(bio, str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_conn.c:534:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:804:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_dgram.c:1828:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_fd.c:205:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_fd.c:224:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        ret = strlen(buf);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_file.c:350:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        ret = strlen(buf);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_file.c:359:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_log.c:235:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_mem.c:97:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sz = (len < 0) ? strlen(buf) : (size_t)len;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_mem.c:368:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_null.c:86:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/bio/bss_sock.c:170:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cms/cms_pwri.c:33:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        passlen = strlen((char *)pass);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_api.c:199:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(section) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_def.c:235:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        ii = i = strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_def.c:519:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(from) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_def.c:625:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            newsize = strlen(p) + buf->length - (e - from);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_def.c:708:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    pathlen = strlen(path);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_def.c:712:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        namelen = strlen(filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_mod.c:277:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        nchar = strlen(name);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_mod.c:489:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(X509_get_default_cert_area());
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_mod.c:494:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len += strlen(OPENSSL_CONF);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/conf/conf_mod.c:538:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                tmpend = lstart + strlen(lstart) - 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/cryptlib.c:294:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            size_t len_0 = strlen(fmta) + 1, i;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ct/ct_b64.c:26:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t inlen = strlen(in);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/fcrypt.c:85:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        ascii2ebcdic(ret, ret, strlen(ret));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/str2key.c:19:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    length = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/des/str2key.c:47:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    length = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:185:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        spec2len = (filespec2 ? strlen(filespec2) : 0);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:186:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = spec2len + (filespec1 ? strlen(filespec1) : 0);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:216:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:221:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        rsize += strlen(DSO_EXTENSION); /* The length of ".s?" */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dl.c:258:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            len = (int)strlen(inf.filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:113:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (filename[strlen(filename) - 1] == ')')
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:234:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        spec2len = strlen(filespec2);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:235:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = spec2len + strlen(filespec1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:258:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:263:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        rsize += strlen(DSO_EXTENSION);    /* The length of ".so" */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:375:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            buffer_sz = strlen(this_ldi->ldinfo_filename) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:377:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if ((member_len = strlen(member)) > 0)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_dlfcn.c:423:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = (int)strlen(dli.dli_fname);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:167:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        sp2 = sp1 + strlen(sp1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:171:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        || (sp1 - filename) + strlen(sp2) > FILENAME_MAX) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:182:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(p->filename, sp1, sp2 - sp1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:185:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(p->imagename, filename, sp1 - filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:194:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    p->filename_dsc.dsc$w_length = strlen(p->filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:198:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    p->imagename_dsc.dsc$w_length = strlen(p->imagename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:299:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    symname_dsc.dsc$w_length = strlen(SYMNAME);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:393:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    filespec1len = strlen(filespec1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:394:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    filespec2len = strlen(filespec2);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:450:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(merged, nam.NAMX_ESA, nam.NAMX_ESL);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_vms.c:459:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int len = strlen(filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:37:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len_0 = strlen(lpLibFileName) + 1, i;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:345:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(&result[offset], file_split->node, file_split->nodelen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:352:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(&result[offset], file_split->device, file_split->devicelen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:365:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(&result[offset], start, end - start);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:378:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(&result[offset], start, end - start);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:384:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(&result[offset], file_split->file, file_split->filelen);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:458:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(filename);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:578:35:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                int i, len = (int)wcslen(me32.szExePath);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/dso/dso_win32.c:591:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                int len = (int)strlen(me32.szExePath);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:2056:16:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
static uint8_t equal(signed char b, signed char c)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4205:37:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
    cmov(t, &k25519Precomp[pos][0], equal(babs, 1));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4206:37:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
    cmov(t, &k25519Precomp[pos][1], equal(babs, 2));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4207:37:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
    cmov(t, &k25519Precomp[pos][2], equal(babs, 3));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4208:37:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
    cmov(t, &k25519Precomp[pos][3], equal(babs, 4));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4209:37:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
    cmov(t, &k25519Precomp[pos][4], equal(babs, 5));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4210:37:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
    cmov(t, &k25519Precomp[pos][5], equal(babs, 6));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4211:37:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
    cmov(t, &k25519Precomp[pos][6], equal(babs, 7));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve25519.c:4212:37:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
    cmov(t, &k25519Precomp[pos][7], equal(babs, 8));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/curve448/eddsa.c:69:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !EVP_DigestUpdate(hashctx, dom_s, strlen(dom_s))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:861:13:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        u64 equal;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:875:9:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 32;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:875:18:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 32;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:876:9:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 16;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:876:18:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 16;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:877:9:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 8;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:877:18:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 8;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:878:9:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 4;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:878:18:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 4;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:879:9:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 2;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:879:18:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 2;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:880:9:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:880:18:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal &= equal << 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:881:22:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        equal = 0 - (equal >> 63);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ec/ecp_nistp256.c:883:29:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        all_equal_so_far &= equal;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_ctrl.c:108:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        return strlen(cdp->cmd_name);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_ctrl.c:110:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        return strlen(strcpy(s, cdp->cmd_name));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_ctrl.c:112:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        return strlen(cdp->cmd_desc == NULL ? int_no_description
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_ctrl.c:115:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        return strlen(strcpy(s, cdp->cmd_desc == NULL ? int_no_description
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_dyn.c:307:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (p && (strlen((const char *)p) < 1))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_dyn.c:320:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (p && (strlen((const char *)p) < 1))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/eng_dyn.c:346:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (!p || (strlen((const char *)p) < 1)) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/tb_asnmth.c:146:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/tb_asnmth.c:151:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            && ((int)strlen(ameth->pem_str) == len)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/engine/tb_asnmth.c:176:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                && ((int)strlen(ameth->pem_str) == lk->len)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/err/err.c:228:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                size_t l = strlen(cur);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/err/err.c:418:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        end = &file[strlen(file) - 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/err/err.c:616:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (strlen(buf) == len - 1) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/err/err.c:863:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        n += strlen(a);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/err/err_prn.c:40:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (cb(buf2, strlen(buf2), u) <= 0)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_b64.c:552:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return b64_write(b, str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_ok.c:475:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!EVP_DigestUpdate(md, WELLKNOWN, strlen(WELLKNOWN)))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/bio_ok.c:513:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!EVP_DigestUpdate(md, WELLKNOWN, strlen(WELLKNOWN)))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_key.c:25:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(prompt_string, prompt, 79);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/evp_pbe.c:107:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        passlen = strlen(pass);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p5_crpt.c:74:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        passlen = strlen(pass);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/p5_crpt2.c:54:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        passlen = strlen(pass);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/evp/pmeth_lib.c:431:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem.c:158:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen(buff);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem_dbg.c:533:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            info_len = strlen(amip->info);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/mem_dbg.c:594:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        cb(buf, strlen(buf), u);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_fopen.c:42:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int sz, len_0 = (int)strlen(filename) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_fopen.c:68:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            MultiByteToWideChar(CP_UTF8, 0, mode, strlen(mode) + 1,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_fopen.c:90:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if ((newname = OPENSSL_malloc(strlen(filename) + 1)) == NULL) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_str.c:33:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    ret = CRYPTO_malloc(strlen(str) + 1, file, line);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_str.c:90:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return l + strlen(src);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/o_str.c:155:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    s = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/objects/obj_dat.c:419:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            n = strlen(s);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/objects/obj_dat.c:485:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            i = strlen(bndec);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/objects/obj_dat.c:506:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            i = strlen(tbuf);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ocsp/ocsp_ht.c:256:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        for (r = q + strlen(q) - 1; ossl_isspace(*r); r--)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_info.c:126:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if ((int)strlen(header) > 10) /* assume encrypted */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_info.c:149:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if ((int)strlen(header) > 10) /* assume encrypted */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_info.c:172:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if ((int)strlen(header) > 10) /* assume encrypted */
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_info.c:264:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                || (strlen(objstr) + 23 + 2 * EVP_CIPHER_iv_length(enc) + 13)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:38:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        i = strlen(userdata);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:63:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return strlen(buf);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:69:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    char *p = buf + strlen(buf);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:86:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    char *p = buf + strlen(buf);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:101:13:  [1] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant character.
            strcpy(p, "\n");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:328:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                || (strlen(objstr) + 23 + 2 * EVP_CIPHER_iv_length(enc) + 13)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:617:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    nlen = strlen(name);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:624:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(header);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:839:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            namelen = strlen(name);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:976:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int pem_len = strlen(pem_str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pem/pem_lib.c:977:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int suffix_len = strlen(suffix);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_utl.c:23:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        asclen = strlen(asc);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/pkcs12/p12_utl.c:82:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        asclen = strlen(asc);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_egd.c:73:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (strlen(path) >= sizeof(addr.sun_path))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_egd.c:76:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = offsetof(struct sockaddr_un, sun_path) + strlen(path);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_unix.c:466:33:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
                    while ((r = read(fd, &c, 1)) < 0 && errno == EINTR);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/rand_unix.c:676:25:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
                bytes = read(fd, buffer, bytes_needed);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:298:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(s);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:304:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (len + 1 + strlen(RFILE) + 1 >= size)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/rand/randfile.c:308:9:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
        strcat(buf, "/");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/s390xcap.c:640:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    buff = malloc(strlen(env) + 1);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_lib.c:137:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        || !EVP_DigestUpdate(ctxt, user, strlen(user))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_lib.c:139:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        || !EVP_DigestUpdate(ctxt, pass, strlen(pass))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_vfy.c:50:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size = strlen(src);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_vfy.c:561:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        || !EVP_DigestUpdate(ctxt, vb->seed_key, strlen(vb->seed_key))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/srp/srp_vfy.c:562:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        || !EVP_DigestUpdate(ctxt, username, strlen(username))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:116:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return pass == NULL ? 0 : strlen(pass);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:235:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                if (!PKCS12_verify_mac(p12, pass, strlen(pass))) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:366:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!PKCS12_pbe_crypt(dalg, pass, strlen(pass), doct->data, doct->length,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:1118:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (strlen(*pem_header) > 10) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:1149:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        uri += strlen(uri) - 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:1167:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        long calculated_length = strlen(ctx->_.dir.uri) + strlen(pathsep)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:1167:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        long calculated_length = strlen(ctx->_.dir.uri) + strlen(pathsep)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/loader_file.c:1168:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            + strlen(name) + 1 /* \0 */;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/store/store_lib.c:556:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    search->stringlength = strlen(alias);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_lib.c:30:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        result = result && BIO_write(bio, hex, strlen(hex)) > 0;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_sign.c:312:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !ASN1_STRING_set(utf8_text, text, strlen(text)))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_sign.c:1015:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        p += strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_verify.c:501:21:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
                    strcat(failure_text, ",");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ts/ts_rsp_verify.c:546:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(p, (const char *)ASN1_STRING_get0_data(current), length);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/txt_db/txt_db.c:69:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        i = strlen(&(buf->data[offset]));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/txt_db/txt_db.c:207:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                l += strlen(pp[j]);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_lib.c:372:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = sizeof(prompt1) - 1 + strlen(object_desc);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_lib.c:374:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            len += sizeof(prompt2) - 1 + strlen(object_name);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_lib.c:884:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return UI_set_result_ex(ui, uis, result, strlen(result));
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/ui/ui_openssl.c:708:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return strlen(buf);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/by_dir.c:177:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                if (strlen(ent->dir) == len && strncmp(ent->dir, ss, len) == 0)
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/by_dir.c:257:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        j = strlen(ent->dir) + 1 + 8 + 6 + 1 + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/by_dir.c:281:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            c = ent->dir[strlen(ent->dir) - 1];
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_cmp.c:44:52:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!EVP_DigestUpdate(ctx, (unsigned char *)f, strlen(f)))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_obj.c:55:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  Risk is low because the source is a constant string.
        strncpy(buf, "NO X509_NAME", len);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_obj.c:69:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        l1 = strlen(s);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_vfy.c:2619:21:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
    recnum = (dane->umask & mask) ? sk_danetls_record_num(dane->trecs) : 0;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_vpm.c:46:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        namelen = name ? strlen(name) : 0;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509_vpm.c:245:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            srclen = strlen(src);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509name.c:330:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen((const char *)bytes);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509/x509spki.c:37:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_alt.c:134:21:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
                    strcat(oline, ":");
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_alt.c:500:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                             strlen(value))) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_conf.c:192:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if ((strlen(p) < 9) || strncmp(p, "critical,", 9))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_conf.c:206:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if ((strlen(p) >= 4) && strncmp(p, "DER:", 4) == 0) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_conf.c:209:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    } else if ((strlen(p) >= 5) && strncmp(p, "ASN1:", 5) == 0) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_cpols.c:203:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                 strlen(cnf->value)))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_cpols.c:311:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            len = strlen(value);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_cpols.c:327:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                 strlen(cnf->value)))
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_ia5.c:54:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!ASN1_STRING_set((ASN1_STRING *)ia5, str, strlen(str))) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_info.c:81:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        nlen = strlen(objtmp) + 3 + strlen(vtmp->name) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_info.c:81:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        nlen = strlen(objtmp) + 3 + strlen(vtmp->name) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_ncons.c:340:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if ((size_t)utf8_length != strlen((char *)utf8_value)) {
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_ncons.c:621:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        hostlen = strlen(hostptr);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_pci.c:201:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            val_len = strlen(val->value + 5);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_prn.c:53:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            len = strlen(nval->value) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_prn.c:106:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            len = strlen(value) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_sxnet.c:148:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        userlen = strlen(user);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_sxnet.c:169:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        userlen = strlen(user);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:121:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(tmp) + 3;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:385:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    q = p + strlen(p) - 1;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:404:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(cmp);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:782:73:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
static int do_check_string(const ASN1_STRING *a, int cmp_type, equal_fn equal,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:828:14:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
    equal_fn equal;
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:852:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        chklen = strlen(chk);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:870:55:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
            if ((rv = do_check_string(cstr, alt_type, equal, flags,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:892:44:  [1] (buffer) equal:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
        if ((rv = do_check_string(str, -1, equal, flags,
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:910:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        chklen = strlen(chk);
/home/capstone/Desktop/root/openssl-1.1.1f/crypto/x509v3/v3_utl.c:929:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        chklen = strlen((char *)chk);
/home/capstone/Desktop/root/openssl-1.1.1f/demos/bio/sconnect.c:80:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(p);
/home/capstone/Desktop/root/openssl-1.1.1f/e_os.h:168:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#    define strlen(s) _strlen31(s)
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_afalg.c:267:13:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
        r = read(aio->efd, &eval, sizeof(eval));
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_capi.c:1113:18:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len_0 = (int)wcslen(wstr) + 1; /* WideCharToMultiByte expects int */
/home/capstone/Desktop/root/openssl-1.1.1f/engines/e_dasync.c:472:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    if (read(pipefds[0], &buf, 1) < 0)
/home/capstone/Desktop/root/openssl-1.1.1f/fuzz/driver.c:41:23:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
        size_t size = read(0, buf, BUF_SIZE);
/home/capstone/Desktop/root/openssl-1.1.1f/fuzz/test-corpus.c:67:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t dirname_len = strlen(argv[n]);
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/bio.h:33:60:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
int bread_conv(BIO *bio, char *data, size_t datal, size_t *read);
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/dane.h:72:21:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
    uint32_t        umask;      /* Usages present */
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/dane.h:93:52:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
#define DANETLS_HAS_PKIX(dane) ((dane) && ((dane)->umask & DANETLS_PKIX_MASK))
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/dane.h:94:52:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
#define DANETLS_HAS_DANE(dane) ((dane) && ((dane)->umask & DANETLS_DANE_MASK))
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/dane.h:95:52:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
#define DANETLS_HAS_TA(dane)   ((dane) && ((dane)->umask & DANETLS_TA_MASK))
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/dane.h:96:52:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
#define DANETLS_HAS_EE(dane)   ((dane) && ((dane)->umask & DANETLS_EE_MASK))
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/dane.h:98:53:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
#define DANETLS_HAS_PKIX_TA(dane) ((dane)&&((dane)->umask & DANETLS_PKIX_TA_MASK))
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/dane.h:99:53:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
#define DANETLS_HAS_PKIX_EE(dane) ((dane)&&((dane)->umask & DANETLS_PKIX_EE_MASK))
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/dane.h:100:53:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
#define DANETLS_HAS_DANE_TA(dane) ((dane)&&((dane)->umask & DANETLS_DANE_TA_MASK))
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/dane.h:101:53:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
#define DANETLS_HAS_DANE_EE(dane) ((dane)&&((dane)->umask & DANETLS_DANE_EE_MASK))
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/sockets.h:146:39:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  define readsocket(s,b,n)           read((s),(b),(n))
/home/capstone/Desktop/root/openssl-1.1.1f/include/internal/sockets.h:151:35:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  define readsocket(s,b,n)       read((s),(b),(n))
/home/capstone/Desktop/root/openssl-1.1.1f/include/openssl/bio.h:776:29:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
                      int (*read) (BIO *, char *, int));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/bio_ssl.c:416:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(str);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/d1_srtp.c:49:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if ((len == strlen(p->name))
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/d1_srtp.c:80:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                               : strlen(ptr))) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/record.h:62:18:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    unsigned int read;
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/record/record_local.h:98:55:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define SSL3_RECORD_is_read(r)                  ((r)->read)
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_enc.c:495:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                strlen((const char *)salt[i])) <= 0
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_lib.c:3487:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            len = strlen((char *)parg);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_lib.c:3888:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strlen((const char *)parg) > 255 || strlen((const char *)parg) < 1) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/s3_lib.c:3888:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strlen((const char *)parg) > 255 || strlen((const char *)parg) < 1) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_asn1.c:99:60:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        ssl_session_oinit(dest, os, (unsigned char *)data, strlen(data));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_cert.c:724:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strlen(dir) + strlen(filename) + 2 > sizeof(buf)) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_cert.c:724:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strlen(dir) + strlen(filename) + 2 > sizeof(buf)) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_ciph.c:1581:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (ok && (strlen(rule_p) > 0))
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_conf.c:722:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strlen(*pcmd) <= cctx->prefixlen)
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_conf.c:951:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        cctx->prefixlen = strlen(tmp);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:454:11:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
    dane->umask |= DANETLS_USAGE_BIT(usage);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:2610:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        n = strlen(c->name);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:4278:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (identity_hint != NULL && strlen(identity_hint) > PSK_MAX_IDENTITY_LEN) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:4297:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (identity_hint != NULL && strlen(identity_hint) > PSK_MAX_IDENTITY_LEN) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_lib.c:5232:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    prefix_len = strlen(prefix);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_rsa.c:954:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strlen(name) < strlen(namePrefix1)) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_rsa.c:954:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strlen(name) < strlen(namePrefix1)) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_rsa.c:958:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strncmp(name, namePrefix1, strlen(namePrefix1)) == 0) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_rsa.c:961:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (strlen(name) < strlen(namePrefix2)) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_rsa.c:961:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (strlen(name) < strlen(namePrefix2)) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/ssl_rsa.c:966:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (strncmp(name, namePrefix2, strlen(namePrefix2)) != 0) {
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_clnt.c:51:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                       strlen(s->ext.hostname))
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_clnt.c:103:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                               strlen(s->srp_ctx.login))
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_clnt.c:776:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            idlen = strlen(identity);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/extensions_srvr.c:174:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                            strlen(s->session->ext.hostname));
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_clnt.c:2915:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    identitylen = strlen(identity);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/statem/statem_srvr.c:2678:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                        ? 0 : strlen(s->cert->psk_identity_hint);
/home/capstone/Desktop/root/openssl-1.1.1f/ssl/tls_srp.c:327:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        OPENSSL_clear_free(passwd, strlen(passwd));
/home/capstone/Desktop/root/openssl-1.1.1f/test/asn1_time_test.c:119:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    atime.length = strlen((char*)atime.data);
/home/capstone/Desktop/root/openssl-1.1.1f/test/asynciotest.c:284:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return async_write(bio, str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:267:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    printf("\ndata[%d]  = '%s'", (int)strlen(cbc_data) + 1, cbc_data);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:268:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    printf("\ndata[%d]  = ", (int)strlen(cbc_data) + 1);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:269:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    for (j = 0; j < strlen(cbc_data) + 1; j++)
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:279:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    printf("cipher[%d]= ", (int)strlen(cbc_data) + 1);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:280:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    for (j = 0; j < strlen(cbc_data) + 1; j++)
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:285:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    printf("cipher[%d]= ", (int)strlen(cbc_data) + 1);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:286:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    for (j = 0; j < strlen(cbc_data) + 1; j++)
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:298:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    BF_set_key(&key, strlen(bf_key[n]), (unsigned char *)bf_key[n]);
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:354:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(cbc_data) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:367:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_mem_eq(cbc_in, len, cbc_data, strlen(cbc_data) + 1))
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:380:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(cbc_data) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:412:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(cbc_data) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:443:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    ebcdic2ascii(cbc_data, cbc_data, strlen(cbc_data));
/home/capstone/Desktop/root/openssl-1.1.1f/test/bftest.c:445:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        ebcdic2ascii(bf_key[n], bf_key[n], strlen(bf_key[n]));
/home/capstone/Desktop/root/openssl-1.1.1f/test/bntest.c:107:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (parseBN(&ret, hex) != (int)strlen(hex)) {
/home/capstone/Desktop/root/openssl-1.1.1f/test/bntest.c:2637:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_mem_eq(s, strlen(s), test->res, strlen(test->res)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/bntest.c:2637:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_mem_eq(s, strlen(s), test->res, strlen(test->res)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/bntest.c:2675:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_mem_eq(s, strlen(s), test->res, strlen(test->res)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/bntest.c:2675:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_mem_eq(s, strlen(s), test->res, strlen(test->res)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/clienthellotest.c:174:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                                  strlen(dummytick))))
/home/capstone/Desktop/root/openssl-1.1.1f/test/clienthellotest.c:216:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                           strlen(dummytick)))) {
/home/capstone/Desktop/root/openssl-1.1.1f/test/cmsapitest.c:18:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    BIO *msgbio = BIO_new_mem_buf(msg, strlen(msg));
/home/capstone/Desktop/root/openssl-1.1.1f/test/cmsapitest.c:38:61:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_int_eq(BIO_gets(outmsgbio, buf, sizeof(buf)), strlen(msg))
/home/capstone/Desktop/root/openssl-1.1.1f/test/danetest.c:161:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(buf);
/home/capstone/Desktop/root/openssl-1.1.1f/test/danetest.c:188:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_ptr(ret = OPENSSL_malloc(strlen(in) / 2)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:361:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const size_t cbc_data_len = strlen((char *)cbc_data);
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:385:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const size_t n = strlen((char *)cbc_data) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:408:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const size_t i = strlen((char *)cbc_data) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:439:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const size_t n = strlen(i + (char *)cbc_data) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:454:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const size_t n = strlen((char *)cbc_data) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:485:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const int n = strlen((char *)cbc_data) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:668:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    cs = DES_cbc_cksum(cbc_data, &cret, strlen((char *)cbc_data), &ks,
/home/capstone/Desktop/root/openssl-1.1.1f/test/destest.c:680:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                        (long)strlen((char *)cbc_data), 2,
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:641:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    bio = BIO_new_mem_buf(pubkey, strlen(pubkey));
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:659:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                          strlen(id)), 0))
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:667:54:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(EVP_DigestVerifyUpdate(mctx, msg, strlen(msg))))
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:860:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        inlen = strlen(keys[tst].pub);
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_extra_test.c:867:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        inlen = strlen(keys[tst].priv);
/home/capstone/Desktop/root/openssl-1.1.1f/test/evp_test.c:296:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t vlen = strlen(++value);
/home/capstone/Desktop/root/openssl-1.1.1f/test/fatalerrtest.c:72:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_int_le(SSL_write(sssl, msg, strlen(msg)), 0))
/home/capstone/Desktop/root/openssl-1.1.1f/test/handshake_helper.c:189:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (len == strlen("server2") && strncmp(servername, "server2", len) == 0) {
/home/capstone/Desktop/root/openssl-1.1.1f/test/handshake_helper.c:202:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    } else if (len == strlen("server1") &&
/home/capstone/Desktop/root/openssl-1.1.1f/test/handshake_helper.c:342:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(protos);
/home/capstone/Desktop/root/openssl-1.1.1f/test/handshake_helper.c:473:58:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return SSL_SESSION_set1_ticket_appdata(ss, app_data, strlen(app_data));
/home/capstone/Desktop/root/openssl-1.1.1f/test/handshake_helper.c:1692:57:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    ret->cipher = dup_str((const unsigned char*)cipher, strlen(cipher));
/home/capstone/Desktop/root/openssl-1.1.1f/test/md2test.c:49:57:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(EVP_Digest((unsigned char *)test[n], strlen(test[n]),
/home/capstone/Desktop/root/openssl-1.1.1f/test/mdc2_internal_test.c:55:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                strlen(testdata.input));
/home/capstone/Desktop/root/openssl-1.1.1f/test/mdc2test.c:43:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t tlen = strlen(text);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ossl_shim/test_config.cc:166:54:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      std::unique_ptr<uint8_t[]> decoded(new uint8_t[strlen(argv[i])]);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ossl_shim/test_config.cc:169:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                strlen(argv[i]));
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:254:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(strlen(data), 10)
/home/capstone/Desktop/root/openssl-1.1.1f/test/packettest.c:258:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(strlen(data), 5)
/home/capstone/Desktop/root/openssl-1.1.1f/test/pemtest.c:48:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_int_eq(memcmp(pemtype, name, strlen(pemtype)), 0)
/home/capstone/Desktop/root/openssl-1.1.1f/test/pemtest.c:49:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        || !TEST_int_eq(len, strlen(raw))
/home/capstone/Desktop/root/openssl-1.1.1f/test/pemtest.c:50:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        || !TEST_int_eq(memcmp(data, raw, strlen(raw)), 0))
/home/capstone/Desktop/root/openssl-1.1.1f/test/shlibloadtest.c:56:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (filename[strlen(filename) - 1] == ')')
/home/capstone/Desktop/root/openssl-1.1.1f/test/sm2_internal_test.c:61:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    fake_rand_size = strlen(hex_bytes) / 2;
/home/capstone/Desktop/root/openssl-1.1.1f/test/sm2_internal_test.c:143:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const size_t msg_len = strlen(message);
/home/capstone/Desktop/root/openssl-1.1.1f/test/sm2_internal_test.c:270:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const size_t msg_len = strlen(message);
/home/capstone/Desktop/root/openssl-1.1.1f/test/sm2_internal_test.c:297:64:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sig = sm2_do_sign(key, EVP_sm3(), (const uint8_t *)userid, strlen(userid),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sm2_internal_test.c:315:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                       strlen(userid), (const uint8_t *)message, msg_len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssl_test.c:199:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        result_len = strlen(result->result_session_ticket_app_data);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssl_test.c:201:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        expected_len = strlen(test_ctx->expected_session_ticket_app_data);
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:114:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int line_length = strlen(line);
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:130:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int line_length = strlen(line);
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:194:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (!TEST_size_t_eq(strlen(token), 16))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:217:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (!TEST_size_t_eq(strlen(token), 64))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:231:63:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (!TEST_false(compare_hex_encoded_buffer(token, strlen(token),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:272:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (!TEST_size_t_eq(strlen(token), 64))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2034:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    *idlen = strlen(pskid);
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2049:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (strlen(pskid) + 1 > max_id_len)
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2063:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(id, pskid, max_id_len);
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2082:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (strlen(srvid) != identity_len
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2273:58:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_early_data(clientssl, MSG1, strlen(MSG1),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2275:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG1))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2279:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(MSG1, readbytes, buf, strlen(MSG1))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2288:58:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_early_data(serverssl, MSG2, strlen(MSG2),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2290:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG2))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2292:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG2, strlen(MSG2)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2296:58:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_early_data(clientssl, MSG3, strlen(MSG3),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2298:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG3)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2305:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG3, strlen(MSG3)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2309:58:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_early_data(serverssl, MSG4, strlen(MSG4),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2311:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG4))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2313:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG4, strlen(MSG4)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2320:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_ex(clientssl, MSG5, strlen(MSG5), &written))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2321:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG5))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2355:58:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_early_data(serverssl, MSG6, strlen(MSG6),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2357:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG6)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2368:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(readbytes, strlen(MSG5)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2372:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_false(SSL_write_early_data(clientssl, MSG6, strlen(MSG6),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2384:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG6, strlen(MSG6)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2398:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_ex(serverssl, MSG7, strlen(MSG7), &written))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2399:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG7))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2401:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG7, strlen(MSG7)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2420:58:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_early_data(clientssl, MSG1, strlen(MSG1),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2422:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG1))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2426:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG1, strlen(MSG1)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2434:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_false(SSL_write_early_data(clientssl, MSG6, strlen(MSG6),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2445:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_ex(clientssl, MSG5, strlen(MSG5), &written))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2446:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG5))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2448:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(readbytes, strlen(MSG5)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2549:58:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_early_data(clientssl, MSG1, strlen(MSG1),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2551:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG1)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2570:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                || !TEST_mem_eq(MSG1, strlen(MSG1), buf, readbytes)
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2662:58:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_early_data(clientssl, MSG1, strlen(MSG1),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2664:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG1)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2687:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (!TEST_false(SSL_write_ex(clientssl, MSG2, strlen(MSG2), &written))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2706:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (!TEST_false(SSL_write_ex(clientssl, MSG2, strlen(MSG2),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2743:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_ex(clientssl, MSG2, strlen(MSG2), &written))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2744:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG2))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2748:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG2, strlen(MSG2)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2821:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_false(SSL_write_ex(clientssl, MSG1, strlen(MSG1), &written)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2836:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_ex(clientssl, MSG1, strlen(MSG1), &written))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2837:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG1))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2839:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG1, strlen(MSG1))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2840:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !SSL_write_ex(serverssl, MSG2, strlen(MSG2), &written)
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2841:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG2)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2845:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG2, strlen(MSG2)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:2876:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (protlen == strlen(servalpn)
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3028:63:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (!TEST_false(SSL_write_early_data(clientssl, MSG1, strlen(MSG1),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3034:62:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (!TEST_true(SSL_write_early_data(clientssl, MSG1, strlen(MSG1),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3041:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    && !TEST_mem_eq(buf, readbytes, MSG1, strlen(MSG1)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3079:58:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_early_data(clientssl, MSG1, strlen(MSG1),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3097:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_ex(clientssl, MSG2, strlen(MSG2), &written))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3098:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG2)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3102:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG2, strlen(MSG2)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3140:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_false(SSL_write_ex(clientssl, MSG1, strlen(MSG1), &written)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3157:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_false(SSL_write_ex(clientssl, MSG1, strlen(MSG1), &written))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3167:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_true(SSL_write_ex(clientssl, MSG1, strlen(MSG1), &written))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3168:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG1))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3172:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG1, strlen(MSG1))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3173:57:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_true(SSL_write_ex(serverssl, MSG2, strlen(MSG2), &written))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3174:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(written, strlen(MSG2))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3176:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_mem_eq(buf, readbytes, MSG2, strlen(MSG2)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:3510:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                 strlen(negotiated_scipher)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4538:53:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (!TEST_int_eq(SSL_write(clientssl, mess, strlen(mess)), strlen(mess))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4538:68:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (!TEST_int_eq(SSL_write(clientssl, mess, strlen(mess)), strlen(mess))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4540:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                         strlen(mess)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4543:53:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (!TEST_int_eq(SSL_write(serverssl, mess, strlen(mess)), strlen(mess))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4543:68:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (!TEST_int_eq(SSL_write(serverssl, mess, strlen(mess)), strlen(mess))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4545:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                         strlen(mess)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4606:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_int_eq(SSL_write(peerwrite, mess, strlen(mess)), -1)
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4623:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_int_eq(SSL_write(peerwrite, mess, strlen(mess)), strlen(mess))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4623:64:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_int_eq(SSL_write(peerwrite, mess, strlen(mess)), strlen(mess))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4624:69:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_int_eq(SSL_read(peerupdate, buf, sizeof(buf)), strlen(mess)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4628:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_int_eq(SSL_write(peerwrite, mess, strlen(mess)), strlen(mess))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4628:64:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!TEST_int_eq(SSL_write(peerwrite, mess, strlen(mess)), strlen(mess))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:4629:69:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_int_eq(SSL_read(peerupdate, buf, sizeof(buf)), strlen(mess)))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5279:62:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (!TEST_true(SSL_write_early_data(clientssl, MSG1, strlen(MSG1),
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5281:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                || !TEST_size_t_eq(written, strlen(MSG1))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5285:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                || !TEST_mem_eq(MSG1, readbytes, buf, strlen(MSG1))
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5530:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                           strlen(appdata));
/home/capstone/Desktop/root/openssl-1.1.1f/test/sslapitest.c:5553:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            || !TEST_size_t_eq(tickdlen, strlen(appdata))
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:270:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(in);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:274:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    out = OPENSSL_malloc(strlen(in) + 1);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:355:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        (client_proto_len != strlen(alpn_expected) ||
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:468:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    *outlen = strlen(custom_ext_cli_string);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:486:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    *outlen = strlen(custom_ext_cli_string);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:508:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    *outlen = strlen(custom_ext_cli_string);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:518:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (inlen != strlen(custom_ext_srv_string))
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:554:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (inlen != strlen(custom_ext_cli_string))
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:575:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (inlen != strlen(custom_ext_cli_string))
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:598:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (inlen != strlen(custom_ext_cli_string))
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:610:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    *outlen = strlen(custom_ext_srv_string);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:1009:62:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (strspn(psk_key, "abcdefABCDEF1234567890") != strlen(psk_key)) {
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltest_old.c:1041:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            i = strlen(argv[0]);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltestlib.c:28:5:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
    usleep(millis * 1000);
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltestlib.c:271:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return tls_dump_write(bio, str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltestlib.c:614:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return mempacket_test_write(bio, str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltestlib.c:843:36:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
                               int read)
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltestlib.c:881:23:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
        if (isdtls && read) {
/home/capstone/Desktop/root/openssl-1.1.1f/test/ssltestlib.h:22:36:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
                               int read);
/home/capstone/Desktop/root/openssl-1.1.1f/test/test_test.c:309:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return TEST(0, TEST_mem_eq(p, strlen(p), q, strlen(q)));
/home/capstone/Desktop/root/openssl-1.1.1f/test/test_test.c:309:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return TEST(0, TEST_mem_eq(p, strlen(p), q, strlen(q)));
/home/capstone/Desktop/root/openssl-1.1.1f/test/test_test.c:398:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
           & TEST(0, TEST_mem_eq(r, strlen(r), s, strlen(s)));
/home/capstone/Desktop/root/openssl-1.1.1f/test/test_test.c:398:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
           & TEST(0, TEST_mem_eq(r, strlen(r), s, strlen(s)));
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/driver.c:286:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len += strlen(list[i]);
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/driver.c:295:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        p += strlen(strcpy(p, list[i]));
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/driver.c:307:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(dir) + strlen(sep) + strlen(file) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/driver.c:307:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(dir) + strlen(sep) + strlen(file) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/driver.c:307:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(dir) + strlen(sep) + strlen(file) + 1;
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/format_output.c:254:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    strcpy(p - strlen(q), q);
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/main.c:93:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t i, n = strlen(option);
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/stanza.c:78:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    for (q = p + strlen(p) - 1; q != p && isspace((unsigned char)*q); )
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/tap_bio.c:151:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!tap_write_ex(b, str, strlen(str), &m))
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/tests.c:259:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                 s1, s1 == NULL ? 0 : strlen(s1),
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/tests.c:260:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                 s2, s2 == NULL ? 0 : strlen(s2));
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/tests.c:273:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                 s1, s1 == NULL ? 0 : strlen(s1),
/home/capstone/Desktop/root/openssl-1.1.1f/test/testutil/tests.c:274:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                 s2, s2 == NULL ? 0 : strlen(s2));
/home/capstone/Desktop/root/openssl-1.1.1f/test/time_offset_test.c:75:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    at.length = strlen(testdata->data);
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13ccstest.c:240:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return watchccs_write(bio, str, strlen(str));
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13ccstest.c:339:63:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                || !TEST_true(SSL_write_early_data(cssl, msg, strlen(msg),
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13encryptiontest.c:221:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        totlen += strlen(str[outer]);
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13secretstest.c:319:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                               strlen(client_hts_label), client_hts,
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13secretstest.c:334:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                               strlen(server_hts_label), server_hts,
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13secretstest.c:368:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                               strlen(client_ats_label), client_ats,
/home/capstone/Desktop/root/openssl-1.1.1f/test/tls13secretstest.c:383:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                               strlen(server_ats_label), server_ats,
/home/capstone/Desktop/root/openssl-1.1.1f/test/uitest.c:26:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return strlen(buf);
/home/capstone/Desktop/root/openssl-1.1.1f/test/v3nametest.c:291:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t namelen = strlen(*pname);
/home/capstone/Desktop/root/openssl-1.1.1f/test/x509_time_test.c:264:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    t.length = strlen(x509_cmp_tests[idx].data);
/home/capstone/Desktop/root/openssl-1.1.1f/test/x509_time_test.c:475:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        || !TEST_int_eq(rv, (int)strlen(readable))
