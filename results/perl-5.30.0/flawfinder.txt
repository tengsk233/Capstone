/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:81:12:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
    return chmod(path, mode);
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:588:13:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#    define chmod		PerlLIO_chmod
/home/capstone/Desktop/root/perl-5.30.0/caretx.c:112:19:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
    SSize_t len = readlink(PROCSELFEXE_PATH, buf, sizeof(buf) - 1);
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:738:35:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#define PerlLIO_chmod(file, mode)	chmod((file), (mode))
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:739:41:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
#define PerlLIO_chown(file, owner, grp)	chown((file), (owner), (grp))
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1782:8:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#undef chmod
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1789:9:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
	return chmod(name, pmode);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2ish.h:451:9:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#define chmod(path,mode)   os2_chmod((path),(mode))
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:3824:11:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
    len = readlink(tmps, buf, sizeof(buf) - 1);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2147:9:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
  ret = chmod(changefile, mode);
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:498:9:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#define chmod(file_spec, mode) my_chmod((file_spec), (mode))
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:932:12:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
    return chown(filename, owner, group);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1136:1:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
chown(const char *path, uid_t owner, gid_t group)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3428:12:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
    return chmod(PerlDir_mapA(path), mode);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3998:12:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
    return gets(s);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:317:16:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
EXTERN_C char *gets(char* buffer);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:433:12:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
extern	int	chown(const char *p, uid_t o, gid_t g);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:267:8:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
#undef gets
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:268:9:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
#define gets			win32_gets
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:280:9:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#define chmod(p,m)		win32_chmod(p,m)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:390:10:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
#  undef gets
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:392:9:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
#define gets			win32_gets
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:412:10:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#  undef chmod
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:414:9:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#define chmod(p,m)		win32_chmod(p,m)
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2223:10:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
  return gets(s);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.h:80:9:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
#define chown xcechown
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:142:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(buffer, commandLine);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:202:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(buffer, commandLine);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:358:4:  [4] (buffer) sscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. If the scanf format is influenceable by an attacker, it's exploitable.
			sscanf(pclp->m_argv[index], (char *)"-{%x", &pclp->m_qSemaphore);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:449:4:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
			strcpy(new_argv[i], pclp->m_argv[i]);  // copy old arg strings
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:472:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(pclp->m_argv[pclp->m_argc], new_arg);	// Appended the new argument.
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:697:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(pclp->m_argv[i], pclp->m_argv[i+1]);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:774:4:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
			sprintf(pXs, (char *)"%c%05.5s", letter, pPid);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:776:8:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
			if (access(templatestr, 0) != 0)	// File does not exist
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:789:5:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
				sprintf(pXs, (char *)"%c%c%04.5s", letter1, letter, pPid);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:791:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
				if (access(templatestr, 0) != 0)	// File does not exist
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:845:11:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
		tptr += sprintf(tptr, (char *)"%s ", argv[k]);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:851:3:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
		system(tempCmd);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:167:6:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
	if (access(NWDEFPERLTEMP, 0) != 0)
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:183:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(sNUL, NWDEFPERLROOT);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:185:7:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
		if (access((const char *)sNUL, 0) != 0)
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:206:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(cmdLineCopy, PERL_COMMAND_NAME);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:207:3:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
		strcat(cmdLineCopy, (char *)" ");	// Space between the Perl Command and the input script name.
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:208:3:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
		strcat(cmdLineCopy, sysCmdLine);	// The command line parameters built into 
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:221:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
				strcpy(psdata->m_commandLine, cmdLineCopy);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:315:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(sNUL, NWDEFPERLROOT);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:317:7:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
		if (access((const char *)sNUL, 0) == 0)
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:382:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
				strcpy(psdata->m_commandLine, (char *)cmdLine);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:985:5:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
				printf((char *)"\n\nPress any key to exit\n");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1125:4:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
			strcpy( both, var );
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1126:4:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
			strcat( both, (char *)"=" );
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1127:4:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
			strcat( both, val );
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1132:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
				strcpy(env[cnt], both);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1288:4:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
			strcpy(psdata->m_commandLine, cmdLine);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1348:2:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	sprintf(sPerlScreenName, "%s%s.%s.%s", PERL_COMMAND_NAME,
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:97:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(ptpf->m_argv[dindex], ptpf->m_pipeCommand->m_argv[sindex]);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:122:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
				strcpy(ptpf->m_redirect, (char *)">");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:124:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
				strcpy(ptpf->m_redirect, (char *)"(CLIB_OPT)/>");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:129:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
				strcpy(ptpf->m_redirect, (char *)"<");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:131:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
				strcpy(ptpf->m_redirect, (char *)"(CLIB_OPT)/<");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:133:3:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
		strcat(ptpf->m_redirect, ptpf->m_fileName);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:138:4:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
			sprintf(tbuf, (char *)" -{%x", ptpf->m_perlSynchSemaphore);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:139:4:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
			strcat(ptpf->m_redirect, tbuf);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:142:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(ptpf->m_argv[dindex], (char*) ptpf->m_redirect);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:349:2:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
	strcat(tempName, (char *)"\\plXXXXXX.tmp");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:358:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(ptpf->m_fileName, tempName);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/intdef.h:49:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
#define strcpy(x,y)     \
/home/capstone/Desktop/root/perl-5.30.0/NetWare/intdef.h:53:9:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
#define strcat(x,y)		 NWLstrbcpy((x + NWstrlen(x)), y, (NWstrlen(y) +1))
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:75:12:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
    return access(path, mode);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:288:14:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
	    return (vfprintf(fp, format, args));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:579:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(buff, filename);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:737:13:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return (vprintf(format, args));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:747:13:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return (vprintf(format, marker));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:874:1:  [4] (shell) execv:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
execv(char *cmdname, char **argv)
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:883:1:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
execvp(char *cmdname, char **argv)
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:986:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(cmd2, cmd);
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:502:12:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#    undef getlogin
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:539:13:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#    undef  popen
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:580:13:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#    define vfprintf		PerlSIO_vprintf
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:587:13:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
#    define access		PerlLIO_access
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:600:13:  [4] (tmpfile) mktemp:Temporary file race condition (CWE-377).  
#    define mktemp		PerlLIO_mktemp
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:618:13:  [4] (shell) execl:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#    define execl		PerlProc_execl
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:619:13:  [4] (shell) execv:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#    define execv		PerlProc_execv
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:620:13:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#    define execvp		PerlProc_execvp
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:625:13:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#    define getlogin		PerlProc_getlogin
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:629:13:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#    define popen		PerlProc_popen
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:145:2:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	sprintf(unix_pipe, "/PIPE/%s", pipe_name);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:146:2:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	sprintf(ami_pipe, "PIPE:%s", pipe_name);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1008:16:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#warning(using system!)
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1009:4:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
			sprintf(full, "%s %s %s ", interpreter_conv,
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1012:4:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
			sprintf(full, "%s %s ", interpreter_args,
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1028:4:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
			sprintf(full, "%s ", filename_conv);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1079:6:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
					strcat(full, buff);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1085:6:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
					strcat(full, *cur);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1091:5:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
				strcat(full, *cur);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:286:6:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
					strcpy(var, *envp);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:355:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
				sprintf(name, "%s/%s", pathpart, filename);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:358:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
				sprintf(name, "%s", filename);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.h:29:9:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#define execvp(filename, argv) myexecvp(TRUE, filename, argv)
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.h:30:9:  [4] (shell) execv:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#define execv(path, argv) myexecv(TRUE, path, argv)
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.h:31:9:  [4] (shell) execl:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#define execl(path, ...) myexecl(TRUE, path, __VA_ARGS__)
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib.c:1430:4:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
   strcat(mode2, writing ? "w" : "r" );
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib_private.h:65:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
      fprintf ( stderr,   \
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib_private.h:74:4:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
   fprintf(stderr,zf)
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib_private.h:76:4:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
   fprintf(stderr,zf,za1)
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib_private.h:78:4:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
   fprintf(stderr,zf,za1,za2)
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib_private.h:80:4:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
   fprintf(stderr,zf,za1,za2,za3)
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib_private.h:82:4:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
   fprintf(stderr,zf,za1,za2,za3,za4)
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib_private.h:84:4:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
   fprintf(stderr,zf,za1,za2,za3,za4,za5)
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/zutil.h:246:39:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  define Trace(x) {if (z_verbose>=0) fprintf x ;}
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/zutil.h:247:39:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  define Tracev(x) {if (z_verbose>0) fprintf x ;}
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/zutil.h:248:40:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  define Tracevv(x) {if (z_verbose>1) fprintf x ;}
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/zutil.h:249:48:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  define Tracec(c,x) {if (z_verbose>0 && (c)) fprintf x ;}
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/zutil.h:250:49:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  define Tracecv(c,x) {if (z_verbose>1 && (c)) fprintf x ;}
/home/capstone/Desktop/root/perl-5.30.0/cpan/Digest-SHA/src/sha.c:476:3:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
		strcat(s->base64, out);
/home/capstone/Desktop/root/perl-5.30.0/cpan/Digest-SHA/src/sha.c:479:2:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
	strcat(s->base64, out);
/home/capstone/Desktop/root/perl-5.30.0/cpan/Win32API-File/const2perl.h:93:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy( sVarName, sModName );
/home/capstone/Desktop/root/perl-5.30.0/cpan/Win32API-File/const2perl.h:155:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy( sVarName, sModName );				\
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:501:7:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
	char system[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:505:47:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
	cygwin_internal (CW_GET_CYGDRIVE_INFO, user, system,
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:509:13:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
            sprintf(flags, "%s,cygdrive,%s", user_flags, user);
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:511:13:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
            sprintf(flags, "%s,cygdrive,%s", system_flags, system);
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:511:60:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
            sprintf(flags, "%s,cygdrive,%s", system_flags, system);
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:523:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(flags, mnt->mnt_type);
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:526:7:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
		    strcat(flags, mnt->mnt_opts);
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:539:11:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
	    char system[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:543:51:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
	    cygwin_internal (CW_GET_CYGDRIVE_INFO, user, system,
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:548:7:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
		    sprintf(flags, "%s,cygdrive,%s", user_flags, user);
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:553:7:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
		    sprintf(flags, "%s,cygdrive,%s", system_flags, system);
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:553:54:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
		    sprintf(flags, "%s,cygdrive,%s", system_flags, system);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:37:27:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
        l1->exit_status = system (cm);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:46:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy (l1->command, cm);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:85:16:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
      retval = system (l1->command);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:193:39:  [4] (shell) execl:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
                result = convretcode (execl (shell,shell,unixysh ? "-c" : "/c",cmd,NULL),cmd,execf);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:195:25:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
		result = convretcode (system (cmd),cmd,execf);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:219:12:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
        rc=execvp (argv[0],argv);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:285:13:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
            strcpy (pattern,name);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:307:21:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
                    strcpy (p1,pglob.gl_pathv[ic]);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:417:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy (expp,perlprefix);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:427:13:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
            strcat (expp,"/lib" PERL5);
/home/capstone/Desktop/root/perl-5.30.0/doio.c:2659:24:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
                  if ((access(s,F_OK) != -1))
/home/capstone/Desktop/root/perl-5.30.0/doio.c:2685:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
				if((access(s,F_OK) != -1))
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dba.c:28:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(name, p);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbd.c:31:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(name, p);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/tune.h:20:18:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define debug(x)	printf x
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/util.c:17:2:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
	fprintf(stderr, s1, s2);
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:29:8:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#undef fprintf
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:34:8:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#undef fscanf
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:45:8:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#undef popen
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:57:8:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#undef vfprintf
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:58:8:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#undef printf
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:64:9:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define printf(fmt,args...) PerlIO_stdoutf(fmt,##args)
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:66:9:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define printf PerlIO_stdoutf
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:69:9:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define fprintf			PerlIO_printf
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:77:9:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define vfprintf(f,fmt,a)	PerlIO_vprintf(f,fmt,a)
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:102:9:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#define popen(c,m)		my_popen(c,m)
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:122:9:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#define fscanf			_CANNOT _fscanf_
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:349:26:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define PerlSIO_printf			fprintf
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:350:27:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define PerlSIO_stdoutf			printf
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:351:34:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define PerlSIO_vprintf(f,fmt,a)	vfprintf(f,fmt,a)
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:737:36:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
#define PerlLIO_access(file, mode)	access((file), (mode))
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:762:31:  [4] (tmpfile) mktemp:Temporary file race condition (CWE-377).  
#define PerlLIO_mktemp(file)		mktemp((file))
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:1093:29:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#define PerlProc_crypt(c,s)	crypt((c), (s))
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:1097:2:  [4] (shell) execl:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
	execl((c), (w), (x), (y), (z))
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:1098:30:  [4] (shell) execv:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#define PerlProc_execv(c, a)	execv((c), (a))
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:1099:31:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#define PerlProc_execvp(c, a)	execvp((c), (a))
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:1104:29:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#define PerlProc_getlogin()	getlogin()
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:44:8:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#undef fprintf
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:49:8:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#undef fscanf
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:60:8:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#undef popen
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:72:8:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#undef vfprintf
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:73:8:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#undef printf
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:75:9:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define fprintf    _CANNOT _fprintf_
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:76:9:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define printf     _CANNOT _printf_
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:89:9:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#define fscanf  _CANNOT _fscanf_
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:90:9:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define vfprintf(f,fmt,a)  _CANNOT _vfprintf_
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:123:9:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#define popen(c,m)  _CANNOT _popen_
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:181:6:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	    sprintf(buf + len, ", possible problematic module: '%s'", fail);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1041:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		    strcpy(tbuf, real_name);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1108:11:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
	    rc = execvp(real_name,argv);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1384:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(news, PL_sh_path);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1385:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(news + l, cmd + 7);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1426:22:  [4] (shell) execl:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
                rc = execl(shell,shell,copt,cmd,(char*)0);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1659:11:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
    res = popen(cmd, mode);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1664:11:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
    res = popen(cmd, mode);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1849:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(tpath, p);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1851:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(tpath + len + 1, TMPPATH1);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2139:6:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	    sprintf(s, "%s%s[No description found in OSO001.MSG]", 
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2194:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(buf, oname);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2210:6:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
     strcpy(buf, orig);		/* _execname() is always uppercased */
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2256:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(mangle_ret, newp);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2402:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(mangle_ret + tol, s + froml);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2450:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(mangle_ret + newl, s + oldl);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4962:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(PL_sh_path, SH_PATH);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5053:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(str, tpath);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5088:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(buf,s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5113:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(buf,s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5356:5:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
    sprintf(buffer, pat, value);
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:100:2:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
	vsnprintf(s, sizeof(last_error) - (s - last_error), format, va);
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:137:2:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	sprintf(retstr->strptr, "%s", "ok");
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:164:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(retstr->strptr, "%s", "ok");
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:178:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(retstr->strptr, "%s", "ok");
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1262:16:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
EXTERN_C char *crypt(const char *, const char *);
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1266:16:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
EXTERN_C char *crypt(const char *, const char *);
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1588:20:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
#define my_sprintf sprintf
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1613:58:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1613:124:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#      define my_snprintf(buffer, max, ...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1616:43:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#    define my_snprintf(buffer, max, ...) snprintf(buffer, max, __VA_ARGS__)
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1627:59:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#      define my_vsnprintf(buffer, max, ...) ({ int len = vsnprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, vsnprintf); len; })
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1627:126:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#      define my_vsnprintf(buffer, max, ...) ({ int len = vsnprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, vsnprintf); len; })
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1630:44:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#    define my_vsnprintf(buffer, max, ...) vsnprintf(buffer, max, __VA_ARGS__)
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1657:79:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#  define PERL_MY_SNPRINTF_POST_GUARD(len, max) PERL_SNPRINTF_CHECK(len, max, snprintf)
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1663:80:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#  define PERL_MY_VSNPRINTF_POST_GUARD(len, max) PERL_SNPRINTF_CHECK(len, max, vsnprintf)
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4215:9:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#ifndef crypt
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4216:7:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
char *crypt (const char*, const char*);
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4220:13:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#    ifndef getlogin
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4221:7:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
char *getlogin (void);
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:380:29:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
        const STRLEN len2 = vsnprintf(buffer + len1, sizeof(buffer) - len1, fmt, ap);
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:5249:5:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    vfprintf(stderr, pat, arglist);
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:199:34:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
#   define PERL_EFF_ACCESS(p,f) (access((p), (f) | EFF_ONLY_OK))
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:258:11:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
    res = access(path, mode);
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:3202:15:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
	    result = access(name, access_mode);
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:786:11:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#   undef crypt
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:787:17:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#   if !defined(crypt) && CRYPT_R_PROTO == REENTRANT_PROTO_B_CCS
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:788:16:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#       define crypt(a, b) crypt_r(a, b, PL_reentrant_buffer->_crypt_struct_buffer)
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:788:28:  [4] (crypto) crypt_r:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#       define crypt(a, b) crypt_r(a, b, PL_reentrant_buffer->_crypt_struct_buffer)
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:790:17:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#   if !defined(crypt) && CRYPT_R_PROTO == REENTRANT_PROTO_B_CCD
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:791:16:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#       define crypt(a, b) crypt_r(a, b, &PL_reentrant_buffer->_crypt_data)
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:791:28:  [4] (crypto) crypt_r:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#       define crypt(a, b) crypt_r(a, b, &PL_reentrant_buffer->_crypt_data)
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1038:11:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#   undef getlogin
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1039:17:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#   if !defined(getlogin) && GETLOGIN_R_PROTO == REENTRANT_PROTO_I_BW
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1040:16:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#       define getlogin() ((PL_reentrant_retint = getlogin_r(PL_reentrant_buffer->_getlogin_buffer, PL_reentrant_buffer->_getlogin_size)) == 0 ? PL_reentrant_buffer->_getlogin_buffer : ((PL_reentrant_retint == ERANGE) ? (char *) Perl_reentrant_retry("getlogin") : 0))
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1042:17:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#   if !defined(getlogin) && GETLOGIN_R_PROTO == REENTRANT_PROTO_I_BI
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1043:16:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#       define getlogin() ((PL_reentrant_retint = getlogin_r(PL_reentrant_buffer->_getlogin_buffer, PL_reentrant_buffer->_getlogin_size)) == 0 ? PL_reentrant_buffer->_getlogin_buffer : ((PL_reentrant_retint == ERANGE) ? (char *) Perl_reentrant_retry("getlogin") : 0))
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1045:17:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#   if !defined(getlogin) && GETLOGIN_R_PROTO == REENTRANT_PROTO_B_BW
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1046:16:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#       define getlogin() getlogin_r(PL_reentrant_buffer->_getlogin_buffer, PL_reentrant_buffer->_getlogin_size)
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1048:17:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#   if !defined(getlogin) && GETLOGIN_R_PROTO == REENTRANT_PROTO_B_BI
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1049:16:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#       define getlogin() getlogin_r(PL_reentrant_buffer->_getlogin_buffer, PL_reentrant_buffer->_getlogin_size)
/home/capstone/Desktop/root/perl-5.30.0/sbox32_hash.h:8:48:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define SBOX32_WARN6(pat,v0,v1,v2,v3,v4,v5)    printf(pat, v0, v1, v2, v3, v4, v5)
/home/capstone/Desktop/root/perl-5.30.0/sbox32_hash.h:9:48:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define SBOX32_WARN5(pat,v0,v1,v2,v3,v4)       printf(pat, v0, v1, v2, v3, v4)
/home/capstone/Desktop/root/perl-5.30.0/sbox32_hash.h:10:48:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define SBOX32_WARN4(pat,v0,v1,v2,v3)          printf(pat, v0, v1, v2, v3)
/home/capstone/Desktop/root/perl-5.30.0/sbox32_hash.h:11:48:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define SBOX32_WARN3(pat,v0,v1,v2)             printf(pat, v0, v1, v2)
/home/capstone/Desktop/root/perl-5.30.0/sbox32_hash.h:12:48:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define SBOX32_WARN2(pat,v0,v1)                printf(pat, v0, v1)
/home/capstone/Desktop/root/perl-5.30.0/sbox32_hash.h:13:41:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define NOTE3(pat,v0,v1,v2)             printf(pat, v0, v1, v2)
/home/capstone/Desktop/root/perl-5.30.0/sbox32_hash.h:20:41:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define NOTE3(pat,v0,v1,v2)             printf(pat, v0, v1, v2)
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_proto.h:26:15:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
extern char  *strcat(char *dst, const char *src);
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_proto.h:38:15:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
extern char*  strcpy(char *dst, const char *src);
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_stubs.c:25:5:  [4] (shell) execv:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
int execv(const char* path, char* const argv [])  { return setENOSYS(); }
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_stubs.c:26:5:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
int execvp(const char* path, char* const argv []) { return setENOSYS(); }
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_stubs.c:29:7:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
FILE *popen(const char *command, const char *mode) { return 0; }
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_stubs.h:12:5:  [4] (shell) execv:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
int execv(const char* path, char* const argv []);
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_stubs.h:13:5:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
int execvp(const char* path, char* const argv []);
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_stubs.h:16:7:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
FILE *popen(const char *command, const char *mode);
/home/capstone/Desktop/root/perl-5.30.0/time64.c:107:35:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#    define TIME64_TRACE(format) (fprintf(stderr, format))
/home/capstone/Desktop/root/perl-5.30.0/time64.c:108:45:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#    define TIME64_TRACE1(format, var1)    (fprintf(stderr, format, var1))
/home/capstone/Desktop/root/perl-5.30.0/time64.c:109:51:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#    define TIME64_TRACE2(format, var1, var2)    (fprintf(stderr, format, var1, var2))
/home/capstone/Desktop/root/perl-5.30.0/time64.c:110:57:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#    define TIME64_TRACE3(format, var1, var2, var3)    (fprintf(stderr, format, var1, var2, var3))
/home/capstone/Desktop/root/perl-5.30.0/util.c:5072:18:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
        retval = vsnprintf(buffer, len, format, ap);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5074:18:  [4] (format) vsprintf:Potential format string problem (CWE-134).  Make format string constant. 
        retval = vsprintf(buffer, format, ap);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5119:14:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
    retval = vsnprintf(buffer, len, format, apc);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5122:14:  [4] (format) vsprintf:Potential format string problem (CWE-134).  Make format string constant. 
    retval = vsprintf(buffer, format, apc);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5127:14:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
    retval = vsnprintf(buffer, len, format, ap);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5130:14:  [4] (format) vsprintf:Potential format string problem (CWE-134).  Make format string constant. 
    retval = vsprintf(buffer, format, ap);
/home/capstone/Desktop/root/perl-5.30.0/util.c:6127:11:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
    cnt = snprintf(cmd, sizeof(cmd), ctx->format,
/home/capstone/Desktop/root/perl-5.30.0/util.c:6134:8:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#undef popen
/home/capstone/Desktop/root/perl-5.30.0/util.c:6137:20:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
        FILE* fp = popen(cmd, "r");
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:105:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(WorkString, argv[i]);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:111:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(TildeSub[TildeSubCount].Tag, WorkString);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:112:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(TildeSub[TildeSubCount].Value, TempValue);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:134:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(WorkString, LineBuffer);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:140:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(TildeSub[TildeSubCount].Tag, WorkString);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:141:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(TildeSub[TildeSubCount].Value, TempValue);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:190:7:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
      strcat(TempValue, SecondaryLineBuffer);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:208:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(ConfigSub[ConfigSubCount].Tag, LineBuffer);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:210:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(ConfigSub[ConfigSubCount].Value, TempValue);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:380:13:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
            strcat(TempBuffer, TildeSub[k].Value);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:391:11:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
          strcat(TempBuffer, TempTilde);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:408:11:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
          strcat(TempBuffer, TempTilde);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:434:5:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
    strcat(TempBuffer, TempTilde);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:442:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(LineBuffer, TempBuffer);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3291:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(wmbx, mbx1);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3292:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(rmbx, mbx2);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3446:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(wmbx, mbx1);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3447:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(rmbx, mbx2);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3578:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(out, device);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3593:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(out, mbx);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4082:5:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
    sprintf(customization, cust_str, title);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4331:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(p,p+1);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4335:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(p,p+1);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6046:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(trndir,*dir == '/' ? dir + 1: dir);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6586:13:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
            strcpy(buf, dir);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7486:7:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
      sprintf(vmspath,"\"^UP^%s\"",unixpath);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7601:8:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
       sprintf(vmspath,"\"^UP^%s\"",unixpath);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10104:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(dd->pattern, "%s*.*",dir);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10183:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(&text[i - 3], "%s;*", e->d_name);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11860:42:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
  unsigned long int objtyp = ACL$C_FILE, access, retsts, privused, iosb[2], flags;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11864:40:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
  struct itmlst_3 armlst[4] = {{sizeof access, CHP$_ACCESS, &access, &retlen},
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11864:62:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
  struct itmlst_3 armlst[4] = {{sizeof access, CHP$_ACCESS, &access, &retlen},
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:492:9:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#define crypt(a,b)  Perl_my_crypt(aTHX_ a,b)
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1011:12:  [4] (tmpfile) mktemp:Temporary file race condition (CWE-377).  
    return mktemp(Template);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1548:12:  [4] (shell) execl:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
    return execl(cmdname, arg0, arg1, arg2, arg3);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2191:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(*lpPtr, lpStr);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2198:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(m_lppEnvList[m_dwEnvCount], lpStr);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2284:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(lpStr, lpEnvPtr);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2293:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		    strcpy(lpStr, lpEnvPtr);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2301:4:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
			strcpy(lpStr, lpLocalEnv);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2318:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(lpStr, lpLocalEnv);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:179:6:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	    strcpy(ptr, pPath);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:192:3:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
		wcscpy(dirTableW[index], wBuffer);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:252:6:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
	    wcscpy(ptr, pPath);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:264:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(dirTableA[index], ansi);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:420:6:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	    strcpy(szBuffer, GetDirA(driveIndex));
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:421:6:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
	    strcat(szBuffer, &pInName[2]);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:435:6:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	    strcpy(szBuffer, GetDefaultDirA());
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:438:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(&szBuffer[2], pInName);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:447:7:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
		    strcat(szBuffer, pInName);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:509:6:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	    strcpy(&lpStr[4], lpDirStr);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:652:6:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
	    wcscpy(szBuffer, GetDirW(driveIndex));
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:653:6:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
	    wcscat(szBuffer, &pInName[2]);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:667:6:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
	    wcscpy(szBuffer, GetDefaultDirW());
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:670:3:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
		wcscpy(&szBuffer[2], pInName);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:679:7:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
		    wcscat(szBuffer, pInName);
/home/capstone/Desktop/root/perl-5.30.0/win32/vmem.h:44:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(szBuffer, "%s %lx\n", str, x);
/home/capstone/Desktop/root/perl-5.30.0/win32/vmem.h:1179:2:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
	sprintf(szBuffer, str, x, y, c);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:91:10:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#  undef getlogin
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:92:11:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#  define getlogin g_getlogin
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:339:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(mod_name, w32_module_name);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:366:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(++ptr, trailing_path);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:394:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(buffer, "%s-%s", stdlib, pl);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:416:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(regstr, "%s-%s", xlib, pl);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:422:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(pathstr, "%s/%s/lib", libname, pl);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:432:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(pathstr, "%s/lib", libname);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:724:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(cmd2, cmd);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:855:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(scanname, filename);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:913:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(dirp->start, buffer);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:932:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(dirp->dirstr.d_name, dirp->curr);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:976:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(dirp->start + endpos, buffer);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1125:1:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
getlogin(void)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1663:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(tmpstart, fdata.cFileName);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1680:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(path,tmpbuf);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1875:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(curitem, name);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2090:9:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
        sprintf(buf, " (%s)", g_osver.szCSDVersion);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2098:6:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	    strcpy(name->nodename, hep->h_name);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2138:6:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	    strcpy(name->machine, arch);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2715:13:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return (vfprintf(fp, format, marker));
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2724:13:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return (vprintf(format, marker));
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2730:13:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return (vfprintf(fp, format, args));
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2736:13:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return (vprintf(format, args));
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3151:26:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
	((aTHXa(PERL_GET_THX)), wcscpy(wOldName, PerlDir_mapW(wOldName)),
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3206:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(szOldName, PerlDir_mapA(oname));
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3421:12:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
    return access(PerlDir_mapA(path), mode);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3549:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(ptr, arg);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3626:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(curfullcmd, cmd);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3638:10:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	        strcpy(curfullcmd, exe_extensions[i]);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3733:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(ptr, szfilename);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:4215:6:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	    strcpy(buf, filename);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:278:10:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#  undef snprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:280:9:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#define snprintf	_snprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:280:18:  [4] (format) _snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#define snprintf	_snprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:281:9:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#define vsnprintf	_vsnprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:432:15:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
extern	char *	getlogin(void);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32ceio.c:105:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
        access |= GENERIC_WRITE;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32ceio.c:116:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
        access |= GENERIC_READ;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32ceio.c:126:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
        access |= GENERIC_READ;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32ceio.c:145:10:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
   if (!(access & GENERIC_WRITE))
/home/capstone/Desktop/root/perl-5.30.0/win32/win32ceio.c:147:25:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
   h = CreateFileW(path,access,share,NULL,create,attr,NULL);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32ceio.c:151:28:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
      h = CreateFileW(path,access,share,NULL,(create = OPEN_ALWAYS),attr,NULL);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32io.c:112:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
        access |= GENERIC_WRITE;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32io.c:123:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
        access |= GENERIC_READ;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32io.c:133:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
        access |= GENERIC_READ;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32io.c:151:24:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
   h = CreateFile(path,access,share,NULL,create,attr,NULL);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32io.c:155:27:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
      h = CreateFile(path,access,share,NULL,(create = OPEN_ALWAYS),attr,NULL);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:189:8:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#undef fprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:190:9:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define	fprintf			win32_fprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:191:8:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#undef vfprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:192:9:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define	vfprintf		win32_vfprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:193:8:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#undef printf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:194:9:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define	printf			win32_printf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:195:8:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#undef vprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:196:9:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define	vprintf			win32_vprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:255:9:  [4] (shell) execv:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#define execv			win32_execv
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:256:9:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#define execvp			win32_execvp
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:279:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
#define access(p,m)		win32_access(p,m)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:317:8:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#undef crypt
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:318:9:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#define crypt(t,s)		win32_crypt(t,s)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:208:8:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#undef fprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:209:9:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define	fprintf			win32_fprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:211:10:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  undef vfprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:213:9:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define	vfprintf		win32_vfprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:215:10:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  undef printf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:217:9:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define	printf			win32_printf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:219:10:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  undef vprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:221:9:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define	vprintf			win32_vprintf
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:365:10:  [4] (shell) execv:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#  undef execv
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:367:9:  [4] (shell) execv:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#define execv			win32_execv
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:369:10:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#  undef execvp
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:371:9:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#define execvp			win32_execvp
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:408:10:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
#  undef access
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:410:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
#define access(p,m)		win32_access(p,m)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:478:8:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#undef crypt
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:479:9:  [4] (crypto) crypt:The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment (CWE-327).  Use a different algorithm, such as SHA-256, with a larger, non-repeating salt. 
#define crypt(t,s)		win32_crypt(t,s)
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:55:10:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#  undef getlogin
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:56:11:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#  define getlogin g_getlogin
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:187:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(mod_name, w32_module_name);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:214:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(++ptr, trailing_path);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:241:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(buffer, "%s-%s", stdlib, pl);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:260:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(regstr, "%s-%s", xlib, pl);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:265:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(pathstr, "%s/%s/lib", libname, pl);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:273:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf(pathstr, "%s/lib", libname);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:540:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(cmd2, cmd);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:673:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(scanname, filename);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:720:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(dirp->start, ptr);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:739:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(dirp->dirstr.d_name, dirp->curr);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:772:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
		strcpy(dirp->start + endpos, ptr);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1034:6:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	    sprintf(buf, " (%s)", osver.szCSDVersion);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1048:6:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	    strcpy(name->nodename, hep->h_name);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1086:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(name->machine, arch);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1381:13:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return (vfprintf(fp, format, marker));
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1390:13:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return (vprintf(format, marker));
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1396:13:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return (vfprintf(fp, format, args));
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1402:13:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    return (vprintf(format, args));
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1811:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(ptr, arg);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1877:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy(curfullcmd, cmd);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1983:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(ptr, szfilename);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2552:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(szSourceFile, PerlDir_mapA(SvPV_nolen(ST(0))));
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.h:122:9:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
#define getlogin xcegetlogin
/home/capstone/Desktop/root/perl-5.30.0/zaphod32_hash.h:6:50:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define ZAPHOD32_WARN6(pat,v0,v1,v2,v3,v4,v5)    printf(pat, v0, v1, v2, v3, v4, v5)
/home/capstone/Desktop/root/perl-5.30.0/zaphod32_hash.h:7:50:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define ZAPHOD32_WARN5(pat,v0,v1,v2,v3,v4)       printf(pat, v0, v1, v2, v3, v4)
/home/capstone/Desktop/root/perl-5.30.0/zaphod32_hash.h:8:50:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define ZAPHOD32_WARN4(pat,v0,v1,v2,v3)          printf(pat, v0, v1, v2, v3)
/home/capstone/Desktop/root/perl-5.30.0/zaphod32_hash.h:9:50:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define ZAPHOD32_WARN3(pat,v0,v1,v2)             printf(pat, v0, v1, v2)
/home/capstone/Desktop/root/perl-5.30.0/zaphod32_hash.h:10:50:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define ZAPHOD32_WARN2(pat,v0,v1)                printf(pat, v0, v1)
/home/capstone/Desktop/root/perl-5.30.0/zaphod32_hash.h:11:41:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define NOTE3(pat,v0,v1,v2)             printf(pat, v0, v1, v2)
/home/capstone/Desktop/root/perl-5.30.0/zaphod32_hash.h:18:41:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define NOTE3(pat,v0,v1,v2)             printf(pat, v0, v1, v2)
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:94:14:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	char* ret = getenv(name);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:877:12:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
    return tmpnam(string);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1688:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	return getenv(varname);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlsys.h:236:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	return(getenv(varname));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlsys.h:249:12:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	char *e = getenv(varname);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlsys.h:767:12:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
    return tmpnam(string);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/testnlm/type/type.c:27:24:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  defaultDir = (char *)getenv("PERL_ROOT");
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:555:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#    define getenv		PerlEnv_getenv
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:606:13:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
#    define tmpnam		PerlLIO_tmpnam
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:333:16:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
		if (!(path = getenv("PATH")))
/home/capstone/Desktop/root/perl-5.30.0/caretx.c:99:34:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
            char *const tidied = realpath(SvPVX(caret_x), NULL);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:24:44:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
     && (temp_name = malloc (L_tmpnam)) && tmpnam (temp_name))
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:157:16:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ((shell=getenv("SHELL"))==NULL && (shell=getenv("COMSPEC"))==NULL)
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:157:49:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ((shell=getenv("SHELL"))==NULL && (shell=getenv("COMSPEC"))==NULL)
/home/capstone/Desktop/root/perl-5.30.0/ext/DynaLoader/dlutils.c:118:29:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ( (perl_dl_nonlazy = getenv("PERL_DL_NONLAZY")) != NULL
/home/capstone/Desktop/root/perl-5.30.0/ext/File-Glob/bsd_glob.c:460:12:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
		if ((h = getenv("HOME")) == NULL) {
/home/capstone/Desktop/root/perl-5.30.0/ext/File-Glob/bsd_glob.c:472:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
			if ((h = getenv("USERPROFILE")) == NULL) {
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbe.c:52:1:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
getopt(int argc, char **argv, char *optstring)
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbe.c:225:16:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
	while ((opt = getopt(argc, argv, "acdfFm:rstvx")) != ':') {
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbu.c:11:12:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
extern int	getopt();
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbu.c:72:14:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
	while ((c = getopt(argc, argv, "R")) != EOF)
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:565:30:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#define PerlEnv_getenv(str)		getenv((str))
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:768:30:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
#define PerlLIO_tmpnam(str)		tmpnam((str))
/home/capstone/Desktop/root/perl-5.30.0/malloc.c:1672:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
		char *s = getenv("PERL_MALLOC_OPT"), *t = s, *off;
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:697:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
		char *s = getenv("PERL_ASIF_PM");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1229:22:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
			    char *shell = getenv("EXECSHELL");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1236:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
				shell = getenv("OS2_SHELL");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1360:18:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ((shell = getenv("EMXSHELL")) != NULL)
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1362:23:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    else if ((shell = getenv("SHELL")) != NULL)
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1364:23:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    else if ((shell = getenv("COMSPEC")) != NULL)
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1661:19:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    char *shell = getenv("EMXSHELL");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1840:15:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    char *p = getenv("TMP"), *tpath;
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1843:17:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if (!p) p = getenv("TEMP");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1844:17:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if (!p) p = getenv("TMPDIR");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2414:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	newp = getenv(name = "PERLLIB_" STRINGIFY(PERL_REVISION)
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2418:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	    newp = getenv(name = "PERLLIB_" STRINGIFY(PERL_REVISION)
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2421:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	    newp = getenv(name = "PERLLIB_" STRINGIFY(PERL_REVISION) "_PREFIX");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2423:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	    newp = getenv(name = "PERLLIB_PREFIX");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4960:26:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    } else if ( (shell = getenv("PERL_SH_DRIVE")) ) {
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4964:26:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    } else if ( (shell = getenv("PERL_SH_DIR")) ) {
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4982:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    s = getenv("PERL_BEGINLIBPATH");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4986:31:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      rc = fill_extLibpath(0, getenv("PERL_PRE_BEGINLIBPATH"), getenv("PERL_POST_BEGINLIBPATH"), 0, "PERL_(PRE/POST)_BEGINLIBPATH");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4986:64:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      rc = fill_extLibpath(0, getenv("PERL_PRE_BEGINLIBPATH"), getenv("PERL_POST_BEGINLIBPATH"), 0, "PERL_(PRE/POST)_BEGINLIBPATH");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4988:6:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	s = getenv("PERL_ENDLIBPATH");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4992:30:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	    rc = fill_extLibpath(1, getenv("PERL_PRE_ENDLIBPATH"), getenv("PERL_POST_ENDLIBPATH"), 0, "PERL_(PRE/POST)_ENDLIBPATH");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4992:61:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	    rc = fill_extLibpath(1, getenv("PERL_PRE_ENDLIBPATH"), getenv("PERL_POST_ENDLIBPATH"), 0, "PERL_(PRE/POST)_ENDLIBPATH");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5042:8:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
#undef tmpnam
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5048:15:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    char *p = getenv("TMP"), *tpath;
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5050:17:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if (!p) p = getenv("TEMP");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5051:13:  [3] (tmpfile) tempnam:Temporary file race condition (CWE-377).  
    tpath = tempnam(p, "pltmp");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5140:15:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    char *s = getenv("USE_PERL_FLOCK");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5246:15:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    char *s = getenv("USE_PERL_PWENT");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5321:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    s = getenv("PW_PASSWD");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2ish.h:367:9:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
#define tmpnam	my_tmpnam
/home/capstone/Desktop/root/perl-5.30.0/os2/os2ish.h:369:14:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
#define rand	random
/home/capstone/Desktop/root/perl-5.30.0/os2/os2ish.h:370:9:  [3] (random) srand:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
#define srand	srandom
/home/capstone/Desktop/root/perl-5.30.0/os2/os2ish.h:370:15:  [3] (random) srandom:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
#define srand	srandom
/home/capstone/Desktop/root/perl-5.30.0/os2/os2ish.h:385:24:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#define my_getenv(var) getenv(var)
/home/capstone/Desktop/root/perl-5.30.0/plan9/plan9ish.h:126:24:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#define my_getenv(var) getenv(var)
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:3725:12:  [3] (misc) chroot:chroot can be very helpful, but is hard to use correctly (CWE-250, CWE-22).  Make sure the program immediately chdir("/"), closes file descriptors, and drops root privileges, and that all necessary files (and no more!) are in the new root. 
    PUSHi( chroot(tmps) >= 0 );
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1416:11:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
#   undef tmpnam
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1417:17:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
#   if !defined(tmpnam) && TMPNAM_R_PROTO == REENTRANT_PROTO_B_B
/home/capstone/Desktop/root/perl-5.30.0/reentr.h:1418:16:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
#       define tmpnam(a) tmpnam_r(a)
/home/capstone/Desktop/root/perl-5.30.0/regen-configure/dist/lib/C/fake/getopt.C:75:12:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
V_FUNC(int getopt, (nargc, nargv, ostr)
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:72:15:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
  while ((c = getopt(argc, argv, "f:")) != -1) {
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2169:3:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
  tmpnam(cp+strlen(cp));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13412:7:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
char *realpath(const char *file_name, char * resolved_name, ...);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13576:16:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
        rslt = realpath(filespec, outbuf);
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:88:10:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#  ifdef getenv
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:89:12:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#    undef getenv
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:92:11:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#  define getenv(v) Perl_my_getenv(aTHX_ v,TRUE)
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1053:12:  [3] (tmpfile) tmpnam:Temporary file race condition (CWE-377).  
    return tmpnam(string);
/home/capstone/Desktop/root/perl-5.30.0/win32/vmem.h:131:5:  [3] (misc) InitializeCriticalSection:Exceptions can be thrown in low-memory situations.  Use InitializeCriticalSectionAndSpinCount instead. 
    InitializeCriticalSection(&m_cs);
/home/capstone/Desktop/root/perl-5.30.0/win32/vmem.h:224:5:  [3] (misc) EnterCriticalSection:On some versions of Windows, exceptions can be thrown in low-memory situations.  Use InitializeCriticalSectionAndSpinCount instead. 
    EnterCriticalSection(&m_cs);
/home/capstone/Desktop/root/perl-5.30.0/win32/vmem.h:501:5:  [3] (misc) InitializeCriticalSection:Exceptions can be thrown in low-memory situations.  Use InitializeCriticalSectionAndSpinCount instead. 
    InitializeCriticalSection(&m_cs);
/home/capstone/Desktop/root/perl-5.30.0/win32/vmem.h:872:5:  [3] (misc) EnterCriticalSection:On some versions of Windows, exceptions can be thrown in low-memory situations.  Use InitializeCriticalSectionAndSpinCount instead. 
    EnterCriticalSection(&m_cs);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2915:6:  [3] (tmpfile) GetTempFileName:Temporary file race condition in certain cases (e.g., if run as SYSTEM in many versions of Windows) (CWE-377).  
	if (GetTempFileName(prefix, "plx", 0, filename)) {
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:320:8:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#undef getenv
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:321:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#define getenv win32_getenv
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:492:8:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#undef getenv
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:493:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#define getenv win32_getenv
/home/capstone/Desktop/root/perl-5.30.0/win32/win32thread.h:17:23:  [3] (misc) InitializeCriticalSection:Exceptions can be thrown in low-memory situations.  Use InitializeCriticalSectionAndSpinCount instead. 
#define MUTEX_INIT(m) InitializeCriticalSection(m)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32thread.h:18:23:  [3] (misc) EnterCriticalSection:On some versions of Windows, exceptions can be thrown in low-memory situations.  Use InitializeCriticalSectionAndSpinCount instead. 
#define MUTEX_LOCK(m) EnterCriticalSection(m)
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1525:6:  [3] (tmpfile) GetTempFileName:Temporary file race condition in certain cases (e.g., if run as SYSTEM in many versions of Windows) (CWE-377).  
	if (GetTempFileName(prefix, "plx", 0, filename)) {
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:733:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf[50]={'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:73:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char sPerlScreenName[MAX_DN_BYTES * sizeof(char)] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:145:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char sysCmdLine[MAX_COMMAND_SIZE] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:146:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char cmdLineCopy[sizeof(PERL_COMMAND_NAME)+sizeof(sysCmdLine)+2] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:181:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char sNUL[MAX_DN_BYTES] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:184:3:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
		strcat(sNUL, "\\nwnul");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:190:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
			fp = fopen((const char *)sNUL, (const char *)"w");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:313:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char sNUL[MAX_DN_BYTES] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:316:3:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
		strcat(sNUL, "\\nwnul");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:520:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char curdir[_MAX_PATH] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1099:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char var[kMaxVariableNameLen+1] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1100:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char val[kMaxValueLen+1] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1101:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char both[kMaxVariableNameLen + kMaxValueLen + 5] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1336:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char sPerlRevision[32 * sizeof(char)] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1337:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char sPerlVersion[32 * sizeof(char)] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:1338:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char sPerlSubVersion[32 * sizeof(char)] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:137:4:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
			char tbuf[15] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:181:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char tempName[_MAX_PATH] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:357:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	fclose(fopen(tempName, (char *)"w"));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:424:18:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
		ptpf->m_file = fopen (ptpf->m_fileName, (char *)"r");	// Get the Pipe file handle
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:431:18:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
		ptpf->m_file = fopen(ptpf->m_fileName, (char *)"w");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:553:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char curdir[_MAX_PATH] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/intdef.h:35:9:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
#define atoi		NWLatoi
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:254:12:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
    return tmpfile();
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:425:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	return (fopen(filename, mode));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:583:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
		strcpy(buff+len, "/*.*");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:606:9:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	return open(path, flag, pmode);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5sck.c:30:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char nwinet_scratch[18] = {'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:666:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mode[3]={'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1585:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(&m_hostperlMem, &perlMem, sizeof(perlMem));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1586:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(&m_hostperlMemShared, &perlMemShared, sizeof(perlMemShared));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1587:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlMemParse, &perlMemParse, sizeof(perlMemParse));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1588:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlEnv, &perlEnv, sizeof(perlEnv));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1589:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlStdIO, &perlStdIO, sizeof(perlStdIO));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1590:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlLIO, &perlLIO, sizeof(perlLIO));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1591:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlDir, &perlDir, sizeof(perlDir));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1592:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlSock, &perlSock, sizeof(perlSock));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1593:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlProc, &perlProc, sizeof(perlProc));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1627:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(&m_hostperlMem, &perlMem, sizeof(perlMem));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1628:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlMemShared, &perlMemShared, sizeof(perlMemShared));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1629:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlMemParse, &perlMemParse, sizeof(perlMemParse));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1630:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlEnv, &perlEnv, sizeof(perlEnv));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1631:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlStdIO, &perlStdIO, sizeof(perlStdIO));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1632:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlLIO, &perlLIO, sizeof(perlLIO));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1633:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlDir, &perlDir, sizeof(perlDir));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1634:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlSock, &perlSock, sizeof(perlSock));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1635:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlProc, &perlProc, sizeof(perlProc));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1651:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(&m_hostperlMem, &perlMem, sizeof(perlMem));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1652:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlMemShared, &perlMemShared, sizeof(perlMemShared));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1653:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlMemParse, &perlMemParse, sizeof(perlMemParse));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1654:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlEnv, &perlEnv, sizeof(perlEnv));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1655:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlStdIO, &perlStdIO, sizeof(perlStdIO));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1656:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlLIO, &perlLIO, sizeof(perlLIO));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1657:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlDir, &perlDir, sizeof(perlDir));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1658:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlSock, &perlSock, sizeof(perlSock));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:1659:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&m_hostperlProc, &perlProc, sizeof(perlProc));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlsys.h:557:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mode[3]={'\0'};
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwplglob.c:57:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	redirOut = fopen((const char *)fileName, (const char *)"w");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/testnlm/type/type.c:36:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    pfile = fopen(argv[k],"r");
/home/capstone/Desktop/root/perl-5.30.0/Porting/timecheck.c:16:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char hexbuf[80];
/home/capstone/Desktop/root/perl-5.30.0/Porting/timecheck.c:20:2:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	sprintf (hexbuf, " -0x%016lx", -t);
/home/capstone/Desktop/root/perl-5.30.0/Porting/timecheck.c:22:2:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	sprintf (hexbuf, "  0x%016lx",  t);
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:560:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#    define fopen		PerlSIO_fopen
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:586:13:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#    define tmpfile		PerlSIO_tmpfile
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:601:13:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#    define open		PerlLIO_open
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:79:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	const char *argv[4];
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:111:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char pipe_name[50];
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:112:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char unix_pipe[50];
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:113:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char ami_pipe[50];
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:143:2:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	sprintf(pipe_name, "%x%08lx/4096/0", pipenum++,
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:663:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(cmd, incmd, cmdlen);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:903:8:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#undef fopen
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:916:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buffer[1000];
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:954:7:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	fh = fopen(filename, "r");
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1086:6:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
					strcat(full, "\" ");
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:168:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char pipe_name[1024];
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:172:2:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	sprintf(pipe_name, "/T/%x.%08lx", pipenum++, IUtility->GetUniqueID());
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:174:2:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	sprintf(pipe_name, "/PIPE/%x%08lx/4096/0", pipenum++,
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:180:15:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	filedes[1] = open(pipe_name, O_WRONLY | O_CREAT);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:181:15:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	filedes[0] = open(pipe_name, O_RDONLY);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:351:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
			memcpy(pathpart, path, p - path);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:395:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char *argv[1024]; /* 1024 enough? let's hope so! */
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:455:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char varbuf[8];
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:561:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char name[120];
/home/capstone/Desktop/root/perl-5.30.0/caretx.c:92:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1];
/home/capstone/Desktop/root/perl-5.30.0/caretx.c:111:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib.c:1403:4:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
   char   unused[BZ_MAX_UNUSED];
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib.c:1406:4:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
   char   mode2[10]     = "";
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib.c:1438:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        fp = fopen(path,mode2);
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/crc32.c:143:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        out = fopen("crc32.h", "w");
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/inflate.c:640:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/inflate.c:1423:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[4];       /* to restore bit buffer to byte string */
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/trees.c:328:20:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    FILE *header = fopen("trees.h", "w");
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/zutil.c:13:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
z_const char * const z_errmsg[10] = {
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/zutil.h:53:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
extern z_const char * const z_errmsg[10]; /* indexed by 2-zlib_error */
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/zutil.h:113:6:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
     fopen((name), (mode), "mbc=60", "ctx=stm", "rfm=fix", "mrs=512")
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/zutil.h:206:30:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#  define F_OPEN(name, mode) fopen((name), (mode))
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Zlib/zlib-src/zutil.h:230:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#    define zmemcpy memcpy
/home/capstone/Desktop/root/perl-5.30.0/cpan/DB_File/version.c:67:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buffer[40] ;
/home/capstone/Desktop/root/perl-5.30.0/cpan/DB_File/version.c:68:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(buffer, "%d.%d", Major, Minor) ;
/home/capstone/Desktop/root/perl-5.30.0/cpan/DB_File/version.c:70:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(buffer, "%d.%03d%03d", Major, Minor, Patch) ;
/home/capstone/Desktop/root/perl-5.30.0/cpan/Digest-SHA/src/sha.c:468:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char out[5];
/home/capstone/Desktop/root/perl-5.30.0/cpan/Digest-SHA/src/sha.h:143:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	unsigned char block[SHA_MAX_BLOCK_BITS/8];
/home/capstone/Desktop/root/perl-5.30.0/cpan/Digest-SHA/src/sha.h:147:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	unsigned char digest[SHA_MAX_DIGEST_BITS/8];
/home/capstone/Desktop/root/perl-5.30.0/cpan/Digest-SHA/src/sha.h:149:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char hex[SHA_MAX_HEX_LEN+1];
/home/capstone/Desktop/root/perl-5.30.0/cpan/Digest-SHA/src/sha.h:150:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char base64[SHA_MAX_BASE64_LEN+1];
/home/capstone/Desktop/root/perl-5.30.0/cpan/Digest-SHA/src/sha.h:157:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	unsigned char key[SHA_MAX_BLOCK_BITS/8];
/home/capstone/Desktop/root/perl-5.30.0/cpan/Encode/Encode/encode.h:71:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const char *const name[2];      /* name(s) of this encoding */
/home/capstone/Desktop/root/perl-5.30.0/cpan/Win32API-File/const2perl.h:83:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char msBuf[64];	/* Must fit sprintf of longest NV */
/home/capstone/Desktop/root/perl-5.30.0/cpan/Win32API-File/const2perl.h:94:2:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
	strcat( sVarName, "::EXPORT_FAIL" );
/home/capstone/Desktop/root/perl-5.30.0/cpan/Win32API-File/const2perl.h:156:3:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
		strcat( sVarName, "::EXPORT_FAIL" );			\
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:96:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const char *command[4];
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:491:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char flags[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:500:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char user[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:501:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char system[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:502:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char user_flags[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:503:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char system_flags[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:538:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char user[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:539:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char system[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:540:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char user_flags[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:541:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char system_flags[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:39:20:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
          l1->fp = fopen (temp_name, md);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:47:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      l1->fp = fopen (temp_name, md);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:332:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy (buf,gi->pos+gi->matches,siz);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:361:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char tmp[PATH_MAX+2];
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:383:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char p[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:416:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char expp[PATH_MAX];
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:421:13:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
            strcat (expp,"/bin");
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:424:13:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
            strcat (expp,"/lib" PERL5 "/site");
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:447:9:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
        strcpy (perlprefix,"..");
/home/capstone/Desktop/root/perl-5.30.0/doio.c:437:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mode[PERL_MODE_MAX];	/* file mode ("r\0", "rb\0", "ab\0" etc.) */
/home/capstone/Desktop/root/perl-5.30.0/doio.c:506:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mode[PERL_MODE_MAX];	/* file mode ("r\0", "rb\0", "ab\0" etc.) */
/home/capstone/Desktop/root/perl-5.30.0/doio.c:961:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	     char tmpbuf[256];
/home/capstone/Desktop/root/perl-5.30.0/doio.c:1001:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                char newname[FILENAME_MAX+1];
/home/capstone/Desktop/root/perl-5.30.0/doio.c:2340:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cmd, incmd, cmdlen);
/home/capstone/Desktop/root/perl-5.30.0/doio.c:2349:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char flags[PERL_FLAGS_MAX];
/home/capstone/Desktop/root/perl-5.30.0/dump.c:146:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char octbuf[PV_ESCAPE_OCTBUFSIZE] = "%123456789ABCDF";
/home/capstone/Desktop/root/perl-5.30.0/ext/File-Glob/bsd_glob.c:454:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	if (((char *) patbuf)[0] == BG_EOS) {
/home/capstone/Desktop/root/perl-5.30.0/ext/File-Glob/bsd_glob.c:748:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/ext/File-Glob/bsd_glob.c:1020:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/ext/File-Glob/bsd_glob.c:1038:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/ext/File-Glob/bsd_glob.c:1054:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dba.c:29:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
		strcpy(name + n, ".pag");
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dba.c:31:15:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
		if ((pagf = open(name, O_RDONLY)) < 0)
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dba.c:50:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char pag[PBLKSIZ];
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbd.c:32:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
		strcpy(name + n, ".pag");
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbd.c:34:15:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
		if ((pagf = open(name, O_RDONLY)) < 0)
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbd.c:50:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char pag[PBLKSIZ];
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbe.c:215:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char *comarg[3];
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/pair.c:76:16:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        (void) memcpy(pag + off, key.dptr, key.dsize);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/pair.c:82:16:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        (void) memcpy(pag + off, val.dptr, val.dsize);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/pair.c:239:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char cur[PBLKSIZ];
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/pair.c:242:16:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        (void) memcpy(cur, pag, PBLKSIZ);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:99:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(dirname, file, filelen);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:100:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(dirname + filelen, DIRFEXT, dirfext_size);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:102:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(pagname, file, filelen);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:103:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(pagname + filelen, PAGFEXT, pagfext_size);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:140:18:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	if ((db->pagf = open(pagname, flags, mode)) > -1) {
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:141:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
		if ((db->dirf = open(dirname, flags, mode)) > -1) {
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:291:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char twin[PBLKSIZ];
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:293:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char zer[PBLKSIZ];
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:343:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
			(void) memcpy(pag, New, PBLKSIZ);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.h:33:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char pagbuf[PBLKSIZ];	       /* page file block buffer */
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.h:35:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char dirbuf[DBLKSIZ];	       /* directory file block buffer */
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:67:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__GetCwd [sizeof("Win32::GetCwd")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:68:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__SetCwd [sizeof("Win32::SetCwd")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:69:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__GetNextAvailDrive [sizeof("Win32::GetNextAvailDrive")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:70:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__GetLastError [sizeof("Win32::GetLastError")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:71:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__SetLastError [sizeof("Win32::SetLastError")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:72:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__LoginName [sizeof("Win32::LoginName")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:73:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__NodeName [sizeof("Win32::NodeName")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:74:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__DomainName [sizeof("Win32::DomainName")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:75:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__FsType [sizeof("Win32::FsType")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:76:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__GetOSVersion [sizeof("Win32::GetOSVersion")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:77:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__IsWinNT [sizeof("Win32::IsWinNT")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:78:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__IsWin95 [sizeof("Win32::IsWin95")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:79:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__FormatMessage [sizeof("Win32::FormatMessage")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:80:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__Spawn [sizeof("Win32::Spawn")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:81:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__GetTickCount [sizeof("Win32::GetTickCount")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:82:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__GetShortPathName [sizeof("Win32::GetShortPathName")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:83:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__GetFullPathName [sizeof("Win32::GetFullPathName")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:84:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__GetLongPathName [sizeof("Win32::GetLongPathName")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:85:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__CopyFile [sizeof("Win32::CopyFile")];
/home/capstone/Desktop/root/perl-5.30.0/ext/Win32CORE/Win32CORE.c:86:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char Win32__Sleep [sizeof("Win32::Sleep")];
/home/capstone/Desktop/root/perl-5.30.0/ext/XS-Typemap/stdio.c:16:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  stream = fopen( path, "w");
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:28:8:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#undef fopen
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:55:8:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#undef tmpfile
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:73:9:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#define tmpfile()		PerlIO_tmpfile()
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:76:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#define fopen(p,m)		PerlIO_open(p,m)
/home/capstone/Desktop/root/perl-5.30.0/generate_uudmap.c:77:21:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *const out = fopen(filename, "w");
/home/capstone/Desktop/root/perl-5.30.0/generate_uudmap.c:103:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char PL_uudmap[256];
/home/capstone/Desktop/root/perl-5.30.0/generate_uudmap.c:104:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char PL_bitcount[256];
/home/capstone/Desktop/root/perl-5.30.0/gv.c:104:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char smallbuf[128];
/home/capstone/Desktop/root/perl-5.30.0/gv.c:122:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmpbuf + 2, name, namelen);
/home/capstone/Desktop/root/perl-5.30.0/gv.c:1453:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char smallbuf[128];
/home/capstone/Desktop/root/perl-5.30.0/gv.c:1619:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char smallbuf[64]; /* small buffer to avoid a malloc when possible */
/home/capstone/Desktop/root/perl-5.30.0/handy.h:2446:91:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#define Copy(s,d,n,t)	(MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
/home/capstone/Desktop/root/perl-5.30.0/handy.h:2451:86:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#define CopyD(s,d,n,t)	(MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
/home/capstone/Desktop/root/perl-5.30.0/hv.h:53:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
     char       hek_key[1];        /* variable-length hash key */
/home/capstone/Desktop/root/perl-5.30.0/hv.h:564:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char                  refcounted_he_data[1];
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:287:29:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#define PerlSIO_fopen(x,y)		fopen(x,y)
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:357:28:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#define PerlSIO_tmpfile()		tmpfile()
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:763:34:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#define PerlLIO_open(file, flag)	open((file), (flag))
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:764:41:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#define PerlLIO_open3(file, flag, perm)	open((file), (flag), (perm))
/home/capstone/Desktop/root/perl-5.30.0/locale.c:1598:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char bad_chars_list[ (94 * 4) + (3 * 5) + 1 ] = { '\0' };
/home/capstone/Desktop/root/perl-5.30.0/locale.c:1626:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                char name[4] = { '\0' };
/home/capstone/Desktop/root/perl-5.30.0/locale.c:3260:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const char * sl_result[NOMINAL_LC_ALL_INDEX + 1];
/home/capstone/Desktop/root/perl-5.30.0/locale.c:3264:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    const char * curlocales[NOMINAL_LC_ALL_INDEX + 1];
/home/capstone/Desktop/root/perl-5.30.0/locale.c:4560:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[CUR_LC_BUFFER_SIZE];        /* small buffer */
/home/capstone/Desktop/root/perl-5.30.0/locale.c:5036:30:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char * cutoff = (char *) my_memrchr(utf8ness_cache,
/home/capstone/Desktop/root/perl-5.30.0/locale.c:5533:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char ret[256] = "If you can read this, thank your buggy C"
/home/capstone/Desktop/root/perl-5.30.0/malloc.c:396:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char	sstrut[MEM_ALIGNBYTES]; /* for the sizing */
/home/capstone/Desktop/root/perl-5.30.0/malloc.c:1084:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	      char linebuf[10];
/home/capstone/Desktop/root/perl-5.30.0/malloc.c:1270:4:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
			char buff[80];
/home/capstone/Desktop/root/perl-5.30.0/malloc.c:2110:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[80];
/home/capstone/Desktop/root/perl-5.30.0/mg.c:957:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char msg[255];
/home/capstone/Desktop/root/perl-5.30.0/mg.c:1320:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char pathbuf[256], eltbuf[256], *cp, *elt;
/home/capstone/Desktop/root/perl-5.30.0/mg.c:1351:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char tmpbuf[256];
/home/capstone/Desktop/root/perl-5.30.0/mg_vtable.h:99:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
EXTCONST char * const PL_magic_vtable_names[magic_vtable_max] = {
/home/capstone/Desktop/root/perl-5.30.0/mg_vtable.h:134:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
EXTCONST char * const PL_magic_vtable_names[magic_vtable_max];
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:43:8:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#undef fopen
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:70:8:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#undef tmpfile
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:81:9:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#define tmpfile()  _CANNOT _tmpfile_
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:85:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#define fopen(p,m)  _CANNOT _fopen_
/home/capstone/Desktop/root/perl-5.30.0/op.c:12728:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char tmpbuf[256];
/home/capstone/Desktop/root/perl-5.30.0/op.c:16852:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char str[ MAX_ARGS_OP * 2 + 2 ]; /* One ';', one '\0' */
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:11:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char fail[300];
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:57:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[260];
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:82:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char tmp[260];
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:90:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char dllname[260];
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:96:14:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	            strcpy(fail, "can't find my DLL name by the handle");
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:102:14:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	            strcpy(fail, "can't load my own DLL");
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:110:13:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
            strcpy(fail, "can't load from myself: compiled without -DDLOPEN_INITTERM");
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:166:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	static char buf[700];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:136:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char po2_fname[9];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:146:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char po2_mangle_ret[STATIC_FILE_LENGTH+1];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:154:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char po2_pthreads_state_buf[80];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:155:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char po2_os2error_buf[300];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:345:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[80];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:368:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[80];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:699:14:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
		if (!s || !atoi(s)) {
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:722:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char buf[20], *s = (char*)loadOrdinals[ord].entryname;
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:727:3:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
		sprintf(s = buf, "%d", loadOrdinals[ord].entrypoint);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:985:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char const * args[4];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:986:15:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	static const char * const fargs[4] 
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1037:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char tbuf[512];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1042:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
		    strcpy(tbuf + l, ".exe");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1222:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
			const char *exec_args[2];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2095:6:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	    sprintf(os2error_buf, "SYS%04d=%#x: ", rc, rc);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2104:3:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
		sprintf(os2error_buf, "SYS%04d=%#x: ", rc, rc);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2181:8:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
       memcpy(buf,o,ll);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2224:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[300], *p = execname2buffer(buf, sizeof buf, PL_origargv[0]);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2234:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *s, b[300];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2302:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
		memcpy(b, INSTALL_PREFIX, tol + 1);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2380:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(e, s, l);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2401:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(mangle_ret, to, tol);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2425:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char *s, b[300];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3471:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char p[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3492:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char p[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3522:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		    char p1[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3563:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		    char p1[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3663:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char	to[1024];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3717:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[2048], *to = buf, buf1[300], *s;
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3734:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(to, pre, l);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3765:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(to, post, l);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3790:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4112:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char	*s, buf[10], *s1, *perltype = NULL;
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4141:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char buf[8192];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4388:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		    char buf[512];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4633:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char options[64];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4662:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[512];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4665:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[48*1024]; /* _emx_init() requires 32K, cmd.exe has 64K only */
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4713:2:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	sprintf(buf,
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4721:2:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	sprintf(buf, "ExceptionHandler misplaced: %#lx != %#lx\n",
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4727:2:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	sprintf(buf + strlen(buf), 
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4736:6:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	    sprintf(buf + strlen(buf),
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4845:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char buf[80];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4848:6:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	    sprintf(buf,
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4959:2:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	memcpy(PL_sh_path, perl_sh_installed, l + 1);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4971:2:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	strcpy(PL_sh_path + l, "/sh.exe");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4995:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[1024];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5043:8:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#undef tmpfile
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5066:9:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
	return tmpfile();
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5068:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    return fopen(my_tmpnam(NULL), "w+b"); /* Race condition, but
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5080:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char b[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5105:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char b[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5142:17:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
	use_my_flock = atoi(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5248:14:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
	_my_pwent = atoi(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5353:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pat[12];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5355:5:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
    sprintf(pat, "%%.%dg", digits);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5382:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char dllname[260], fail[260];
/home/capstone/Desktop/root/perl-5.30.0/os2/os2ish.h:366:9:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#define tmpfile	my_tmpfile
/home/capstone/Desktop/root/perl-5.30.0/os2/os2ish.h:964:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
unsigned char   SIS_mec_table[32]; /* Table of RAS Major Event Codes (MECs) */
/home/capstone/Desktop/root/perl-5.30.0/os2/os2ish.h:985:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
unsigned char   SIS_perf_mec_table[32]; /* varga 6/5/97 Table of Performance Major Event Codes (MECS) varga*/
/home/capstone/Desktop/root/perl-5.30.0/os2/os2ish.h:1132:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char		name[1];
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:64:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *argv[3] = {"perl_in_REXX", "-e", ""};
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:84:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char last_error[4096];
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:110:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[256];
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:111:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *argv[3] = {"perl_from_REXX", "-e", buf};
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:123:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf, rargv[0].strptr, rargv[0].strlength);
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:191:6:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	    memcpy(retstr->strptr, last_error, len);
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:194:2:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	strcpy(retstr->strptr, "[Not enough memory to copy the errortext]");
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:237:6:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	    memcpy(retstr->strptr, str, len);
/home/capstone/Desktop/root/perl-5.30.0/pad.h:86:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char		xpadn_str[1];
/home/capstone/Desktop/root/perl-5.30.0/parser.h:111:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char	tokenbuf[256];
/home/capstone/Desktop/root/perl-5.30.0/perl.c:52:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char control[CMSG_SPACE(sizeof(int))];
/home/capstone/Desktop/root/perl-5.30.0/perl.c:363:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char str[2]="\0";
/home/capstone/Desktop/root/perl-5.30.0/perl.c:488:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buffer[256];
/home/capstone/Desktop/root/perl-5.30.0/perl.c:758:19:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    static const char success[sizeof(int) + 1] = {0};
/home/capstone/Desktop/root/perl-5.30.0/perl.c:4030:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char tmpname[sizeof(FAKE_BIT_BUCKET_TEMPLATE)] = {
/home/capstone/Desktop/root/perl-5.30.0/perl.c:4222:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char string[3] = "-x";
/home/capstone/Desktop/root/perl-5.30.0/perl.c:4678:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[256];
/home/capstone/Desktop/root/perl-5.30.0/perl.c:4728:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char sitearch[sizeof(SITEARCH_EXP)+16] = SITEARCH_EXP;
/home/capstone/Desktop/root/perl-5.30.0/perl.c:4729:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char sitelib[sizeof(SITELIB_EXP)+16] = SITELIB_EXP;
/home/capstone/Desktop/root/perl-5.30.0/perl.h:2545:16:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#       define open open64
/home/capstone/Desktop/root/perl-5.30.0/perl.h:2589:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#       define fopen fopen64
/home/capstone/Desktop/root/perl-5.30.0/perl.h:2604:16:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#       define tmpfile tmpfile64
/home/capstone/Desktop/root/perl-5.30.0/perl.h:3613:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char E[48];
/home/capstone/Desktop/root/perl-5.30.0/perl.h:3614:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char KS[16][48];
/home/capstone/Desktop/root/perl-5.30.0/perl.h:3615:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char block[66];
/home/capstone/Desktop/root/perl-5.30.0/perl.h:3616:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char iobuf[16];
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4458:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
EXTCONST char PL_no_mem[sizeof("Out of memory!\n")]
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4512:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
EXTCONST char PL_uuemap[65]
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4522:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
EXTCONST char PL_uudmap[256] =
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4529:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
EXTCONST char PL_bitcount[256] =
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4539:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
EXTCONST char PL_uudmap[256];
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4540:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
EXTCONST char PL_bitcount[256];
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4725:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
EXT unsigned char PL_fold_locale[256] = { /* Unfortunately not EXTCONST. */
/home/capstone/Desktop/root/perl-5.30.0/perl.h:4760:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
EXT unsigned char PL_fold_locale[256]; /* Unfortunately not EXTCONST. */
/home/capstone/Desktop/root/perl-5.30.0/perl.h:6570:21:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
#       define Atol	atol
/home/capstone/Desktop/root/perl-5.30.0/perl.h:6650:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char            __dummy[5];
/home/capstone/Desktop/root/perl-5.30.0/perl_inc_macro.h:113:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
# define _INCPUSH_PERL5LIB_ADD char buf[256]; \
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:250:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char mode[8];
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:372:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buffer[1024];
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:2235:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[8];
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:2431:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[PERLIO_TEARDOWN_MESSAGE_BUF_SIZE];
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:2934:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char tmode[8];
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:2959:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	 char filename[FILENAME_MAX];
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:3036:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmode[8];
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:3147:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char mode[8];
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:3764:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[8];
/home/capstone/Desktop/root/perl-5.30.0/perly.c:401:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            ps->name    = (const char *)(yytname[yytoken]);
/home/capstone/Desktop/root/perl-5.30.0/perly.c:453:30:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        ps->name    = (const char *)(yytname [yyr1[yyn]]);
/home/capstone/Desktop/root/perl-5.30.0/pp_ctl.c:698:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy(new_compiled, mg->mg_ptr, mg->mg_len);
/home/capstone/Desktop/root/perl-5.30.0/pp_ctl.c:3893:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                const char slashdot[2] = {'/', '.'};
/home/capstone/Desktop/root/perl-5.30.0/pp_ctl.c:3895:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                const char backslashdot[2] = {'\\', '.'};
/home/capstone/Desktop/root/perl-5.30.0/pp_ctl.c:4128:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
			memcpy(tmp, dir, dirlen);
/home/capstone/Desktop/root/perl-5.30.0/pp_ctl.c:4141:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
			memcpy(tmp, name, len + 1);
/home/capstone/Desktop/root/perl-5.30.0/pp_ctl.c:4370:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tbuf[TYPE_DIGITS(long) + 12];
/home/capstone/Desktop/root/perl-5.30.0/pp_pack.c:1743:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                char hunk[3];
/home/capstone/Desktop/root/perl-5.30.0/pp_pack.c:2891:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		    char   buf[(sizeof(UV)*CHAR_BIT)/7+1];
/home/capstone/Desktop/root/perl-5.30.0/pp_pack.c:2917:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		    char   buf[1 + (int)((NV_MAX_10_EXP + 1) / 2)]; /* valid C */
/home/capstone/Desktop/root/perl-5.30.0/pp_pack.c:2920:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		    char   buf[1 + (int)((308 + 1) / 2)]; /* valid C */
/home/capstone/Desktop/root/perl-5.30.0/pp_pack.c:3107:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		    char buffer[64];
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:169:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const char zero_but_true[ZBTLEN + 1] = "0 but true";
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:301:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char tmpbuf[256];
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:1133:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *fd_sets[4];
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:1753:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char namebuf[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:2592:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char namebuf[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:2953:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		    char buf[sizeof(s.st_ino)*3+1], *p;
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:2971:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		    char buf[sizeof(s.st_ino)*3], *p;
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:3817:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:17710:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                    char literal[3];
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:20737:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&(drx->xpv_cur), &(srx->xpv_cur),
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:21177:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[512];
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:21228:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char digits[TYPE_CHARS(long)];
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:22728:55:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
                pos_in_brackets = strchr("([<)]>)]>", open);
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:22729:66:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
                close = (pos_in_brackets) ? pos_in_brackets[3] : open;
/home/capstone/Desktop/root/perl-5.30.0/regcomp.h:156:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char string[1];
/home/capstone/Desktop/root/perl-5.30.0/regcomp.h:220:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char bitmap[ANYOF_BITMAP_SIZE];	/* only compile-time */
/home/capstone/Desktop/root/perl-5.30.0/regcomp.h:229:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char bitmap[ANYOF_BITMAP_SIZE];		/* both compile-time ... */
/home/capstone/Desktop/root/perl-5.30.0/regcomp.h:247:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char bitmap[ANYOF_BITMAP_SIZE];	/* both compile-time ... */
/home/capstone/Desktop/root/perl-5.30.0/regen-configure/dist/lib/C/fake/scandir.C:110:4:  [2] (buffer) bcopy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
			bcopy((char *) dp, (char *) dp_save, sizeof(Direntry_t));
/home/capstone/Desktop/root/perl-5.30.0/sv.c:1871:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
     char tmpbuf[64];
/home/capstone/Desktop/root/perl-5.30.0/sv.c:1891:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
     char tmpbuf[64];
/home/capstone/Desktop/root/perl-5.30.0/sv.c:2857:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char arr[200];
/home/capstone/Desktop/root/perl-5.30.0/sv.c:3100:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
		memcpy(retval, typestr, typelen);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:3105:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
		    memcpy(retval, stashname, stashnamelen);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:3137:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char arr[TYPE_CHARS(UV)];
/home/capstone/Desktop/root/perl-5.30.0/sv.c:9800:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char todo[PERL_UCHAR_MAX+1];
/home/capstone/Desktop/root/perl-5.30.0/sv.c:10686:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char arr[TYPE_CHARS(UV)];
/home/capstone/Desktop/root/perl-5.30.0/sv.c:11886:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char ebuf[IV_DIG * 4 + NV_DIG + 32];
/home/capstone/Desktop/root/perl-5.30.0/sv.c:11988:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char esignbuf[4];             /* holds sign prefix, e.g. "-0x" */
/home/capstone/Desktop/root/perl-5.30.0/sv.c:13581:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char smallbuf[256]; /* XXX MAXPATHLEN, surely? */
/home/capstone/Desktop/root/perl-5.30.0/sv.c:16176:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buffer[2];
/home/capstone/Desktop/root/perl-5.30.0/symbian/PerlBase.h:115:55:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#define PerlCopy(s,d,n,t)	(MEM_WRAP_CHECK(n,t), (void)memcpy((char*)(d),(char*)(s), (n) * sizeof(t)))
/home/capstone/Desktop/root/perl-5.30.0/symbian/PerlBase.h:116:50:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#define PerlCopyD(s,d,n,t)	(MEM_WRAP_CHECK(n,t), memcpy((char*)(d),(char*)(s), (n) * sizeof(t)))
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_proto.h:35:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#define memcpy _e32memcpy /* GCC intrinsic */
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_proto.h:36:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
extern void  *memcpy(const void *s1, const void *s2, size_t n);
/home/capstone/Desktop/root/perl-5.30.0/taint.c:119:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char name[10 + TYPE_DIGITS(int)] = "DCL$PATH";
/home/capstone/Desktop/root/perl-5.30.0/time64.c:47:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const char days_in_month[2][12] = {
/home/capstone/Desktop/root/perl-5.30.0/time64.c:288:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dest, src, sizeof(*dest));
/home/capstone/Desktop/root/perl-5.30.0/time64.c:308:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(result, static_result, sizeof(*result));
/home/capstone/Desktop/root/perl-5.30.0/time64.c:329:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(result, static_result, sizeof(*result));
/home/capstone/Desktop/root/perl-5.30.0/toke.c:564:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmpbuf[UTF8_MAXBYTES + 1];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:613:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char he_name[8 + MAX_FEATURE_LEN] = "feature_";
/home/capstone/Desktop/root/perl-5.30.0/toke.c:621:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&he_name[8], name, namelen);
/home/capstone/Desktop/root/perl-5.30.0/toke.c:1798:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char smallbuf[128];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:1811:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
		memcpy(tmpbuf2 + 2, s, tmplen2);
/home/capstone/Desktop/root/perl-5.30.0/toke.c:3856:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                    char hex_string[4];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:3884:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                char hex_string[2 * UTF8_MAXBYTES + 5];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:4249:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char seen[256];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:4252:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char tmpbuf[sizeof PL_tokenbuf * 4];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:4376:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmpbuf[sizeof PL_tokenbuf];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:6305:9:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
			char open, close, term;
/home/capstone/Desktop/root/perl-5.30.0/toke.c:6321:42:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
				if (*t == '\\' && t+1 < PL_bufend && open != '\\')
/home/capstone/Desktop/root/perl-5.30.0/toke.c:6323:20:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
				else if (*t == open)
/home/capstone/Desktop/root/perl-5.30.0/toke.c:6332:20:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
				else if (*t == open)
/home/capstone/Desktop/root/perl-5.30.0/toke.c:6814:25:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                        char tmpbuf[sizeof PL_tokenbuf];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:6851:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		    char tmpbuf[sizeof PL_tokenbuf];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:7242:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char tmpbuf[sizeof PL_tokenbuf + 1];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:8337:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		    char tmpbuf[1024];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:9224:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char tmpbuf[256];
/home/capstone/Desktop/root/perl-5.30.0/toke.c:10229:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
			memcpy(indent, backup + 1, indent_len);
/home/capstone/Desktop/root/perl-5.30.0/toke.c:10377:25:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                        memcpy(indent, backup, indent_len);
/home/capstone/Desktop/root/perl-5.30.0/uconfig.h:909:27:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
#define Gconvert(x,n,t,b) sprintf((b),"%.*g",(n),(x))
/home/capstone/Desktop/root/perl-5.30.0/universal.c:923:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char reflags[sizeof(INT_PAT_MODS) + MAX_CHARSET_NAME_LENGTH];
/home/capstone/Desktop/root/perl-5.30.0/util.c:1068:16:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	return (char*)memcpy(newaddr, pv, pvlen);
/home/capstone/Desktop/root/perl-5.30.0/util.c:1134:19:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    return (char*)memcpy(newaddr, pv, pvlen);
/home/capstone/Desktop/root/perl-5.30.0/util.c:1158:19:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    return (char*)memcpy(newaddr, pv, len);
/home/capstone/Desktop/root/perl-5.30.0/util.c:2933:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
		memcpy((char *)&pid, spid, len);
/home/capstone/Desktop/root/perl-5.30.0/util.c:3060:6:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	    memcpy(p, to, size);
/home/capstone/Desktop/root/perl-5.30.0/util.c:3066:6:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	    memcpy(p, to, (count - items) * len);
/home/capstone/Desktop/root/perl-5.30.0/util.c:3115:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmpbuf[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/util.c:3929:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[MAXPATHLEN];
/home/capstone/Desktop/root/perl-5.30.0/util.c:4749:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char buf[PERL_MEM_LOG_SPRINTF_BUF_SIZE];
/home/capstone/Desktop/root/perl-5.30.0/util.c:4935:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(fixed, format, len - 1);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5184:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(buf, *environ, l);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5541:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(dst + used, src, copy);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5574:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(dst, src, copy);
/home/capstone/Desktop/root/perl-5.30.0/util.c:6112:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char cmd[1024];
/home/capstone/Desktop/root/perl-5.30.0/util.c:6158:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char out[1024];
/home/capstone/Desktop/root/perl-5.30.0/util.h:246:5:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
int mkstemp(char*);
/home/capstone/Desktop/root/perl-5.30.0/util.h:253:37:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
#   define Perl_my_mkstemp(templte) mkstemp(templte)
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:41:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char Tag[TOKENBUFFERSIZE];
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:42:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char Value[512];
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:52:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char WorkString[LINEBUFFERSIZE]; 
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:54:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char LineBuffer[LINEBUFFERSIZE], *TempValue, *StartTilde, *EndTilde;
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:55:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char SecondaryLineBuffer[LINEBUFFERSIZE], OutBuf[LINEBUFFERSIZE];
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:56:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char TokenBuffer[TOKENBUFFERSIZE];
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:86:27:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if (NULL == (ConfigSH = fopen(argv[1], "r"))) {
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:91:27:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if (NULL == (Config_H = fopen(argv[2], "r"))) {
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:96:46:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if (ifile != NULL && NULL == (Extra_Subs = fopen(ifile, "r"))) {
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:355:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char TempBuffer[LINEBUFFERSIZE], TempTilde[TOKENBUFFERSIZE];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:147:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char str[VMS_MAXRSS];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:883:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char uplnm[LNM$C_NAMLENGTH+1], *cp2;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1073:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char uplnm[LNM$C_NAMLENGTH+1], *cp2, *eqv;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1276:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char cmd[LNM$C_NAMLENGTH+24], mbxnam[LNM$C_NAMLENGTH], *buf = NULL;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1444:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char lnm[LNM$C_NAMLENGTH+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1445:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char eqv[MAX_DCL_SYMBOL+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1462:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char eqv[LNM$C_NAMLENGTH+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1494:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char uplnm[LNM$C_NAMLENGTH], *cp2, *c;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1656:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char uplnm[8];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1727:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char hash[9];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2099:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(newdir, dir1, dirlen-1);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2160:13:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
  if ((fp = tmpfile())) return fp;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2166:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(cp,"Sys$Scratch:");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2168:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(cp,"/tmp/");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2170:3:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
  strcat(cp,".Perltmp");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2171:8:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  fp = fopen(cp,"w+","fop=dlt");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2869:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char csize[LNM$C_NAMLENGTH+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2886:19:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      mbxbufsiz = atoi(csize);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3250:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mbx1[64], mbx2[64];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3422:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mbx1[64], mbx2[64];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3535:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mbx[64];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3545:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char device[65];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3652:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char    dir[NAM$C_MAXRSS+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3680:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char  temp[NAM$C_MAXRSS+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3692:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(p->dir,"./");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3778:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char  vmspipe_file[NAM$C_MAXRSS+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3794:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char file[NAM$C_MAXRSS+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3824:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char file[NAM$C_MAXRSS+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3844:7:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
      sprintf(file,"sys$scratch:perlpipe_%08.8x_%d.com",mypid,index);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3845:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      fp = fopen(file,"w");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3847:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(file,"sys$login:perlpipe_%08.8x_%d.com",mypid,index);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3848:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        fp = fopen(file,"w");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3850:13:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
            sprintf(file,"sys$disk:[]perlpipe_%08.8x_%d.com",mypid,index);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3851:18:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            fp = fopen(file,"w");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3856:7:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
      sprintf(file,"/tmp/perlpipe_%08.8x_%d.com",mypid,index);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3857:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      fp = fopen(file,"w");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3859:2:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	sprintf(file,"/sys$login/perlpipe_%08.8x_%d.com",mypid,index);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3860:7:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	fp = fopen(file,"w");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3862:4:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	  sprintf(file,"./perlpipe_%08.8x_%d.com",mypid,index);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3863:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	  fp = fopen(file,"w");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3900:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    fp = fopen(file,"r","shr=get");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3987:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char device_name[65];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3992:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char customization[200];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3993:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char title[40];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3995:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mbx1[64];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4080:6:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	    strcpy(title,"Perl Debug DECTerm");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4191:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *p, mode[10], symbol[MAX_DCL_SYMBOL+1], *vmspipe;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4192:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *in, *out, *err, mbx[512];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4194:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tfilebuf[NAM$C_MAXRSS+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4196:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char cmd_sym_name[20];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4485:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(cmd_sym_name,"PERL_POPEN_CMD%d",j);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4517:9:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
        sprintf(cmd_sym_name,"PERL_POPEN_CMD%d",j);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4862:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char __gcvtbuf[DBL_DIG+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:5921:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char __rmsexpand_retbuf[VMS_MAXRSS];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6055:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(trndir, dir, dirlen);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6242:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(buf, trndir, dirlen);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6248:11:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
          strcat(buf,".dir");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6250:11:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
          strcat(buf,".DIR");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6252:11:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
          strcat(buf,";1");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6448:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(buf, my_esa, dirlen);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6501:7:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
      strcat(buf,".DIR;1");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6520:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char __fileify_retbuf[VMS_MAXRSS];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6600:14:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
             memcpy(buf, dir, len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6603:14:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
             memcpy(&buf[len], n_spec, n_len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6618:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(buf, dir, len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6621:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(&buf[len], n_spec, n_len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6639:25:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                        memcpy(&buf[len], e_spec, e_len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6721:13:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
            strcat(buf, ":[000000]");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6774:25:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                        memcpy(&buf[2], n_spec, n_len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6964:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char __pathify_retbuf[VMS_MAXRSS];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7164:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(rslt, "/dev/null");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7183:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(rslt, "/tmp");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7394:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char __tounixspec_retbuf[VMS_MAXRSS];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7512:6:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
     strcpy(vmspath,"SYS$POSIX_ROOT:");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7682:6:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	    strcpy(vmspath, "_NLA0:");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7807:6:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	    memcpy(esa, unixptr, seg_len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7870:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
		    memcpy(vmsptr, v_spec, v_len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7892:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
			memcpy(vmsptr, r_spec, r_len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7922:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
			memcpy(vmsptr, d_spec, d_len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8048:2:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	strcpy(vmspath, "SYS$DISK:[");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8437:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(rslt,"[]");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8444:2:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	strcpy(rslt,"[-]");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8556:2:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	strcpy(rslt,"sys$disk:[000000]");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8559:2:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	strcpy(rslt,"sys$posix_root:[000000]");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8577:2:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	strcpy(rslt,"sys$system");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8583:2:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	strcpy(rslt,"sys$scratch");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8589:9:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
        strcpy(rslt, "sys$posix_root");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8599:6:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	    strcpy(rslt,"NLA0");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8872:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char __tovmsspec_retbuf[VMS_MAXRSS];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8957:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char __tovmspath_retbuf[VMS_MAXRSS];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8984:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cp,vmsified,vmslen);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9027:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char __tounixpath_retbuf[VMS_MAXRSS];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9055:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cp,unixified,unixlen);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9315:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char mbxname[L_tmpnam];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9360:24:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	if (NULL == (tmperr = fopen(err, errmode, "mbc=32", "mbf=2")))
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9532:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char subcmd[2*MAX_DCL_LINE_LENGTH], *p, *q;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9581:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char command[MAX_DCL_SYMBOL + 1] = "$";
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9586:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pidstring[80];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9612:5:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
    sprintf(pidstring, "%08X", pid);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9639:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char eqv[LNM$C_NAMLENGTH+1] = "";
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9741:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(newargv[1], "-T");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10007:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char def[NAM$C_MAXRSS+1], *st;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10213:42:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
	    e->vms_versions[e->vms_verscount] = atoi(p + 1);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10323:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dd->entry.d_name, n_spec, n_len + e_len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10333:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char new_name[256];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10458:10:  [2] (race) vfork:On some old systems, vfork() permits race conditions, and it's very difficult to use correctly (CWE-362).  Use fork() instead. 
  return vfork();
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10525:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char image_name[NAM$C_MAXRSS+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10526:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char image_argv[NAM$C_MAXRSS+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10643:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(r, resspec, cp2 - resspec); 
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10724:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      fp = fopen(resspec,"r","ctx=bin","ctx=rec","shr=get");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10726:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char b[256] = {0,0,0,0};
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10754:4:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	  char tmpspec[NAM$C_MAXRSS + 1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10904:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char equiv[LNM$C_NAMLENGTH];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11103:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mode[3];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11108:9:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
        strcpy(mode, "nW");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11202:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy( data, src, itmsz*nitm );
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11329:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char __pw_namecache[UAI$S_IDENT+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11339:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char pw_gecos[UAI$S_OWNER+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11344:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char pw_dir[UAI$S_DEFDEV+UAI$S_DEFDIR+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11348:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char unixdir[UAI$_DEFDEV+UAI$S_DEFDIR+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11352:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char pw_shell[UAI$S_DEFCLI+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11354:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char pw_passwd[UAI$S_PWD+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11386:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&defdev.pw_dir[ldefdev], &defdir.unixdir[0], ldefdir);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11602:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char off[LNM$C_NAMLENGTH+1];;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11610:32:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      else { utc_offset_secs = atol(off); }
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11856:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char usrname[L_cuserid];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12885:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char ultimate_name[NAM$C_MAXRSS+1], work_name[NAM$C_MAXRSS*8 + 1],
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12895:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
  strcpy(ultimate_name, "PL_");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13354:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dst,src,sizeof(struct interp_intern));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13696:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
			   memcpy(dir_name, filespec, dir_len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13708:8:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
			    memcpy(dir_name, filespec, dir_len);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13842:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char val_str[10];
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13890:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char val_str[LNM$C_NAMLENGTH+1];
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:208:10:  [2] (race) vfork:On some old systems, vfork() permits race conditions, and it's very difficult to use correctly (CWE-362).  Use fork() instead. 
#  ifdef vfork
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:209:12:  [2] (race) vfork:On some old systems, vfork() permits race conditions, and it's very difficult to use correctly (CWE-362).  Use fork() instead. 
#    undef vfork
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:211:11:  [2] (race) vfork:On some old systems, vfork() permits race conditions, and it's very difficult to use correctly (CWE-362).  Use fork() instead. 
#  define vfork my_vfork
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:220:11:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#  define tmpfile Perl_my_tmpfile
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:522:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char	d_name[256];		/* File name		*/
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:602:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char st_devnam[256]; /* Cache the (short) VMS name */
/home/capstone/Desktop/root/perl-5.30.0/vms/vmsish.h:624:34:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#define VMS_INO_T_COPY(__a, __b) memcpy(&__a, &__b, 6)
/home/capstone/Desktop/root/perl-5.30.0/vos/vos.c:29:11:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
 int fd = open(path,O_WRONLY);
/home/capstone/Desktop/root/perl-5.30.0/vutil.c:593:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char tbuf[64];
/home/capstone/Desktop/root/perl-5.30.0/vutil.c:616:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char tbuf[64];
/home/capstone/Desktop/root/perl-5.30.0/win32/fcrypt.c:13:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
typedef unsigned char des_cblock[8];
/home/capstone/Desktop/root/perl-5.30.0/win32/fcrypt.c:328:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const char shifts2[16]={0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0};
/home/capstone/Desktop/root/perl-5.30.0/win32/fcrypt.c:438:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
unsigned const char con_salt[128]={
/home/capstone/Desktop/root/perl-5.30.0/win32/fcrypt.c:457:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
unsigned const char cov_2char[64]={
/home/capstone/Desktop/root/perl-5.30.0/win32/fcrypt.c:484:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	unsigned char bb[9];
/home/capstone/Desktop/root/perl-5.30.0/win32/include/dirent.h:29:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char	d_name[257];		/* file name  */
/home/capstone/Desktop/root/perl-5.30.0/win32/perlglob.c:31:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char root[MAX_PATH];
/home/capstone/Desktop/root/perl-5.30.0/win32/perlglob.c:33:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char volname[MAX_PATH];
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:835:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mode[3];
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:978:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&u_long_arg, data, sizeof u_long_arg); 
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:980:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(data, &u_long_arg, sizeof u_long_arg);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1958:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlMem, &perlMem, sizeof(perlMem));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1959:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlMemShared, &perlMemShared, sizeof(perlMemShared));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1960:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlMemParse, &perlMemParse, sizeof(perlMemParse));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1961:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlEnv, &perlEnv, sizeof(perlEnv));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1962:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlStdIO, &perlStdIO, sizeof(perlStdIO));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1963:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlLIO, &perlLIO, sizeof(perlLIO));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1964:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlDir, &perlDir, sizeof(perlDir));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1965:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlSock, &perlSock, sizeof(perlSock));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1966:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlProc, &perlProc, sizeof(perlProc));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2008:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlMem, &perlMem, sizeof(perlMem));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2009:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlMemShared, &perlMemShared, sizeof(perlMemShared));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2010:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlMemParse, &perlMemParse, sizeof(perlMemParse));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2011:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlEnv, &perlEnv, sizeof(perlEnv));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2012:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlStdIO, &perlStdIO, sizeof(perlStdIO));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2013:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlLIO, &perlLIO, sizeof(perlLIO));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2014:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlDir, &perlDir, sizeof(perlDir));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2015:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlSock, &perlSock, sizeof(perlSock));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2016:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlProc, &perlProc, sizeof(perlProc));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2042:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlMem, &perlMem, sizeof(perlMem));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2043:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlMemShared, &perlMemShared, sizeof(perlMemShared));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2044:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlMemParse, &perlMemParse, sizeof(perlMemParse));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2045:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlEnv, &perlEnv, sizeof(perlEnv));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2046:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlStdIO, &perlStdIO, sizeof(perlStdIO));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2047:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlLIO, &perlLIO, sizeof(perlLIO));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2048:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlDir, &perlDir, sizeof(perlDir));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2049:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlSock, &perlSock, sizeof(perlSock));
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2050:5:  [2] (buffer) CopyMemory:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    CopyMemory(&m_hostperlProc, &perlProc, sizeof(perlProc));
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:121:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *dirTableA[driveCount];
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:122:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char szLocalBufferA[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:186:6:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
	    MultiByteToWideChar(CP_ACP, 0, dirTableA[index], -1,
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:231:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char szBuffer[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:390:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char szBuffer[(MAX_PATH+1)*2];
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:391:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char szlBuf[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:475:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char szBuffer[(MAX_PATH+1)*2];
/home/capstone/Desktop/root/perl-5.30.0/win32/vmem.h:43:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char szBuffer[512];	
/home/capstone/Desktop/root/perl-5.30.0/win32/vmem.h:474:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char		m_FreeDummy[minAllocSize];  // dummy free block
/home/capstone/Desktop/root/perl-5.30.0/win32/vmem.h:1175:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char szBuffer[512];
/home/capstone/Desktop/root/perl-5.30.0/win32/vmem.h:1178:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	    m_pLog = fopen(LOG_FILENAME, "w");
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:167:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char	w32_module_name[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:322:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char base[10];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:324:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mod_name[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:333:5:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
    sprintf(base, "%d.%d", (int)PERL_REVISION, (int)PERL_VERSION);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:391:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:408:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char regstr[40];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:410:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pathstr[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:835:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char		scanname[MAX_PATH+3];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:838:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char		buffer[MAX_PATH*2];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:869:5:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
    MultiByteToWideChar(CP_ACP, 0, scanname, -1, wscanname, sizeof(wscanname)/sizeof(WCHAR));
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:942:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char buffer[MAX_PATH*2];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1062:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dup, dirp, sizeof(DIR));
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1065:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dup->start, dirp->start, dirp->size);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1147:5:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
int mkstemp(const char *path)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1150:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1460:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char	buffer[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1601:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmpbuf[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2067:9:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
        strcpy(name->sysname, "Windows");
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2070:9:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
        strcpy(name->sysname, "Windows NT");
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2073:9:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
        strcpy(name->sysname, "Win32s");
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2076:9:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
        strcpy(name->sysname, "Win32 Unknown");
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2081:5:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
    sprintf(name->release, "%d.%d",
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2085:5:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
    sprintf(name->version, "Build %d",
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2133:6:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	    sprintf(name->machine, "unknown(0x%x)", procarch);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2668:6:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	    strcpy(w32_strerror_buffer, "Unknown Error");
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2698:14:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	    dwLen = sprintf(sMsg,
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2766:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    f = fopen(PerlDir_mapA(filename), mode);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2911:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char prefix[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2912:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char filename[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3149:9:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
    if (MultiByteToWideChar(CP_ACP, 0, oldname, -1, wOldName, MAX_PATH+1) &&
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3150:9:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
        MultiByteToWideChar(CP_ACP, 0, newname, -1, wNewName, MAX_PATH+1) &&
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3199:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char szOldName[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3262:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char b[4096];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3326:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    return open(PerlDir_mapA(path), flag, pmode);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3729:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char szfilename[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:4171:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mode[3];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:4206:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:4435:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ansi_path+len+1, ansi_dir, ansi_len+1);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:4443:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ansi_path, "PATH=", 5);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:4444:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(ansi_path+5, ansi_dir, len+1);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:201:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char sysname[SYS_NMLN];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:202:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char nodename[SYS_NMLN];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:203:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char release[SYS_NMLN];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:204:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char version[SYS_NMLN];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:205:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char machine[SYS_NMLN];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:435:13:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
extern  int	mkstemp(const char *path);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:529:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char		Wstrerror_buffer[512];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:531:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char		Wgetlogin_buffer[128];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:533:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char		Wcrypt_buffer[30];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:554:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char        sigterm[MAXIMUM_WAIT_OBJECTS];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.h:675:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pipech2[2];  /* 2 more peak ahead chars for UNICODE mode */
/home/capstone/Desktop/root/perl-5.30.0/win32/win32ceio.c:319:4:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
   char mode[8];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32io.c:331:4:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
   char mode[8];
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:201:8:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#undef fopen
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:202:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#define fopen			win32_fopen
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:232:9:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#define tmpfile()		win32_tmpfile()
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:243:9:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#define open			win32_open
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:231:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#  undef fopen
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:233:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#define fopen			win32_fopen
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:287:9:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#define tmpfile()		win32_tmpfile()
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:325:10:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#  undef open
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:327:9:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#define open			win32_open
/home/capstone/Desktop/root/perl-5.30.0/win32/win32sck.c:619:59:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    if ((s = PerlEnv_getenv("PERL_ALLOW_NON_IFS_LSP")) && atoi(s))
/home/capstone/Desktop/root/perl-5.30.0/win32/win32sck.c:847:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&u_long_arg, data, sizeof u_long_arg); 
/home/capstone/Desktop/root/perl-5.30.0/win32/win32sck.c:849:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(data, &u_long_arg, sizeof u_long_arg);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:82:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char	w32_module_name[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:169:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char base[10];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:171:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mod_name[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:181:5:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
    sprintf(base, "%d.%d", (int)PERL_REVISION, (int)PERL_VERSION);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:237:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:254:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char regstr[40];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:255:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char pathstr[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:652:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char		scanname[MAX_PATH+3];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:657:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char		buffer[MAX_PATH*2];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:753:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char		buffer[MAX_PATH*2];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1008:6:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	    strcpy(name->sysname, "Windows CE");
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1011:6:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	    strcpy(name->sysname, "Windows");
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1014:6:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	    strcpy(name->sysname, "Windows NT");
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1017:6:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	    strcpy(name->sysname, "Win32s");
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1020:6:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	    strcpy(name->sysname, "Win32 Unknown");
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1025:2:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	sprintf(name->release, "%d.%d",
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1029:2:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
	sprintf(name->version, "Build %d",
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1521:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char prefix[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1522:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char filename[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1885:6:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
	    strcpy(curfullcmd, ".exe");
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1979:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char szfilename[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2384:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char mode[3];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2435:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[MAX_PATH];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2520:3:  [2] (buffer) wchar_t:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  wchar_t wbuf[126];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2521:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[126];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2526:5:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
    sprintf(buf, "SystemParametersInfo failed: %d", GetLastError());
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2551:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char szSourceFile[MAX_PATH+1];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2616:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[126];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2619:3:  [2] (buffer) wchar_t:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  wchar_t wfile[MAX_PATH];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2620:3:  [2] (buffer) wchar_t:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  wchar_t wverb[20];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2632:3:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
  MultiByteToWideChar(CP_ACP, 0, verb, -1,
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2636:3:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
  MultiByteToWideChar(CP_ACP, 0, file, -1,
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2681:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[126];
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2754:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[126];
/home/capstone/Desktop/root/perl-5.30.0/win32/wincesck.c:348:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&u_long_arg, data, sizeof u_long_arg); 
/home/capstone/Desktop/root/perl-5.30.0/win32/wincesck.c:350:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(data, &u_long_arg, sizeof u_long_arg);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:127:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	buffer = (char *) malloc((strlen(commandLine) + 1) * sizeof(char));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:181:4:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  Risk is low because the source is a constant character.
			strncpy(pclp->sSkippedToken, "", (MAX_DN_BYTES * sizeof(char)));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:486:3:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  Risk is low because the source is a constant character.
		strncpy(pclp->m_argv[i], "", (MAX_DN_BYTES * sizeof(char)));	// MAX_DN_BYTES is the size of pclp->m_argv[].
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:490:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	if ((new_arg==NULL) || ((strlen(new_arg))<=0))
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:659:3:  [1] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant character.
		strcpy(buffer, "");
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:663:3:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
		strncpy(buffer, s, length);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:748:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		numbuf[strlen(numbuf)-1] = '\0';
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:753:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		if (strlen(numbuf) > 5)
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:754:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			pPid = &numbuf[strlen(numbuf)-5];
/home/capstone/Desktop/root/perl-5.30.0/NetWare/NWUtil.c:837:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		totalSize += strlen(argv[k]) + 1;
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:367:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	if ((strnicmp(cptr, PERL_COMMAND_NAME, strlen(PERL_COMMAND_NAME)) == 0) &&
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:368:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		 ((cptr[strlen(PERL_COMMAND_NAME)] == ' ') ||
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:369:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		 (cptr[strlen(PERL_COMMAND_NAME)] == '\t') ||
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwmain.c:370:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		 (cptr[strlen(PERL_COMMAND_NAME)] == '\0')))
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:189:2:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  Risk is low because the source is a constant character.
	strncpy(ptpf->m_fileName, "", (_MAX_PATH * sizeof(char)));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:334:2:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  Risk is low because the source is a constant character.
	strncpy(ptpf->m_redirect, "", (MAX_DN_BYTES * sizeof(char)));
/home/capstone/Desktop/root/perl-5.30.0/NetWare/Nwpipe.c:347:2:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
	strncpy ( tempName, fnNwGetEnvironmentStr((char *)"TEMP", NWDEFPERLTEMP), (_MAX_PATH - 20) );
/home/capstone/Desktop/root/perl-5.30.0/NetWare/intdef.h:45:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#define strlen		NWLmbslen
/home/capstone/Desktop/root/perl-5.30.0/NetWare/intdef.h:52:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
#define strncpy(x,y,z)     NWLstrbcpy(x,y,(z + 1))
/home/capstone/Desktop/root/perl-5.30.0/NetWare/intdef.h:60:9:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
#define strncat(x,y,l)   \
/home/capstone/Desktop/root/perl-5.30.0/NetWare/intdef.h:62:4:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
			strncat(x,y,l);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:510:13:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	    return getc(pf);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:528:13:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	    return fgetc(pf);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:576:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	len = strlen(filename);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:753:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	return read(fd, buf, cnt);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:984:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	Newx(argv, strlen(cmd) / 2 + 2, char*);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nw5.c:985:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	Newx(cmd2, strlen(cmd) + 1, char);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:113:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    *len = strlen(e);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlhost.h:883:12:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
    return umask(pmode);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlsys.h:251:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    *len = strlen(e);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/nwperlsys.h:773:12:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
    return umask(pmode);
/home/capstone/Desktop/root/perl-5.30.0/NetWare/testnlm/type/type.c:28:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if (!defaultDir || (strlen(defaultDir) == 0))
/home/capstone/Desktop/root/perl-5.30.0/NetWare/testnlm/type/type.c:39:25:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
      while ((thechar = getc(pfile)) != EOF)
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:504:12:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#    undef getc
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:565:13:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#    define getc		PerlSIO_getc
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:602:13:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#    define read		PerlLIO_read
/home/capstone/Desktop/root/perl-5.30.0/XSUB.h:607:13:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
#    define umask		PerlLIO_umask
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:654:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	const Size_t cmdlen = strlen(incmd) + 1;
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:882:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	for (p = string; p < string + strlen(string); p++)
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:904:8:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#undef fgetc
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:949:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    strlen(*cur) + 1 +
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:957:7:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
		if (fgetc(fh) == '#' && fgetc(fh) == '!')
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:957:27:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
		if (fgetc(fh) == '#' && fgetc(fh) == '!')
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:965:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			if (buffer[strlen(buffer) - 1] == '\n')
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:966:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
				buffer[strlen(buffer) - 1] = '\0';
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:979:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			size += strlen(interpreter) + 1;
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:980:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			size += strlen(interpreter_args) + 1;
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:999:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		size += strlen(filename_conv);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1030:4:  [1] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source is a constant character.
			sprintf(full, "");
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1046:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
					                 strlen(*cur) + 4 + esc,
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1084:6:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
					strcat(full, "\"");
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1092:5:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
				strcat(full, " ");
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaio.c:1095:3:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
		strcat(full, "\n");
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:155:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	size = strlen(s) + 1;
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:282:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			if ((len = strlen(*envp)))
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:296:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
							    strlen(val) + 1,
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:338:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		len = strlen(filename) + 1;
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:339:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		name = (char *)IExec->AllocVecTags(strlen(path) + len, AVT_ClearWithValue,0,AVT_Type,MEMF_SHARED,TAG_DONE);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:340:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		pathpart = (char *)IExec->AllocVecTags(strlen(path) + 1, AVT_ClearWithValue,0,AVT_Type,MEMF_SHARED,TAG_DONE);
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:353:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			if (!(strlen(pathpart) == 0))
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:422:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	if (strlen(message->sv_GDir) <= 4)
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:431:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	if (strlen(message->sv_GDir) <= 4)
/home/capstone/Desktop/root/perl-5.30.0/amigaos4/amigaos.c:435:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    strlen(message->sv_Name) + 1 + message->sv_VarLen + 1 + 1;
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib.c:921:14:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
   Int32 c = fgetc ( f );
/home/capstone/Desktop/root/perl-5.30.0/cpan/Compress-Raw-Bzip2/bzip2-src/bzlib.c:1431:4:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
   strcat(mode2,"b");   /* binary mode */
/home/capstone/Desktop/root/perl-5.30.0/cpan/Digest-SHA/src/sdf.c:96:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            (stash && isa_lookup(stash, name, strlen(name), 0) == &sv_yes)
/home/capstone/Desktop/root/perl-5.30.0/cpan/Win32API-File/buffers.h:415:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    SvCUR_set( svBuf, strlen(sBuf) );				\
/home/capstone/Desktop/root/perl-5.30.0/cpan/Win32API-File/buffers.h:422:24:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    SvCUR_set( svBuf, wcslen(sBuf)*sizeof(WCHAR) );		\
/home/capstone/Desktop/root/perl-5.30.0/cpan/Win32API-File/const2perl.h:56:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    Size_t lLen= 1+2*strlen(sValue);
/home/capstone/Desktop/root/perl-5.30.0/cpan/Win32API-File/const2perl.h:92:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	char *sVarName= (char *) malloc( 15+strlen(sModName) );
/home/capstone/Desktop/root/perl-5.30.0/cpan/Win32API-File/const2perl.h:153:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    { char *sVarName= malloc( 15+strlen(sModName) );		\
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:195:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int wlen = sizeof(wchar_t)*strlen(buf);
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:477:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	av_push(av, newSVpvn(mnt->mnt_dir, strlen(mnt->mnt_dir)));
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:478:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	av_push(av, newSVpvn(mnt->mnt_fsname, strlen(mnt->mnt_fsname)));
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:479:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	av_push(av, newSVpvn(mnt->mnt_type, strlen(mnt->mnt_type)));
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:480:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	av_push(av, newSVpvn(mnt->mnt_opts, strlen(mnt->mnt_opts)));
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:508:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strlen(user) > 0) {
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:524:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		if (strlen(mnt->mnt_opts) > 0) {
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:525:7:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
		    strcat(flags, ",");
/home/capstone/Desktop/root/perl-5.30.0/cygwin/cygwin.c:546:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    if (strlen(user) > 0) {
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:44:57:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    else if (md[0] == 'w' && (l1->command = malloc (1 + strlen (cm))))
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:284:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            pattern=alloca (strlen (name+=13)+1);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:300:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                len+=1+strlen (pglob.gl_pathv[ic]);
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:308:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    p1+=strlen (p1)+1;
/home/capstone/Desktop/root/perl-5.30.0/djgpp/djgpp.c:315:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                gi->size=strlen (name)+1;
/home/capstone/Desktop/root/perl-5.30.0/doio.c:1117:23:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
      int old_umask = umask(0177);
/home/capstone/Desktop/root/perl-5.30.0/doio.c:1119:7:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
      umask(old_umask);
/home/capstone/Desktop/root/perl-5.30.0/doio.c:2332:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const Size_t cmdlen = strlen(incmd) + 1;
/home/capstone/Desktop/root/perl-5.30.0/dump.c:1265:53:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            generic_pv_escape(label, cPVOPo->op_pv, strlen(cPVOPo->op_pv), 0);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dba.c:24:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		name = (char *) malloc((n = strlen(p)) + 5);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dba.c:52:14:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	while ((b = read(pagf, pag, PBLKSIZ)) > 0) {
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbd.c:27:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		name = (char *) malloc((n = strlen(p)) + 5);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbd.c:52:14:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	while ((r = read(pagf, pag, PBLKSIZ)) > 0) {
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbe.c:154:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	db.dptr = (char *) malloc(strlen(s) * sizeof(char));
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbu.c:117:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			n = strlen(line) - 1;
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbu.c:135:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			n = strlen(line) - 1;
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/dbu.c:159:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			n = strlen(line) - 1;
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:91:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	filelen = strlen(file);
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:398:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	    || read(db->pagf, db->pagbuf, PBLKSIZ) < 0)
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:452:10:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
		    || read(db->pagf, db->pagbuf, PBLKSIZ) < 0)
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:479:15:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
		    || (got=read(db->dirf, db->dirbuf, DBLKSIZ)) < 0)
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:503:15:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
		    || (got=read(db->dirf, db->dirbuf, DBLKSIZ)) < 0)
/home/capstone/Desktop/root/perl-5.30.0/ext/SDBM_File/sdbm.c:553:7:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
		if (read(db->pagf, db->pagbuf, PBLKSIZ) <= 0)
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:23:8:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#undef fgetc
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:41:8:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#undef getc
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:78:9:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define fgetc(f)		PerlIO_getc(f)
/home/capstone/Desktop/root/perl-5.30.0/fakesdio.h:81:9:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define getc(f)			PerlIO_getc(f)
/home/capstone/Desktop/root/perl-5.30.0/gv.c:97:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return gv_fetchfile_flags(name, strlen(name), 0);
/home/capstone/Desktop/root/perl-5.30.0/gv.c:189:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    len = strlen(file);
/home/capstone/Desktop/root/perl-5.30.0/gv.c:361:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
   gv_init_pvn(gv, stash, name, strlen(name), flags);
/home/capstone/Desktop/root/perl-5.30.0/gv.c:670:53:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return gv_fetchmeth_internal(stash, NULL, name, strlen(name), level, flags);
/home/capstone/Desktop/root/perl-5.30.0/gv.c:914:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return gv_fetchmeth_pvn_autoload(stash, name, strlen(name), level, flags);
/home/capstone/Desktop/root/perl-5.30.0/gv.c:1016:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return gv_fetchmethod_pvn_flags(stash, name, strlen(name), flags);
/home/capstone/Desktop/root/perl-5.30.0/gv.c:1187:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
   return gv_autoload_pvn(stash, namepv, strlen(namepv), flags);
/home/capstone/Desktop/root/perl-5.30.0/gv.c:1412:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return gv_stashpvn(name, strlen(name), create);
/home/capstone/Desktop/root/perl-5.30.0/gv.c:1579:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return gv_fetchpvn_flags(nambeg, strlen(nambeg), add, sv_type);
/home/capstone/Desktop/root/perl-5.30.0/gv.c:2014:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			SV * const * const init = hv_fetch(hv, PL_sig_name[i], strlen(PL_sig_name[i]), 1);
/home/capstone/Desktop/root/perl-5.30.0/gv.c:2578:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                UTF8fARG(flags, strlen(pack), pack),
/home/capstone/Desktop/root/perl-5.30.0/hv.c:3463:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return refcounted_he_fetch_pvn(chain, key, strlen(key), hash, flags);
/home/capstone/Desktop/root/perl-5.30.0/hv.c:3651:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return refcounted_he_new_pvn(parent, key, strlen(key), hash, value, flags);
/home/capstone/Desktop/root/perl-5.30.0/inline.h:405:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen((const char *)s);
/home/capstone/Desktop/root/perl-5.30.0/inline.h:903:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen((const char *)s);
/home/capstone/Desktop/root/perl-5.30.0/inline.h:975:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen((const char *) s);
/home/capstone/Desktop/root/perl-5.30.0/inline.h:1252:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen((const char *) s);
/home/capstone/Desktop/root/perl-5.30.0/inline.h:1329:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen((const char *) s);
/home/capstone/Desktop/root/perl-5.30.0/inline.h:1413:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen((const char *) s);
/home/capstone/Desktop/root/perl-5.30.0/inline.h:1909:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(pv);
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:299:28:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define PerlSIO_fgetc(f)			fgetc(f)
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:765:38:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define PerlLIO_read(fd, buf, count)	read((fd), (buf), (count))
/home/capstone/Desktop/root/perl-5.30.0/iperlsys.h:769:30:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
#define PerlLIO_umask(mode)		umask((mode))
/home/capstone/Desktop/root/perl-5.30.0/locale.c:682:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                names_len += strlen(category_names[i])
/home/capstone/Desktop/root/perl-5.30.0/locale.c:684:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                          + strlen(PL_curlocales[i])
/home/capstone/Desktop/root/perl-5.30.0/locale.c:869:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        const char * e = locale + strlen(locale);
/home/capstone/Desktop/root/perl-5.30.0/locale.c:2377:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    string_size = strlen(string) + offset + 1;
/home/capstone/Desktop/root/perl-5.30.0/locale.c:3062:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    Size_t format_size = strlen(format) + 1;
/home/capstone/Desktop/root/perl-5.30.0/locale.c:3862:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    STRLEN s_strlen = strlen(input_string);
/home/capstone/Desktop/root/perl-5.30.0/locale.c:4020:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            s_strlen = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/locale.c:4028:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/locale.c:4583:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    input_name_len = strlen(save_input_locale);
/home/capstone/Desktop/root/perl-5.30.0/locale.c:4948:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        const Size_t final_pos = strlen(save_input_locale) - 1;
/home/capstone/Desktop/root/perl-5.30.0/locale.c:5026:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        Size_t utf8ness_cache_len = strlen(utf8ness_cache);
/home/capstone/Desktop/root/perl-5.30.0/locale.c:5046:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            utf8ness_cache_len = strlen(utf8ness_cache);
/home/capstone/Desktop/root/perl-5.30.0/locale.c:5058:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if ((PL_locale_utf8ness[strlen(PL_locale_utf8ness)-1]
/home/capstone/Desktop/root/perl-5.30.0/locale.c:5065:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                PL_locale_utf8ness, strlen(PL_locale_utf8ness),
/home/capstone/Desktop/root/perl-5.30.0/locale.c:5076:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        while (s < PL_locale_utf8ness + strlen(PL_locale_utf8ness)) {
/home/capstone/Desktop/root/perl-5.30.0/locale.c:5305:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        print_bytes_for_locale(errstr, errstr + strlen(errstr), 0);
/home/capstone/Desktop/root/perl-5.30.0/locale.c:5561:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    assert(strlen(ret) < sizeof(ret));
/home/capstone/Desktop/root/perl-5.30.0/malloc.c:277:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#    define fatalcroak(mess)	(write(2, (mess), strlen(mess)), exit(2))
/home/capstone/Desktop/root/perl-5.30.0/malloc.c:1058:100:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#define MYMALLOC_WRITE2STDERR(s) PERL_UNUSED_RESULT(PerlLIO_write(PerlIO_fileno(PerlIO_stderr()),s,strlen(s)))
/home/capstone/Desktop/root/perl-5.30.0/malloc.c:2095:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    MEM_SIZE l = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/mg.c:1040:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		      strlen(PL_phase_names[PL_phase]));
/home/capstone/Desktop/root/perl-5.30.0/mg.c:3285:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return whichsig_pvn(sig, strlen(sig));
/home/capstone/Desktop/root/perl-5.30.0/mg.c:3297:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	if (strlen(*sigv) == len && memEQ(sig,*sigv, len))
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:38:8:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#undef fgetc
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:56:8:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#undef getc
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:91:9:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define fgetc(f)  _CANNOT _fgetc_
/home/capstone/Desktop/root/perl-5.30.0/nostdio.h:95:9:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define getc(f)  _CANNOT _getc_
/home/capstone/Desktop/root/perl-5.30.0/numeric.c:1204:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        end2 = s + strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/numeric.c:1511:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                           : strlen(orig)); /* one past the last */
/home/capstone/Desktop/root/perl-5.30.0/op.c:4765:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen(attrstr);
/home/capstone/Desktop/root/perl-5.30.0/op.c:8168:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	Perl_cop_store_label(aTHX_ cop, label, strlen(label), utf8);
/home/capstone/Desktop/root/perl-5.30.0/op.c:9023:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    if (l == strlen(s)) {
/home/capstone/Desktop/root/perl-5.30.0/op.c:10535:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return newCONSTSUB_flags(stash, name, name ? strlen(name) : 0, 0, sv);
/home/capstone/Desktop/root/perl-5.30.0/op.c:10674:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	name, name ? strlen(name) : 0, subaddr, filename, NULL, NULL, 0
/home/capstone/Desktop/root/perl-5.30.0/op.c:10685:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
       name, name ? strlen(name) : 0, subaddr, filename, proto, NULL, flags
/home/capstone/Desktop/root/perl-5.30.0/op.c:10694:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        name, strlen(name), subaddr, NULL, NULL, NULL, 0
/home/capstone/Desktop/root/perl-5.30.0/op.h:653:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
   cv_ckproto_len_flags((cv), (gv), (p), (p) ? strlen(p) : 0, 0)
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:118:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	if (strlen(path) >= sizeof(tmp))
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:123:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	for (beg = dot = path + strlen(path);
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:132:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		memmove(tmp+n, dot, strlen(dot)+1);
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:176:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	len = strlen(err);
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:179:2:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
	strncpy(buf, err, len+1);
/home/capstone/Desktop/root/perl-5.30.0/os2/dl_os2.c:180:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	if (fail[0] && len + strlen(fail) < sizeof(buf) - 100)
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:349:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	write(2,buf,strlen(buf));
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:373:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	write(2,buf,strlen(buf));
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1038:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		int l = strlen(real_name);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1381:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	STRLEN l = strlen(PL_sh_path);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1383:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	Newx(news, strlen(cmd) - 7 + l + 1, char);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1747:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    STRLEN l = strlen(name);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1846:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(p);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:1847:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    tpath = (char *)malloc(len + strlen(TMPPATH1) + 2);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2033:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(fname, s, 8);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2034:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2096:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    s = os2error_buf + strlen(os2error_buf);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2105:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		s = os2error_buf + strlen(os2error_buf);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2192:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!oname || strlen(oname) >= l)
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2242:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	s = dir_subst(s, strlen(s), b, sizeof b, 0, "handler_perl_sh");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2247:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	s = dir_subst(s, strlen(s), b, sizeof b, 0, "handler_perllib_from");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2248:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	oldl = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2253:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	s = dir_subst(s, strlen(s), b, sizeof b, 0, "handler_perllib_to");
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2254:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	newl = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2288:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    froml = strlen(from) + 1;
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2295:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		tol = strlen(INSTALL_PREFIX);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2347:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		tol = strlen(to);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2395:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	l = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2433:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    oldl = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:2445:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	l = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3527:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    Copy(path, p1 + 2, strlen(path) + 1, char);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3566:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			int l = strlen(p1);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3572:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			Copy(path, p1 + l, strlen(path) + 1, char);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3589:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	l = strlen(RETVAL);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3650:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    DosWrite(2, msg1, strlen(msg1), &rc);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3651:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    DosWrite(2, msg2, strlen(msg2), &rc);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3652:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    DosWrite(2, msg3, strlen(msg3), &rc);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3679:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	l = strlen(to);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3724:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	pre = dir_subst(pre, strlen(pre), buf1, sizeof buf1, dir_subst_pathlike, msg);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3727:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	l = strlen(pre);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3747:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      to += strlen(to);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3755:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	post = dir_subst(post, strlen(post), buf1, sizeof buf1, dir_subst_pathlike, msg);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:3758:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	l = strlen(post);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4275:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    if ( do_open6(gv, perltype, strlen(perltype), perlio, NULL, 0) )
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4402:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    size = strlen(b.pInfo.szName);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4727:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	sprintf(buf + strlen(buf), 
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4736:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    sprintf(buf + strlen(buf),
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4738:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    DosWrite(2, buf, strlen(buf), &out);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4752:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	DosWrite(2, buf, strlen(buf), &out);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4850:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    DosWrite(2, buf, strlen(buf), &out);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4897:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    e = e + strlen(e) + 1;
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4904:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    e = e + strlen(e) + 1;
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4956:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	int l = strlen(perl_sh_installed);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4961:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	Newx(PL_sh_path, strlen(SH_PATH) + 1, char);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4965:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	int l = strlen(shell), i;
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4970:2:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
	strncpy(PL_sh_path, shell, l);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:4999:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	DosWrite(2, buf, strlen(buf), &rc);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5082:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    STRLEN l = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2.c:5107:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    STRLEN l = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/os2ish.h:374:9:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
#define usleep(usec)	((void)async_mssleep(((usec)+500)/1000, 500))
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:94:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    s += strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:97:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		s += strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:138:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	retstr->strlength = strlen (retstr->strptr);
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:165:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    retstr->strlength = strlen (retstr->strptr);
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:179:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    retstr->strlength = strlen (retstr->strptr);
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:186:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int len = strlen(last_error);
/home/capstone/Desktop/root/perl-5.30.0/os2/perlrexx.c:195:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	retstr->strlength = strlen(retstr->strptr);
/home/capstone/Desktop/root/perl-5.30.0/pad.c:649:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return pad_add_name_pvn(name, strlen(name), flags, typestash, ourstash);
/home/capstone/Desktop/root/perl-5.30.0/pad.c:997:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return pad_findmy_pvn(name, strlen(name), flags);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:287:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            grok_number(env_pv, strlen(env_pv), &seed) != IS_NUMBER_IN_UV) {
/home/capstone/Desktop/root/perl-5.30.0/perl.c:351:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        assert( strlen(PERL_HASH_SEED) >= PERL_HASH_SEED_BYTES );
/home/capstone/Desktop/root/perl-5.30.0/perl.c:554:8:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	got = read(sock, buffer + 1, *buffer);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:864:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		unsigned char length = (unsigned char) strlen(where);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:2169:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		STRLEN len = strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:2192:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    s += strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:2349:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    SV *sitelib_sv = mayberelocate(raw_sitelib, strlen(raw_sitelib),
/home/capstone/Desktop/root/perl-5.30.0/perl.c:2851:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return get_cvn_flags(name, strlen(name), flags);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:2926:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(methname);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:3376:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        const char* e = *s + strlen(*s);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:3490:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    end = s + strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:3621:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    end = s + strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:3971:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        s = scriptname + strlen(scriptname);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:4046:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    && strlen(scriptname) == sizeof(tmpname) - 1)
/home/capstone/Desktop/root/perl-5.30.0/perl.c:4755:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    S_incpush_use_sep(aTHX_ sitearch, strlen(sitearch), 0x0);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:4762:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    S_incpush_use_sep(aTHX_ sitelib, strlen(sitelib), 0x0);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:4837:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    len = strlen(unix);
/home/capstone/Desktop/root/perl-5.30.0/perl.c:5087:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	len = strlen(p);
/home/capstone/Desktop/root/perl-5.30.0/perl.h:886:14:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
EXTERN_C int usleep(unsigned int);
/home/capstone/Desktop/root/perl-5.30.0/perl.h:1128:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#  define panic_write2(s)		write(2, s, strlen(s))
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:722:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	len = strlen(name);
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:725:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        const STRLEN this_len = strlen(f->name);
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:1581:35:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
     Perl_PerlIO_or_Base(f, Read, read, -1, (aTHX_ f, vbuf, count));
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:3441:7:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
		if (fgetc(s) != EOF)  /* get char back again */
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:4988:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return PerlIO_write(f, s, strlen(s));
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:5065:22:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
     int old_umask = umask(0177);
/home/capstone/Desktop/root/perl-5.30.0/perlio.c:5084:6:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
     umask(old_umask);
/home/capstone/Desktop/root/perl-5.30.0/pp_ctl.c:2562:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		: (label_len = strlen(cPVOP->op_pv), cPVOP->op_pv);
/home/capstone/Desktop/root/perl-5.30.0/pp_ctl.c:3005:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        label_len   = strlen(label);
/home/capstone/Desktop/root/perl-5.30.0/pp_ctl.c:3855:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	unixlen = strlen(unixname);
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:3845:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    Size_t size = strlen(cmd) + (strlen(filename) * 2) + 10;
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:3845:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    Size_t size = strlen(cmd) + (strlen(filename) * 2) + 10;
/home/capstone/Desktop/root/perl-5.30.0/pp_sys.c:3852:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    for (s = cmdline + strlen(cmdline); *filename; ) {
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:20596:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		      (strlen(s) > PL_dump_re_max_len ? "..." : ""));
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:21175:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    STRLEN l1 = strlen(pat1);
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:21176:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    STRLEN l2 = strlen(pat2);
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:22463:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const STRLEN key_len = strlen((const char *) key);
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:22506:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                      UTF8fARG(is_utf8, strlen(pkgname), pkgname));
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:22762:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    const Size_t len = strlen(entry);
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:23460:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                        SSize_t excess_exponent_len = strlen(cur_ptr) - 2;
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:23471:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                     strlen(cur_ptr) - excess_leading_zeros
/home/capstone/Desktop/root/perl-5.30.0/regcomp.c:23558:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            table_index = match_uniprop((U8 *) canonical, strlen(canonical));
/home/capstone/Desktop/root/perl-5.30.0/sv.c:3057:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		const STRLEN typelen = strlen(typestr);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:5008:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(ptr);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:5583:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(ptr);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:5609:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_catpvn_flags(dstr, sstr, strlen(sstr), flags);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:9373:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_setpvn(sv, s, len || s == NULL ? len : strlen(s));
/home/capstone/Desktop/root/perl-5.30.0/sv.c:9525:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return newSVpvn_share(src, strlen(src), hash);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:9584:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_vsetpvfn(sv, pat, strlen(pat), args, NULL, 0, NULL);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:9794:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_resetpvn(*s ? s : NULL, strlen(s), stash);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:10792:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_vsetpvfn(sv, pat, strlen(pat), args, NULL, 0, NULL);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:10830:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_vsetpvfn(sv, pat, strlen(pat), args, NULL, 0, NULL);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:10850:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_vcatpvfn_flags(sv, pat, strlen(pat), &args, NULL, 0, NULL, SV_GMAGIC|SV_SMAGIC);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:10868:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_vcatpvfn_flags(sv, pat, strlen(pat), &args, NULL, 0, NULL, SV_GMAGIC|SV_SMAGIC);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:10897:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_vcatpvfn_flags(sv, pat, strlen(pat), &args, NULL, 0, NULL, SV_GMAGIC|SV_SMAGIC);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:10918:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_vcatpvfn_flags(sv, pat, strlen(pat), args, NULL, 0, NULL, SV_GMAGIC|SV_SMAGIC);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:10937:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_vcatpvfn_flags(sv, pat, strlen(pat), &args, NULL, 0, NULL, SV_GMAGIC|SV_SMAGIC);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:10957:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_vcatpvfn(sv, pat, strlen(pat), args, NULL, 0, NULL);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:12340:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                        elen = strlen(eptr);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:13061:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                elen = strlen(ebuf);
/home/capstone/Desktop/root/perl-5.30.0/sv.c:13624:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
# define d_namlen(d) strlen((d)->d_name)
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_proto.h:23:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
extern size_t strlen(const char *s);
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_proto.h:39:15:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
extern char*  strncpy(char *dst, const char *src, size_t n);
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_utils.cpp:167:52:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  const TPtrC8 kerrp((const unsigned char *)kerr, strlen(kerr));
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbian_utils.cpp:168:52:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  const TPtrC8 descp((const unsigned char *)desc, strlen(desc));
/home/capstone/Desktop/root/perl-5.30.0/symbian/symbianish.h:170:9:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
#define usleep(u) symbian_usleep(u)
/home/capstone/Desktop/root/perl-5.30.0/taint.c:180:57:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	SV * const * const svp = hv_fetch(GvHVn(PL_envgv), *e, strlen(*e), FALSE);
/home/capstone/Desktop/root/perl-5.30.0/toke.c:463:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    PerlIO_printf(Perl_debug_log, fmt, pv_display(tmp, s, strlen(s), 0, 60));
/home/capstone/Desktop/root/perl-5.30.0/toke.c:1112:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    lex_stuff_pvn(pv, strlen(pv), flags);
/home/capstone/Desktop/root/perl-5.30.0/toke.c:2145:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	const STRLEN len = s[1] ? strlen(s) : 1; /* s = "\"" see yylex */
/home/capstone/Desktop/root/perl-5.30.0/toke.c:4281:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    len = (int)strlen(tmpbuf);
/home/capstone/Desktop/root/perl-5.30.0/toke.c:4879:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    pv_display(tmp, s, strlen(s), 0, 60));
/home/capstone/Desktop/root/perl-5.30.0/toke.c:7726:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
				     UTF8fARG(UTF, strlen(PL_tokenbuf),
/home/capstone/Desktop/root/perl-5.30.0/toke.c:8545:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    gv_stashpvn(PL_tokenbuf, strlen(PL_tokenbuf),
/home/capstone/Desktop/root/perl-5.30.0/toke.c:9035:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const STRLEN tokenbuf_len = strlen(PL_tokenbuf);
/home/capstone/Desktop/root/perl-5.30.0/toke.c:11775:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return yyerror_pvn(s, strlen(s), 0);
/home/capstone/Desktop/root/perl-5.30.0/toke.c:11782:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return yyerror_pvn(s, strlen(s), flags);
/home/capstone/Desktop/root/perl-5.30.0/universal.c:126:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return sv_derived_from_pvn(sv, name, strlen(name), 0);
/home/capstone/Desktop/root/perl-5.30.0/universal.c:143:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return sv_derived_from_pvn(sv, name, strlen(name), flags);
/home/capstone/Desktop/root/perl-5.30.0/universal.c:229:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    SvCUR_set(methodname, strlen(PL_isa_DOES));
/home/capstone/Desktop/root/perl-5.30.0/universal.c:255:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return sv_does_sv(sv, newSVpvn_flags(name, strlen(name), SVs_TEMP), 0);
/home/capstone/Desktop/root/perl-5.30.0/universal.c:271:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return sv_does_sv(sv, newSVpvn_flags(name, strlen(name), SVs_TEMP | flags), flags);
/home/capstone/Desktop/root/perl-5.30.0/utf8.c:3201:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	if (! hv_fetch(PL_seen_deprecated_macro, key, strlen(key), 0)) {
/home/capstone/Desktop/root/perl-5.30.0/utf8.c:3206:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                           strlen(key), &PL_sv_undef, 0))
/home/capstone/Desktop/root/perl-5.30.0/utf8.c:4309:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	const size_t pkg_len = strlen(pkg);
/home/capstone/Desktop/root/perl-5.30.0/utf8.c:4310:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	const size_t name_len = strlen(name);
/home/capstone/Desktop/root/perl-5.30.0/util.c:1066:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	const STRLEN pvlen = strlen(pv)+1;
/home/capstone/Desktop/root/perl-5.30.0/util.c:1129:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    pvlen = strlen(pv)+1;
/home/capstone/Desktop/root/perl-5.30.0/util.c:1285:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_vsetpvfn(sv, pat, strlen(pat), args, NULL, 0, NULL);
/home/capstone/Desktop/root/perl-5.30.0/util.c:1498:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_vsetpvfn(sv, pat, strlen(pat), args, NULL, 0, NULL);
/home/capstone/Desktop/root/perl-5.30.0/util.c:2124:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        Size_t vlen, nlen = strlen(nam);
/home/capstone/Desktop/root/perl-5.30.0/util.c:2144:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                const Size_t len = strlen(environ[j]);
/home/capstone/Desktop/root/perl-5.30.0/util.c:2173:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        vlen = strlen(val);
/home/capstone/Desktop/root/perl-5.30.0/util.c:2200:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    const Size_t nlen = strlen(nam);
/home/capstone/Desktop/root/perl-5.30.0/util.c:2201:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    const Size_t vlen = strlen(val);
/home/capstone/Desktop/root/perl-5.30.0/util.c:2210:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	const Size_t nlen = strlen(nam);
/home/capstone/Desktop/root/perl-5.30.0/util.c:2215:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        vlen = strlen(val);
/home/capstone/Desktop/root/perl-5.30.0/util.c:2241:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const Size_t nlen = strlen(nam);
/home/capstone/Desktop/root/perl-5.30.0/util.c:2247:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    vlen = strlen(val);
/home/capstone/Desktop/root/perl-5.30.0/util.c:3167:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(scriptname);
/home/capstone/Desktop/root/perl-5.30.0/util.c:3190:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    if ((strlen(tmpbuf) + strlen(scriptname)
/home/capstone/Desktop/root/perl-5.30.0/util.c:3190:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    if ((strlen(tmpbuf) + strlen(scriptname)
/home/capstone/Desktop/root/perl-5.30.0/util.c:3225:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		len = strlen(scriptname);
/home/capstone/Desktop/root/perl-5.30.0/util.c:3245:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	bufend = s + strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/util.c:3262:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    if (len + 1 + strlen(scriptname) + MAX_EXT_LEN >= sizeof tmpbuf)
/home/capstone/Desktop/root/perl-5.30.0/util.c:3277:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    len = strlen(tmpbuf);
/home/capstone/Desktop/root/perl-5.30.0/util.c:3436:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	*len = strlen(env_trans);
/home/capstone/Desktop/root/perl-5.30.0/util.c:3863:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    const int fmtlen = strlen(fmt);
/home/capstone/Desktop/root/perl-5.30.0/util.c:3988:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    namelen = strlen(dp->d_name);
/home/capstone/Desktop/root/perl-5.30.0/util.c:4381:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            const char* endptr = p + strlen(p);
/home/capstone/Desktop/root/perl-5.30.0/util.c:4768:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            const char* endptr = pmlenv + strlen(pmlenv);
/home/capstone/Desktop/root/perl-5.30.0/util.c:4928:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(format);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5178:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      int l = e ? e - *environ : (int)strlen(*environ);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5537:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    used = strlen(dst);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5538:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    length = strlen(src);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5571:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    length = strlen(src);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5712:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    STRLEN len = strlen(templte);
/home/capstone/Desktop/root/perl-5.30.0/util.c:5958:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                *symbol_name_size = strlen(func);
/home/capstone/Desktop/root/perl-5.30.0/util.c:6303:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    dl_info->dli_fname ? strlen(dl_info->dli_fname) : 0;
/home/capstone/Desktop/root/perl-5.30.0/util.c:6305:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    dl_info->dli_sname ? strlen(dl_info->dli_sname) : 0;
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:121:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    LineBufferLength = strlen(LineBuffer);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:151:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    LineBufferLength = strlen(LineBuffer);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:179:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    TempLength = strlen(TempValue);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:188:7:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
      strcat(TempValue, "\n");
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:193:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      TempLength = strlen(TempValue);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:241:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    LineBufferLength = strlen(LineBuffer);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:361:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  TempLength = strlen(LineBuffer);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:381:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            CopiedBufferLength = strlen(TempBuffer);
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:392:11:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
          strcat(TempBuffer, "~");
/home/capstone/Desktop/root/perl-5.30.0/vms/munchconfig.c:393:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          CopiedBufferLength = strlen(TempBuffer);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:273:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    name_dsc.dsc$w_length = strlen(logname);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:691:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    path_desc.dsc$w_length = strlen(path);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:845:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    lnmdsc.dsc$w_length = strlen(lnm);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:981:13:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
            strncpy(eqv,eqvdsc.dsc$a_pointer,eqvlen);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1005:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          eqvlen = strlen(eqv);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1104:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      len = strlen(eqv);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1200:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      *len = strlen(buf);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1447:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(lnm, key, keylen);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1449:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        sv = newSVpvn(eqv, strlen(eqv));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1468:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        hv_store(envhv,ppfs[i],strlen(ppfs[i]),sv,0);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1562:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        eqvdsc.dsc$w_length  = strlen(eqv);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1597:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                ile->buflen = strlen(c);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1654:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      int len = strlen(lnm);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1684:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    d_name.dsc$w_length = strlen(name);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1686:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    lnmlst[0].buflen = strlen(eqv);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1729:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    usrdsc.dsc$w_length = strlen(usrname);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1746:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    txtdsc.dsc$w_length = strlen(textpasswd);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:1837:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    fildsc.dsc$w_length = strlen(vmsname);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2045:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  STRLEN dirlen = strlen(dir);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2068:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  STRLEN dirlen = strlen(dir);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2117:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  STRLEN speclen = strlen(file_spec);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:2169:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  tmpnam(cp+strlen(cp));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:3556:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	d_dev.dsc$w_length = strlen(out);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4085:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    customization_dsc.dsc$w_length = strlen(customization);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4269:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        vmspipedsc.dsc$w_length  = strlen(tfilebuf);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4295:73:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        Perl_warner(aTHX_ packWARN(WARN_PIPE),"Can't pipe \"%*s\": %s", strlen(cmd), cmd, Strerror(errno));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4486:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        d_sym_cmd.dsc$w_length = strlen(cmd_sym_name);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4491:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if (strlen(p) > MAX_DCL_SYMBOL) {
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4494:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            p += strlen(p);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4518:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        d_sym_cmd.dsc$w_length = strlen(cmd_sym_name);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:4998:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  rms_set_fna(myfab, mynam, (char *)vmsname, strlen(vmsname)); /* cast ok */
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:5075:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    fildsc.dsc$w_length = strlen(vmsname);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:5379:12:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
		         strcat(vms_dst,".");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:5386:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	old_file_dsc.dsc$w_length = strlen(src_st.st_devnam);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:5391:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	new_file_dsc.dsc$w_length = strlen(vms_dst);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:5550:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  rms_set_fna(myfab, mynam, (char *)in_spec, strlen(in_spec)); /* cast ok */
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:5573:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  (char *)def_spec, strlen(def_spec)); /* cast ok */
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6028:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    dirlen = strlen(dir);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6052:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      dirlen = strlen(trndir);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6200:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            e_len = strlen(cp2);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6202:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                vs_len = strlen(cp3);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6274:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      rms_set_fna(dirfab, dirnam, trndir, strlen(trndir));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6396:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      retlen = strlen(my_esa);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6716:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        trnlen = strlen(trndir);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6851:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        STRLEN dir_len = strlen(trndir);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:6884:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            e_len = strlen(lastdot);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7044:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if (strlen(spec) > (VMS_MAXRSS-1)) {
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7075:4:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
	  strcat(rslt,"\n");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7367:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      ulen = strlen(rslt);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7477:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  unixlen = strlen(unixpath);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7535:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
     path_len = strlen(vmspath);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7554:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  rms_set_fna(myfab, mynam, (char *) vmspath, strlen(vmspath)); /* cast ok */
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7677:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(unixptr);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:7729:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  unixlen = strlen(unixptr);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8071:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      vmslen = strlen(vmspath); /* We know we're truncating. */
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8609:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    trnend = islnm ? strlen(trndev) - 1 : 0;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:8982:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    vmslen = strlen(vmsified);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9053:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    unixlen = strlen(unixified);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9192:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (*ap && '&' == ap[strlen(ap)-1])
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9194:5:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	ap[strlen(ap)-1] = '\0';
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9326:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	mbxnam.dsc$w_length = strlen(mbxnam.dsc$a_pointer);	
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9440:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
     item_len = strlen(item);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9458:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    filespec.dsc$w_length = strlen(filespec.dsc$a_pointer);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9600:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    value.dsc$w_length = strlen(value.dsc$a_pointer);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9615:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    pidstr.dsc$w_length = strlen(pidstr.dsc$a_pointer);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9710:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    ulen = strlen(argvp[0][0]);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9847:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    reslen = strlen(fspec);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:9858:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    tmplen = strlen(unixified);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10101:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    Newx(dd->pattern,strlen(dir)+sizeof "*.*" + 1,char);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10116:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    dd->pat.dsc$w_length = strlen(dd->pattern);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10180:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(dd->pattern);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10551:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  cmdlen = strlen(incmd);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10571:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if (strlen(cmd) > MAX_DCL_LINE_LENGTH) {
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10664:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          i = strlen(vmsspec);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10671:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        for (cp2 = vmsspec + strlen(vmsspec);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10691:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!wordbreak) wordbreak = s + strlen(s);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10727:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
        read(fileno(fp), b, 256);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10744:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  shebang_len = strlen(ALTERNATE_SHEBANG);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10874:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	   rest_len = strlen(rest);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10875:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	   vmscmd_len = strlen(vmscmd->dsc$a_pointer);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10881:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        vmscmd->dsc$w_length = strlen(vmscmd->dsc$a_pointer);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:10892:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  vmscmd->dsc$w_length = strlen(cmd);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11106:9:  [1] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant character.
        strcpy(mode, "n");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11369:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    name_desc.dsc$w_length=  strlen(name);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11403:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        ldir= strlen(pwd->pw_unixdir) - 1;
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11427:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      name_desc.dsc$w_length=  strlen(name);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11781:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    dev_desc.dsc$w_length =  strlen (dev);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11803:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  for (q = dev + strlen(dev); q--; q >= dev) {
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11909:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  retlen = namdsc.dsc$w_length = strlen(vmsname);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:11927:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  retlen = namdsc.dsc$w_length = strlen(fname);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12351:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    rms_set_fna(fab_in, nam, vmsin, strlen(vmsin));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12418:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    rms_set_fna(fab_out, nam_out, vmsout, strlen(vmsout));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12646:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_usepvn(ST(0),rslt,strlen(rslt));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12667:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_usepvn(ST(0),vmsified,strlen(vmsified));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12688:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_usepvn(ST(0),unixified,strlen(unixified));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12709:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_usepvn(ST(0),fileified,strlen(fileified));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12730:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_usepvn(ST(0),pathified,strlen(pathified));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12751:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_usepvn(ST(0),vmspath,strlen(vmspath));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12772:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sv_usepvn(ST(0),unixpath,strlen(unixpath));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12910:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if (strlen(work_name) + 3 <= max_name_len) {
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12928:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (strlen(work_name) + 3 > max_name_len) {
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:12943:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (strlen(work_name) + 3 > max_name_len) {
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13063:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            fname_len = strlen(fname);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13085:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    wilddsc.dsc$w_length = strlen(wilddsc.dsc$a_pointer);
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13215:10:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
	        strcat(begin,"\n");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13224:6:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
	    strcat(rstr,"\n");
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13272:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	sv_usepvn(ST(0),rslt,strlen(rslt));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13300:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	sv_usepvn(ST(0),rslt,strlen(rslt));
/home/capstone/Desktop/root/perl-5.30.0/vms/vms.c:13541:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        dvidsc.dsc$w_length=strlen(statbuf.st_dev);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlglob.c:50:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	len = strlen(argv[i]);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:140:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    *len = strlen(e);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:1059:12:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
    return umask(pmode);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2181:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    STRLEN length = strlen(lpStr)+1;
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2212:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	dwSize += strlen(m_lppEnvList[index]) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2231:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    length = strlen(ptr);
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2257:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	lpTmp += strlen(lpTmp) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2261:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    for(dwSize = 1; *lpTmp != '\0'; lpTmp += strlen(lpTmp) + 1) {
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2263:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	dwSize += strlen(lpTmp) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2285:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		nLength = strlen(lpEnvPtr) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2294:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    nLength = strlen(lpEnvPtr) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2302:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			lpStr += strlen(lpLocalEnv) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2307:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
			lpEnvPtr += strlen(lpEnvPtr) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2319:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		lpStr += strlen(lpLocalEnv) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2368:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	lpStr += strlen(lpStr) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/perlhost.h:2380:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	lpStr += strlen(lpStr) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:175:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	length = strlen(pPath);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:188:15:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    length = wcslen(wBuffer);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:212:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    pEnv += strlen(pEnv)+1;
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:225:14:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    pEnv += wcslen(pEnv)+1;
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:247:11:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	length = wcslen(pPath);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:260:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    length = strlen(ansi);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:392:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int length = strlen(pInName);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:398:2:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
	strncpy(szlBuf, pInName, MAX_PATH);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:422:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    if(strlen(szBuffer) > MAX_PATH)
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:448:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    if (strlen(szBuffer) > MAX_PATH)
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:466:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    length = strlen(pPtr);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:490:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    dwSize += strlen(dirTableA[index]) + 5;  /* add 1 for trailing NULL and 4 for '=D:=' */
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:510:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    length = strlen(lpDirStr);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:624:18:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int length = wcslen(pInName);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:630:2:  [1] (buffer) wcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
	wcsncpy(szlBuf, pInName, MAX_PATH);
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:654:9:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    if(wcslen(szBuffer) > MAX_PATH)
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:680:11:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    if (wcslen(szBuffer) > MAX_PATH)
/home/capstone/Desktop/root/perl-5.30.0/win32/vdir.h:697:14:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    length = wcslen(pPtr);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:253:40:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        memmove(fullname, fullname+4, (wcslen(fullname+4)+1)*sizeof(WCHAR));
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:334:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    baselen = strlen(base);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:555:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	int slen = strlen(str);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:722:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	Newx(argv, strlen(cmd) / 2 + 2, char*);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:723:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	Newx(cmd2, strlen(cmd) + 1, char);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:841:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(filename);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:907:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    idx = strlen(buffer)+1;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:931:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	len = strlen(dirp->curr);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:967:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		long newsize = endpos + strlen(buffer) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1461:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int		l = strlen(path);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1478:13:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
            strncpy(buffer, path, l);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1505:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    l = strlen(path);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1661:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    STRLEN len = strlen(fdata.cFileName);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1709:19:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t wlen = wcslen(wstr) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1742:22:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t widelen = wcslen(widename)+1;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1786:19:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        env_len = wcslen(lpWTmp);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1844:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    	    cur = end + strlen(end+1)+2;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1846:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		else if ((len = strlen(cur)))
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:1874:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        curitem = (char *) win32_malloc(strlen(name)+1);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2089:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        char *buf = name->version + strlen(name->version);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2096:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	STRLEN len = strlen(hep->h_name);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2101:6:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
	    strncpy(name->nodename, hep->h_name, nodemax);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:2826:12:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    return getc(pf);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3384:12:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    return read(fd, buf, cnt);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3466:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    clen = strlen(cname);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3498:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	STRLEN curlen = strlen(arg);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3517:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	STRLEN curlen = strlen(arg);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3619:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    Newx(fullcmd, (pathstr ? strlen(pathstr) : 0) + cmdlen + 6, char);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3717:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    cur = end + strlen(end+1)+2;
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3719:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	else if ((len = strlen(cur)))
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3732:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    Newx(ptr, strlen(szfilename)+1, char);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:3782:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	clen = strlen(cname);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:4004:12:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    return fgetc(pf);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:4022:12:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    return getchar();
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:4213:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	STRLEN len = strlen(filename);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:4422:20:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        wide_len = wcslen(wide_dir);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32.c:4428:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        ansi_len = strlen(ansi_dir);
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:214:8:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#undef getc
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:215:9:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define getc(f)			win32_getc(f)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:246:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define read(fd,b,s)		win32_read(fd,b,s)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:269:8:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#undef fgetc
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:270:9:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define fgetc			win32_fgetc
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:275:8:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#undef getchar
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop-o.h:276:9:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define getchar			win32_getchar
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:253:8:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#undef getc
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:254:9:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define getc(f)			win32_getc(f)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:338:10:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  undef read
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:340:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define read(fd,b,s)		win32_read(fd,b,s)
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:394:10:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  undef fgetc
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:396:9:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define fgetc			win32_fgetc
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:403:8:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#undef getchar
/home/capstone/Desktop/root/perl-5.30.0/win32/win32iop.h:404:9:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define getchar			win32_getchar
/home/capstone/Desktop/root/perl-5.30.0/win32/win32sck.c:975:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (s->s_proto && strlen(s->s_proto))
/home/capstone/Desktop/root/perl-5.30.0/win32/win32sck.c:978:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (proto && strlen(proto))
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:182:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    baselen = strlen(base);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:409:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	int slen = strlen(str);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:538:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	Newx(argv, strlen(cmd) / 2 + 2, char*);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:539:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	Newx(cmd2, strlen(cmd) + 1, char);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:661:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(filename);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:714:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    idx = strlen(ptr)+1;
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:738:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	len = strlen(dirp->curr);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:763:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		long newsize = endpos + strlen(ptr) + 1;
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:893:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                      PL_no_mem, strlen(PL_no_mem));
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:920:22:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t widelen = wcslen(widename)+1;
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1033:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    char *buf = name->version + strlen(name->version);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1046:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	STRLEN len = strlen(hep->h_name);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1051:6:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
	    strncpy(name->nodename, hep->h_name, nodemax);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1462:10:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  return getc(pf);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1728:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    clen = strlen(cname);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1760:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	STRLEN curlen = strlen(arg);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1779:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	STRLEN curlen = strlen(arg);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1966:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	    cur = end + strlen(end+1)+2;
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1968:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	else if ((len = strlen(cur)))
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:1982:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    Newx(ptr, strlen(szfilename)+1, char);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2025:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	clen = strlen(cname);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2229:10:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  return fgetc(pf);
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2247:10:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  return getchar();
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.c:2483:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    mXPUSHp(osver.szCSDVersion, strlen(osver.szCSDVersion));
/home/capstone/Desktop/root/perl-5.30.0/win32/wince.h:113:9:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
#define umask xceumask
/home/capstone/Desktop/root/perl-5.30.0/win32/wincesck.c:486:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (!IsWin95() && s->s_proto && strlen(s->s_proto))
/home/capstone/Desktop/root/perl-5.30.0/win32/wincesck.c:489:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if (proto && strlen(proto))
