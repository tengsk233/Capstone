/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/chown.c:36:1:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
chown (const char *file _GL_UNUSED, uid_t uid _GL_UNUSED,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/chown.c:46:9:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
# undef chown
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/chown.c:131:12:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
  result = chown (file, uid, gid);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/chown.c:143:16:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
      result = chmod (file, st.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/lchown.c:35:10:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
#  undef chown
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/lchown.c:57:10:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
  return chown (file, uid, gid);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/lchown.c:85:16:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
        return chown (file, uid, gid);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/lchown.c:94:16:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
        return chown (file, uid, gid);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:745:8:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
#undef gets
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:747:18:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
_GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/sys_stat.in.h:432:19:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#   define lchmod chmod
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/sys_stat.in.h:436:34:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
_GL_CXXALIAS_RPL_CAST_1 (lchmod, chmod, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:264:18:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_WARN_ON_USE (chown, "chdir is not always in <unistd.h> - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:278:11:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
#   undef chown
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:279:12:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
#   define chown rpl_chown
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:281:19:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_FUNCDECL_RPL (chown, int, (const char *file, uid_t uid, gid_t gid)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:283:19:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_CXXALIAS_RPL (chown, int, (const char *file, uid_t uid, gid_t gid));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:286:19:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_FUNCDECL_SYS (chown, int, (const char *file, uid_t uid, gid_t gid)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:289:19:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_CXXALIAS_SYS (chown, int, (const char *file, uid_t uid, gid_t gid));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:291:19:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_CXXALIASWARN (chown);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:293:9:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
# undef chown
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:295:18:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_WARN_ON_USE (chown, "chown fails to follow symlinks on some systems and "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1273:12:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
#   define readlink rpl_readlink
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1275:19:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_FUNCDECL_RPL (readlink, ssize_t,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1278:19:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_CXXALIAS_RPL (readlink, ssize_t,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1282:19:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_FUNCDECL_SYS (readlink, ssize_t,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1286:19:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_CXXALIAS_SYS (readlink, ssize_t,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1289:19:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_CXXALIASWARN (readlink);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1291:9:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
# undef readlink
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1293:18:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_WARN_ON_USE (readlink, "readlink is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/sysdep.c:185:1:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
chown ( const char *filename __attribute__ ((unused)) ,  int owner __attribute__ ((unused)) ,  int group __attribute__ ((unused)) )
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/sysdep.c:194:1:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
readlink ( const char *path __attribute__ ((unused)) ,  char *buf __attribute__ ((unused)) ,  size_t bufsiz __attribute__ ((unused)) )
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/sysdep.h:144:5:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
int chown (const char *filename,int owner,int group);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:612:12:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
      if ((chown (file_hdr->c_name, uid, gid) < 0)
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:617:7:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
  if (chmod (file_hdr->c_name, file_hdr->c_mode) < 0)
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:794:15:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
		link_size = readlink (orig_file_name, link_name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:33:17:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
# define lchown chown
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:275:16:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
	  link_size = readlink (input_name.ds_string, link_name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:75:7:  [5] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. Risk is high; the length parameter appears to be a constant, instead of computing the number of characters left.
      strncat (hold_tar_filename, filename, TARNAMESIZE);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:1207:12:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
    return chown (name, uid, gid);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:1216:12:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
    return chmod (name, mode);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-fmtstream.h:69:33:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define __argp_fmtstream_printf fprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-fmtstream.h:70:31:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define argp_fmtstream_printf fprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-fmtstream.h:131:29:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
     _GL_ATTRIBUTE_FORMAT ((printf, 2, 3));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-fmtstream.h:134:29:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
     _GL_ATTRIBUTE_FORMAT ((printf, 2, 3));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-help.c:1792:11:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
          vfprintf (stream, fmt, ap);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-help.c:1859:15:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
              vfprintf (stream, fmt, ap);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-namefrob.h:96:21:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#define __vsnprintf vsnprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-parse.c:611:13:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
            fprintf (parser->state.err_stream,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/chdir-long.c:249:7:  [4] (shell) execlp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
      execlp (cmd, (char *) NULL);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/error.c:270:5:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    vfprintf (stderr, message, args);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/error.c:385:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, file_name != NULL ? "%s:%u: " : " ",
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch.c:157:23:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
# define STRCAT(D, S) strcat (D, S)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch.c:187:25:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
#   define STRCAT(D, S) wcscat (D, S)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:239:23:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:240:23:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:511:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf (buf, "CP%s", pdot + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:88:13:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
            sprintf (dotdot_buf, PROC_SELF_FD_FORMAT "../fd", proc_self_fd);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:89:27:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
            proc_status = access (dotdot_buf, F_OK) ? -1 : 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:106:18:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
        dirlen = sprintf (result, PROC_SELF_FD_FORMAT, fd);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:127:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy (result, dir);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:132:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy (result + dirlen, file);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/opendir.c:151:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy (dirp->dir_name_mask, dir_name_mask);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:202:3:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  vfprintf (stderr, msg, args);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:1290:21:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  define YYFPRINTF fprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3938:15:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
              sprintf (tz1buf, "XXX%s%ld:%02d", &"-"[time_zone < 0],
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stat.c:117:11:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
          strcpy (fixed_name, name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:304:12:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#   define fprintf rpl_fprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:308:19:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (fprintf, int, (FILE *fp, const char *format, ...)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:312:19:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (fprintf, int, (FILE *fp, const char *format, ...)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:316:19:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (fprintf, int, (FILE *fp, const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:318:19:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS (fprintf, int, (FILE *fp, const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:320:19:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (fprintf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:324:10:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  undef fprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:327:18:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (fprintf, "fprintf is not always POSIX compliant - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:431:11:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   undef fscanf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:432:12:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   define fscanf rpl_fscanf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:434:19:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_FUNCDECL_RPL (fscanf, int, (FILE *stream, const char *format, ...)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:437:19:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_RPL (fscanf, int, (FILE *stream, const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:439:19:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_SYS (fscanf, int, (FILE *stream, const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:441:19:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIASWARN (fscanf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:839:11:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#   undef popen
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:840:12:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#   define popen rpl_popen
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:842:19:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_FUNCDECL_RPL (popen, FILE *, (const char *cmd, const char *mode)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:844:19:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_CXXALIAS_RPL (popen, FILE *, (const char *cmd, const char *mode));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:847:19:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_FUNCDECL_SYS (popen, FILE *, (const char *cmd, const char *mode)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:850:19:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_CXXALIAS_SYS (popen, FILE *, (const char *cmd, const char *mode));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:852:19:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_CXXALIASWARN (popen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:854:9:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
# undef popen
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:856:18:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_WARN_ON_USE (popen, "popen is buggy on some platforms - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:867:13:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#    define printf __printf__
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:884:21:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL_1 (printf, __printf__, int, (const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:887:13:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#    define printf rpl_printf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:889:19:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (printf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:893:19:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (printf, int, (const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:897:19:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS (printf, int, (const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:899:19:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (printf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:903:10:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  undef printf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:906:18:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (printf, "printf is not always POSIX compliant - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1028:12:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#    undef scanf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1030:13:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#    define scanf __scanf__
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1038:21:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_RPL_1 (scanf, __scanf__, int, (const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1041:12:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#    undef scanf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1042:13:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#    define scanf rpl_scanf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1044:19:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_FUNCDECL_RPL (scanf, int, (const char *format, ...)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1047:19:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_RPL (scanf, int, (const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1050:19:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_SYS (scanf, int, (const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1052:19:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIASWARN (scanf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1058:12:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   define snprintf rpl_snprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1060:19:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (snprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1064:19:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (snprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1068:19:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_SYS (snprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1073:19:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS (snprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1076:19:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (snprintf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1078:9:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
# undef snprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1080:18:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (snprintf, "snprintf is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1097:12:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
#   define sprintf rpl_sprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1099:19:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_FUNCDECL_RPL (sprintf, int, (char *str, const char *format, ...)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1102:19:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIAS_RPL (sprintf, int, (char *str, const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1104:19:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIAS_SYS (sprintf, int, (char *str, const char *format, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1106:19:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIASWARN (sprintf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1108:9:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
# undef sprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1110:18:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_WARN_ON_USE (sprintf, "sprintf is not always POSIX compliant - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1216:12:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#   define vfprintf rpl_vfprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1220:19:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (vfprintf, int, (FILE *fp, const char *format, va_list args)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1224:19:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (vfprintf, int, (FILE *fp, const char *format, va_list args)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1228:19:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (vfprintf, int, (FILE *fp, const char *format, va_list args));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1233:24:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS_CAST (vfprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1236:19:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (vfprintf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1240:10:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  undef vfprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1243:18:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (vfprintf, "vfprintf is not always POSIX compliant - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1251:11:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   undef vfscanf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1252:12:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   define vfscanf rpl_vfscanf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1254:19:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_FUNCDECL_RPL (vfscanf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1258:19:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_RPL (vfscanf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1261:19:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_SYS (vfscanf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1264:19:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIASWARN (vfscanf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1271:12:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#   define vprintf rpl_vprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1275:19:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (vprintf, int, (const char *format, va_list args)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1279:19:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (vprintf, int, (const char *format, va_list args)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1283:19:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (vprintf, int, (const char *format, va_list args));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1288:24:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS_CAST (vprintf, int, (const char *format, va_list args));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1290:19:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (vprintf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1294:10:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  undef vprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1297:18:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (vprintf, "vprintf is not always POSIX compliant - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1305:11:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   undef vscanf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1306:12:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   define vscanf rpl_vscanf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1308:19:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_FUNCDECL_RPL (vscanf, int, (const char *format, va_list args)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1311:19:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_RPL (vscanf, int, (const char *format, va_list args));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1313:19:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_SYS (vscanf, int, (const char *format, va_list args));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1315:19:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIASWARN (vscanf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1321:12:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   define vsnprintf rpl_vsnprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1323:19:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (vsnprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1327:19:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (vsnprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1331:19:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_SYS (vsnprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1336:19:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS (vsnprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1339:19:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (vsnprintf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1341:9:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
# undef vsnprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1343:18:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (vsnprintf, "vsnprintf is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1351:12:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
#   define vsprintf rpl_vsprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1353:19:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_FUNCDECL_RPL (vsprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1357:19:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIAS_RPL (vsprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1363:24:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIAS_SYS_CAST (vsprintf, int,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1366:19:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIASWARN (vsprintf);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1368:9:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
# undef vsprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1370:18:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_WARN_ON_USE (vsprintf, "vsprintf is not always POSIX compliant - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strerror.c:33:8:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
#undef sprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strerror.c:59:7:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
      sprintf (buf, fmt, n);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:253:18:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
_GL_WARN_ON_USE (access, "the access function is a security risk - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:784:19:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
_GL_FUNCDECL_SYS (getlogin, char *, (void));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:786:19:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
_GL_CXXALIAS_SYS (getlogin, char *, (void));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:787:19:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
_GL_CXXALIASWARN (getlogin);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:789:9:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
# undef getlogin
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:791:18:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
_GL_WARN_ON_USE (getlogin, "getlogin is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:162:20:  [4] (buffer) swprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
#  define SNPRINTF swprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:180:21:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   define SNPRINTF snprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:182:11:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   undef snprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:184:21:  [4] (format) _snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   define SNPRINTF _snprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:188:20:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#  define SNPRINTF snprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:190:10:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#  undef snprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:194:8:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
#undef sprintf
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4256:39:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                                      sprintf ((char *) p, decimal_format, exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4264:39:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                                      sprintf (expbuf, decimal_format, exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4449:47:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                                              sprintf ((char *) p, decimal_format, exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4457:47:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                                              sprintf (expbuf, decimal_format, exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4969:33:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                        count = sprintf (tmp, buf, arg);                    \
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4972:33:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                        count = sprintf (tmp, buf, prefixes[0], arg);       \
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4975:33:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                        count = sprintf (tmp, buf, prefixes[0], prefixes[1],\
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/version-etc.c:84:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stream, version_etc_copyright, _("(C)"), COPYRIGHT_YEAR);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vsnprintf.c:39:1:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
vsnprintf (char *str, size_t size, const char *format, va_list args)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:608:19:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
_GL_FUNCDECL_SYS (wcscpy, wchar_t *, (wchar_t *dest, const wchar_t *src));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:610:19:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
_GL_CXXALIAS_SYS (wcscpy, wchar_t *, (wchar_t *dest, const wchar_t *src));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:611:19:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
_GL_CXXALIASWARN (wcscpy);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:613:9:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
# undef wcscpy
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:615:18:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
_GL_WARN_ON_USE (wcscpy, "wcscpy is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:677:19:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
_GL_FUNCDECL_SYS (wcscat, wchar_t *, (wchar_t *dest, const wchar_t *src));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:679:19:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
_GL_CXXALIAS_SYS (wcscat, wchar_t *, (wchar_t *dest, const wchar_t *src));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:680:19:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
_GL_CXXALIASWARN (wcscat);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:682:9:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
# undef wcscat
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:684:18:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
_GL_WARN_ON_USE (wcscat, "wcscat is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rmt.h:57:29:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
  (_remdev (dev_name) ? 0 : access (dev_name, amode))
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:510:4:  [4] (shell) execl:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
	  execl (remote_shell, remote_shell_basename, remote_host,
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:513:4:  [4] (shell) execl:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
	  execl (remote_shell, remote_shell_basename, remote_host,
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:534:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf (command_buffer, "O%s\n", remote_file);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:654:3:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
  sprintf (command_buffer, "L%s\n%d\n", p, whence);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:692:2:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	sprintf (command_buffer, "I%d\n%s\n",
/home/capstone/Desktop/root/cpio-2.13+dfsg/rmt/rmt.c:45:39:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  do { if (dbgout && (lev) <= dbglev) fprintf (dbgout, fmt, x); } while (0)
/home/capstone/Desktop/root/cpio-2.13+dfsg/rmt/rmt.c:50:2:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
	fprintf (dbgout, fmt, x1, x2);					\
/home/capstone/Desktop/root/cpio-2.13+dfsg/rmt/rmt.c:60:4:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
	  vfprintf (dbgout, fmt, ap);		\
/home/capstone/Desktop/root/cpio-2.13+dfsg/rmt/rmt.c:102:3:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  vfprintf (stdout, fmt, ap);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:739:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy (tbuf, ctime (&when));
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:745:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy (tbuf + 11, tbuf + 19);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:1433:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
      fprintf (stderr,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:589:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy (p, value);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:876:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
      fprintf (stderr,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:77:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy (output_name.ds_string, pwd);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:79:7:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
      strcat (output_name.ds_string, directory_name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:84:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy (output_name.ds_string, directory_name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:120:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy (output_name.ds_string + dirname_len + 1, slash);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:331:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
      fprintf (stderr,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/defer.c:35:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy (d->header.c_name, file_hdr->c_name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/makepath.c:66:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy (dirpath, argpath);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:217:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy (tar_hdr->uname, name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:220:2:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	strcpy (tar_hdr->gname, name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/userspec.c:44:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy (dest, src);						\
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:967:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy (new_media_message_after_number, p + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:1329:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy (data->stat.c_name, file_stat->c_name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:761:11:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
      if (system (p->name) != 0)
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:851:7:  [4] (shell) execvp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
      execvp (exec_argv[0], exec_argv);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argmatch.c:262:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  if ((cp = getenv ("VERSION_CONTROL")))
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-help.c:162:21:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  const char *var = getenv ("ARGP_HELP_FMT");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch_loop.c:209:33:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
              posixly_correct = getenv ("POSIXLY_CORRECT") != NULL ? 1 : -1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch_loop.c:999:29:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
          posixly_correct = getenv ("POSIXLY_CORRECT") != NULL ? 1 : -1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch_loop.c:1052:29:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
          posixly_correct = getenv ("POSIXLY_CORRECT") != NULL ? 1 : -1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:101:14:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
extern char *getenv ();
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:237:47:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  d->__posixly_correct = posixly_correct || !!getenv ("POSIXLY_CORRECT");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:1187:1:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
getopt (int argc, char *const *argv, const char *optstring)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:1222:11:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
      c = getopt (argc, argv, "abc:d:0123456789");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.in.h:64:9:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# undef getopt
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.in.h:65:9:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# undef getopt_long
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.in.h:76:10:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# define getopt __GETOPT_ID (getopt)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.in.h:76:30:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# define getopt __GETOPT_ID (getopt)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.in.h:77:10:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# define getopt_long __GETOPT_ID (getopt_long)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.in.h:77:35:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# define getopt_long __GETOPT_ID (getopt_long)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.in.h:238:12:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.in.h:242:12:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
extern int getopt_long (int ___argc, char *__getopt_argv_const *___argv,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt1.c:40:1:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
getopt_long (int argc, char *__getopt_argv_const *argv, const char *options,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt1.c:105:11:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
      c = getopt_long (argc, argv, "abc:d:0123456789",
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:138:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      dir = getenv ("CHARSETALIASDIR");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:414:16:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      locale = getenv ("LC_ALL");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:417:20:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
          locale = getenv ("LC_CTYPE");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:419:22:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
            locale = getenv ("LANG");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:475:16:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      locale = getenv ("LC_ALL");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:478:20:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
          locale = getenv ("LC_CTYPE");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:480:22:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
            locale = getenv ("LANG");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:536:12:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  locale = getenv ("LC_ALL");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:539:16:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      locale = getenv ("LC_CTYPE");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:541:18:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
        locale = getenv ("LANG");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3451:14:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  char *tz = getenv ("TZ");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3814:26:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      else if ((tz_env = getenv("TZ")))
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:4167:21:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      if ((tz_env = getenv("TZ")))
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:372:19:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      char *tmp = getenv (name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:573:19:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_FUNCDECL_SYS (random, long, (void));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:575:19:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIAS_SYS (random, long, (void));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:576:19:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIASWARN (random);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:578:9:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
# undef random
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:580:18:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_WARN_ON_USE (random, "random is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:587:19:  [3] (random) srandom:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_FUNCDECL_SYS (srandom, void, (unsigned int seed));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:589:19:  [3] (random) srandom:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIAS_SYS (srandom, void, (unsigned int seed));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:590:19:  [3] (random) srandom:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIASWARN (srandom);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:592:9:  [3] (random) srandom:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
# undef srandom
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:594:18:  [3] (random) srandom:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_WARN_ON_USE (srandom, "srandom is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:618:19:  [3] (random) setstate:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_FUNCDECL_SYS (setstate, char *, (char *arg_state) _GL_ARG_NONNULL ((1)));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:620:19:  [3] (random) setstate:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIAS_SYS (setstate, char *, (char *arg_state));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:621:19:  [3] (random) setstate:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIASWARN (setstate);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:623:9:  [3] (random) setstate:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
# undef setstate
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:625:18:  [3] (random) setstate:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_WARN_ON_USE (setstate, "setstate is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:771:12:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
#   define realpath rpl_realpath
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:773:19:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_FUNCDECL_RPL (realpath, char *, (const char *name, char *resolved)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:775:19:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_CXXALIAS_RPL (realpath, char *, (const char *name, char *resolved));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:778:19:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_FUNCDECL_SYS (realpath, char *, (const char *name, char *resolved)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:781:19:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_CXXALIAS_SYS (realpath, char *, (const char *name, char *resolved));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:783:19:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_CXXALIASWARN (realpath);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:785:9:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
# undef realpath
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:787:18:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_WARN_ON_USE (realpath, "realpath is unportable - use gnulib module "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/time_rz.c:207:10:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  return getenv ("TZ");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unsetenv.c:119:10:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  while (getenv (name))
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/system.h:406:7:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
char *getenv ();
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/mt.c:228:14:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	  tapedev = getenv ("TAPE");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/alloca.c:122:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char align[ALIGN_SIZE];       /* To force sizeof(header).  */
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-fmtstream.h:218:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (__fs->p, __str, __len);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-help.c:114:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  const char name[14];          /* User name.  */
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-help.c:208:25:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
                  val = atoi (arg);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-help.c:1867:15:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
              char buf[200];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-parse.c:126:20:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      _argp_hang = atoi (arg ? arg : "3600");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/at-func.c:89:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char proc_buf[OPENAT_BUFFER_SIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/basename.c:51:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (p + 2, base, length);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/chown.c:91:14:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    int fd = open (file, O_RDONLY | open_flags);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/chown.c:94:27:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            && 0 <= (fd = open (file, O_WRONLY | open_flags))))
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/dirent-private.h:37:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dir_name_mask[1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/dirent.in.h:41:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char d_name[1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/dirname-lgpl.c:81:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (dir, file, length);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/dup.c:64:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char path[_MAX_PATH];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/dup.c:68:17:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        dupfd = open (path, O_RDONLY);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/dup2.c:98:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  tempfd = open ("NUL", O_RDONLY);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/dup2.c:106:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char path[_MAX_PATH];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/dup2.c:110:14:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      return open(path, O_RDONLY);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/error.c:176:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char errbuf[1024];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fcntl.c:56:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char fds_to_close[OPEN_MAX_MAX / CHAR_BIT];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fcntl.in.h:111:11:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#   undef open
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fcntl.in.h:112:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#   define open rpl_open
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fcntl.in.h:114:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_FUNCDECL_RPL (open, int, (const char *filename, int flags, ...)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fcntl.in.h:116:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIAS_RPL (open, int, (const char *filename, int flags, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fcntl.in.h:118:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIAS_SYS (open, int, (const char *filename, int flags, ...));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fcntl.in.h:123:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIASWARN (open);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fcntl.in.h:126:9:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
# undef open
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fcntl.in.h:128:18:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_WARN_ON_USE (open, "open is not always POSIX compliant - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fdopendir.c:71:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char path[_MAX_PATH];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fdopendir.c:182:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buf[OPENAT_BUFFER_SIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/filenamecat-lgpl.c:31:47:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
# define mempcpy(D, S, N) ((void *) ((char *) memcpy (D, S, N) + (N)))
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch.c:164:49:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#   define MEMPCPY(D, S, N) ((void *) ((char *) memcpy (D, S, N) + (N)))
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch.c:207:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char s[CHAR_CLASS_MAX_LENGTH + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch_loop.c:472:29:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                            char str[c1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch_loop.c:693:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                char str[c1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fseeko.c:61:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      FILE *tmp = fopen ("/dev/null", "r");
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getcwd-lgpl.c:80:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmp[4032];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getcwd.c:128:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dots[DEEP_NESTING * sizeof ".." + BIG_FILE_NAME_COMPONENT_LENGTH + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getcwd.c:168:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char big_buffer[BIG_FILE_NAME_LENGTH + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getcwd.c:345:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy (dotlist + dotlen, d->d_name, _D_ALLOC_NAMLEN (d));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getcwd.c:381:22:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              dirp = memcpy (tmp + allocated - (oldsize - dirroom),
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getcwd.c:388:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (dirp, d->d_name, namlen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:218:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char msg_ctxt_id[msgctxt_len + msgid_len];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:220:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[1024];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:229:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (msg_ctxt_id, msgctxt, msgctxt_len - 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:231:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (msg_ctxt_id + msgctxt_len, msgid, msgid_len);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:266:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char msg_ctxt_id[msgctxt_len + msgid_len];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:268:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[1024];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:277:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (msg_ctxt_id, msgctxt, msgctxt_len - 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:279:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (msg_ctxt_id + msgctxt_len, msgid, msgid_len);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:150:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy (file_name, dir, dir_len);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:153:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy (file_name + dir_len + add_slash, base, base_len + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:171:16:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
          fd = open (file_name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:196:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                      char buf1[50+1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:197:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                      char buf2[50+1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:412:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      static char buf[2 + 10 + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:438:19:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                  memcpy (buf, dot, modifier - dot);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:456:7:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
      sprintf (buf, "CP%u", GetACP ());
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:493:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char buf[2 + 10 + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:521:7:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
      sprintf (buf, "CP%u", GetACP ());
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:528:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char buf[2 + 10 + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:559:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (buf, dot, modifier - dot);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:577:11:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
          sprintf (buf, "CP%u", cp[0]);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/malloca.c:59:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char room[HEADER_SIZE - MAGIC_SIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/mbrtowc.c:41:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char internal_state[4];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/mbrtowc.c:65:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[4];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/mempcpy.c:27:19:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  return (char *) memcpy (dest, src, n) + n;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/mktime.c:559:38:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      tm.tm_isdst = argc == 3 ? -1 : atoi (argv[3]);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/mktime.c:570:21:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      time_t from = atol (argv[1]);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/mktime.c:571:19:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      time_t by = atol (argv[2]);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/mktime.c:572:19:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      time_t to = atol (argv[3]);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/obstack.c:212:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (object_base, h->object_base, obj_size);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/obstack.h:171:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char contents[__FLEXIBLE_ARRAY_MEMBER]; /* objects begin here */
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/obstack.h:330:8:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
       memcpy (__o->next_free, where, __len);				      \
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/obstack.h:340:8:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
       memcpy (__o->next_free, where, __len);				      \
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/obstack.h:468:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
   memcpy ((h)->next_free, where, (h)->temp.i),				      \
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/obstack.h:476:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
   memcpy ((h)->next_free, where, (h)->temp.i),				      \
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/open.c:33:10:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  return open (filename, flags, mode);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/open.c:53:1:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
open (const char *filename, int flags, ...)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/open.c:135:16:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
          fd = open ("/dev/null", flags, mode);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-priv.h:47:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char *openat_proc_name (char buf[OPENAT_BUFFER_SIZE], int fd, char const *file);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-priv.h:47:25:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char *openat_proc_name (char buf[OPENAT_BUFFER_SIZE], int fd, char const *file);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:43:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char *
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:44:19:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
openat_proc_name (char buf[OPENAT_BUFFER_SIZE], int fd, char const *file)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:76:28:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        int proc_self_fd = open ("/proc/self/fd",
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:87:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char dotdot_buf[PROC_SELF_FD_DIR_SIZE_BOUND + sizeof "../fd" - 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:112:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char dir[_MAX_PATH];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat.c:197:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    return open (file, flags, mode);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat.c:200:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[OPENAT_BUFFER_SIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat.c:204:27:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        int open_result = open (proc_file, flags, mode);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat.c:241:13:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      err = open (file, flags, mode);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat.c:268:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  int fd = open ("/", O_SEARCH);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat.c:272:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buf[OPENAT_BUFFER_SIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/opendir.c:61:14:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    int fd = open (dir_name, O_RDONLY);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/opendir.c:77:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dir_name_mask[MAX_PATH + 1 + 1 + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/opendir.c:150:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy (&dirp->entry, &entry, sizeof (WIN32_FIND_DATA));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:465:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tmp[100] = {0};
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:1591:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:1840:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char yymsgbuf[128];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3363:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
          char buff[20];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3448:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char *
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3449:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
get_tz (char tzbuf[TZBUFSIZE])
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3456:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            ? memcpy (tzbuf, tz, tzsize)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3537:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tmp[DBGBUFSIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3622:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tz0buf[TZBUFSIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3624:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dbg_ord[DBGBUFSIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3625:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dbg_tm[DBGBUFSIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3661:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char tz1buf[TZBUFSIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3935:15:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
              char tz1buf[sizeof "XXX+0:00" + TYPE_WIDTH (pc.time_zone) / 3];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:4213:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buff[BUFSIZ];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/printf-parse.c:122:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (memory, a->arg, a->count * sizeof (argument));        \
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/printf-parse.c:599:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy (memory, d->dir, d->count * sizeof (DIRECTIVE));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/quotearg.c:834:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char slot0[256];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/save-cwd.c:67:15:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  cwd->desc = open (".", O_SEARCH);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/savedir.c:145:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (name_space + used, entry, entry_size);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:179:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (new_value, name, namelen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:181:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (&new_value[namelen + 1], value, vallen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:200:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (new_environ[size], new_value, namelen + 1 + vallen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:202:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (new_environ[size], name, namelen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:204:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (&new_environ[size][namelen + 1], value, vallen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:217:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy ((char *) new_environ, (char *) __environ,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:247:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (new_value, name, namelen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:249:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (&new_value[namelen + 1], value, vallen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:268:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (np, new_value, namelen + 1 + vallen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:270:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (np, name, namelen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:272:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (&np[namelen + 1], value, vallen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:380:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (tmp + 1, value, len + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stat.c:109:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char fixed_name[PATH_MAX + 1] = {0};
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio-impl.h:45:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                         unsigned char _ubuf[3]; \
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio-impl.h:46:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                         unsigned char _nbuf[1]; \
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:283:11:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#   undef fopen
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:284:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#   define fopen rpl_fopen
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:286:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_FUNCDECL_RPL (fopen, FILE *, (const char *filename, const char *mode)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:288:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIAS_RPL (fopen, FILE *, (const char *filename, const char *mode));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:290:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIAS_SYS (fopen, FILE *, (const char *filename, const char *mode));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:292:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIASWARN (fopen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:294:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
# undef fopen
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:296:18:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_WARN_ON_USE (fopen, "fopen on native Windows platforms is not POSIX compliant - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1118:12:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#   define tmpfile rpl_tmpfile
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1120:19:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
_GL_FUNCDECL_RPL (tmpfile, FILE *, (void));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1121:19:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
_GL_CXXALIAS_RPL (tmpfile, FILE *, (void));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1123:19:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
_GL_CXXALIAS_SYS (tmpfile, FILE *, (void));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1125:19:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
_GL_CXXALIASWARN (tmpfile);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1127:9:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
# undef tmpfile
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:1129:18:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
_GL_WARN_ON_USE (tmpfile, "tmpfile is not usable on mingw - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:398:12:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
#   define mkstemp rpl_mkstemp
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:400:19:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_FUNCDECL_RPL (mkstemp, int, (char * /*template*/) _GL_ARG_NONNULL ((1)));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:401:19:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_CXXALIAS_RPL (mkstemp, int, (char * /*template*/));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:404:19:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_FUNCDECL_SYS (mkstemp, int, (char * /*template*/) _GL_ARG_NONNULL ((1)));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:406:19:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_CXXALIAS_SYS (mkstemp, int, (char * /*template*/));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:408:19:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_CXXALIASWARN (mkstemp);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:410:9:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
# undef mkstemp
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdlib.in.h:412:18:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_WARN_ON_USE (mkstemp, "mkstemp is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strdup.c:47:19:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  return (char *) memcpy (new, s, len);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strerror.c:39:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char buf[STACKBUF_LEN];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strerror.c:69:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (buf, msg, len + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strftime.c:87:26:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
# define MEMCPY(d, s, n) memcpy (d, s, n)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strftime.c:861:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char ufmt[5];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strftime.c:863:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char ubuf[1024]; /* enough for any single format in practice */
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strndup.c:35:10:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  return memcpy (new, s, len);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/sys_stat.in.h:650:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
_GL_FUNCDECL_RPL (utimensat, int, (int fd, char const *name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/sys_stat.in.h:653:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
_GL_CXXALIAS_RPL (utimensat, int, (int fd, char const *name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/sys_stat.in.h:657:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
_GL_FUNCDECL_SYS (utimensat, int, (int fd, char const *name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/sys_stat.in.h:661:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
_GL_CXXALIAS_SYS (utimensat, int, (int fd, char const *name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/time-internal.h:30:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char *tzname_copy[2];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/time-internal.h:48:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char abbrs[FLEXIBLE_ARRAY_MEMBER];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/time_rz.c:87:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (abbrs, abbr, abbr_size);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/utimens.c:168:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
fdutimens (int fd, char const *file, struct timespec const timespec[2])
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/utimens.c:417:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
utimens (char const *file, struct timespec const timespec[2])
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/utimens.c:427:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
lutimens (char const *file, struct timespec const timespec[2])
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/utimens.h:21:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int fdutimens (int, char const *, struct timespec const [2]);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/utimens.h:22:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int utimens (char const *, struct timespec const [2]);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/utimens.h:23:15:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int lutimens (char const *, struct timespec const [2]);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/utimens.h:37:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int fdutimensat (int fd, int dir, char const *name, struct timespec const [2],
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/utimens.h:42:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
lutimensat (int dir, char const *file, struct timespec const times[2])
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/utimensat.c:42:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static int local_utimensat (int, char const *, struct timespec const[2], int);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/utimensat.c:48:24:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
rpl_utimensat (int fd, char const *file, struct timespec const times[2],
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:143:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#  define DCHAR_CPY memcpy
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:284:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char pointbuf[5];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:285:3:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
  sprintf (pointbuf, "%#.0f", 1.0);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:509:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (r_ptr, a_ptr, a_len * sizeof (mp_limb_t));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:645:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (r_ptr, a_ptr, a_len * sizeof (mp_limb_t));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:2664:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          char cbuf[64]; /* Assume MB_CUR_MAX <= 64.  */
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:2709:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          char cbuf[64]; /* Assume MB_CUR_MAX <= 64.  */
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:2759:25:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                        char cbuf[64]; /* Assume MB_CUR_MAX <= 64.  */
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:2772:25:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                        memcpy (tmpptr, cbuf, count);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:2840:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          char cbuf[64]; /* Assume MB_CUR_MAX <= 64.  */
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:2853:27:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                          memcpy (result + length, cbuf, count);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:2869:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          char cbuf[64]; /* Assume MB_CUR_MAX <= 64.  */
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:2891:27:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                          memcpy (result + length, cbuf, count);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3172:35:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                  sprintf ((char *) p, "%+d", exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3178:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                  char expbuf[6 + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3180:35:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                  sprintf (expbuf, "%+d", exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3323:35:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                  sprintf ((char *) p, "%+d", exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3329:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                  char expbuf[6 + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3331:35:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                  sprintf (expbuf, "%+d", exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3398:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy (result + length, tmp, count * sizeof (DCHAR_T));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3783:37:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                    sprintf ((char *) p, "%+.2d", exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3789:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                    char expbuf[6 + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3791:37:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                    sprintf (expbuf, "%+.2d", exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3964:45:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                            sprintf ((char *) p, "%+.2d", exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3970:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                            char expbuf[6 + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3972:45:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                            sprintf (expbuf, "%+.2d", exponent);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4262:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                      char expbuf[6 + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4455:47:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                              char expbuf[6 + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4581:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy (result + length, tmp, count * sizeof (DCHAR_T));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4789:29:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                            memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4810:29:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                            memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:5509:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy (result + length, tmp, count * sizeof (DCHAR_T));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/version-etc.c:201:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  const char *authtab[10];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vsnprintf.c:56:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (str, output, pruned_len);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/xmalloc.c:113:10:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  return memcpy (xmalloc (s), p, s);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/paxerror.c:93:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[10];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/paxerror.c:178:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[UINTMAX_STRSIZE_BOUND];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/paxerror.c:191:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[UINTMAX_STRSIZE_BOUND];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/paxerror.c:210:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[UINTMAX_STRSIZE_BOUND];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/paxerror.c:259:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[UINTMAX_STRSIZE_BOUND];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/paxerror.c:275:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[UINTMAX_STRSIZE_BOUND];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/paxnames.c:54:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (s, string, len);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rmt.h:54:6:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
   : open (dev_name, oflag, mode))
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:189:15:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      errno = atoi (cursor + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:215:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char command_buffer[COMMAND_BUFFER_SIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:219:25:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      long int result = atol (status);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:230:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char command_buffer[COMMAND_BUFFER_SIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:322:3:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
  sprintf (buf, "%d ", oflag);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:326:20:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
    case O_RDONLY: strcat (buf, "O_RDONLY"); break;
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:327:18:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
    case O_RDWR: strcat (buf, "O_RDWR"); break;
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:328:20:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
    case O_WRONLY: strcat (buf, "O_WRONLY"); break;
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:333:25:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
  if (oflag & O_APPEND) strcat (buf, "|O_APPEND");
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:335:24:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
  if (oflag & O_CREAT) strcat (buf, "|O_CREAT");
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:337:24:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
  if (oflag & O_DSYNC) strcat (buf, "|O_DSYNC");
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:339:23:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
  if (oflag & O_EXCL) strcat (buf, "|O_EXCL");
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:341:28:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
  if (oflag & O_LARGEFILE) strcat (buf, "|O_LARGEFILE");
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:344:25:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
  if (oflag & O_NOCTTY) strcat (buf, "|O_NOCTTY");
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:346:27:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
  if (oflag & O_NONBLOCK) strcat (buf, "|O_NONBLOCK");
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:348:24:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
  if (oflag & O_RSYNC) strcat (buf, "|O_RSYNC");
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:351:23:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
  if (oflag & O_SYNC) strcat (buf, "|O_SYNC");
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:353:24:  [2] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant string.
  if (oflag & O_TRUNC) strcat (buf, "|O_TRUNC");
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:573:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char command_buffer[COMMAND_BUFFER_SIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:578:3:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
  sprintf (command_buffer, "R%lu\n", (unsigned long) length);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:602:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char command_buffer[COMMAND_BUFFER_SIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:606:3:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
  sprintf (command_buffer, "W%lu\n", (unsigned long) length);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:634:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char command_buffer[COMMAND_BUFFER_SIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:635:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char operand_buffer[UINTMAX_STRSIZE_BOUND];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:676:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char command_buffer[COMMAND_BUFFER_SIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:677:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char operand_buffer[UINTMAX_STRSIZE_BOUND];
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/system.h:66:10:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
# ifndef memcpy
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/system.h:67:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#  define memcpy(d, s, n) bcopy ((char const *) (s), (char *) (d), n)
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/system.h:67:27:  [2] (buffer) bcopy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#  define memcpy(d, s, n) bcopy ((char const *) (s), (char *) (d), n)
/home/capstone/Desktop/root/cpio-2.13+dfsg/rmt/rmt.c:110:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[UINTMAX_STRSIZE_BOUND];
/home/capstone/Desktop/root/cpio-2.13+dfsg/rmt/rmt.c:337:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      device_fd = open (device, flag, MODE_RW);
/home/capstone/Desktop/root/cpio-2.13+dfsg/rmt/rmt.c:713:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      dbgout = fopen (arg, "w");
/home/capstone/Desktop/root/cpio-2.13+dfsg/rmt/rmt.c:781:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      dbgout = fopen (argv[idx], "w");
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:367:22:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      out_file_des = open (d->header.c_name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:372:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	  out_file_des = open (d->header.c_name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:475:22:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      out_file_des = open (file_hdr->c_name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:481:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	  out_file_des = open (file_hdr->c_name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:730:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char mbuf[11];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:731:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tbuf[40];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:797:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  pattern_fp = fopen (pattern_file_name, "r");
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:881:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char str[6];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:893:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char s[512];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:1222:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      rename_in = fopen (rename_batch_file, "r");
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:1231:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      tty_in = fopen (TTY_NAME, "r");
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:1236:17:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      tty_out = fopen (TTY_NAME, "w");
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:40:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[BUFSIZ];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:206:17:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  in_file_des = open (header->c_name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:292:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char valbuf[UINTMAX_STRSIZE_BOUND + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:293:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char maxbuf[UINTMAX_STRSIZE_BOUND + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:335:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char ascii_header[110];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:395:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char ascii_header[76];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:502:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char maxbuf[UINTMAX_STRSIZE_BOUND + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:515:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char maxbuf[UINTMAX_STRSIZE_BOUND + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:708:22:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	      in_file_des = open (orig_file_name,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:169:22:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	      in_file_des = open (input_name.ds_string,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:176:23:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	      out_file_des = open (output_name.ds_string,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:181:20:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
		  out_file_des = open (output_name.ds_string,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:62:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_magic[6];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:63:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_dev[6];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:64:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_ino[6];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:65:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_mode[6];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:66:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_uid[6];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:67:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_gid[6];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:68:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_nlink[6];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:69:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_rdev[6];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:70:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_mtime[11];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:71:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_namesize[6];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:72:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_filesize[11];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:94:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_magic[6];     /* "070701" for "new" portable format
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:96:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_ino[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:97:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_mode[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:98:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_uid[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:99:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_gid[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:100:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_nlink[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:101:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_mtime[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:102:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_filesize[8];  /* must be 0 for FIFOs and directories */
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:103:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_dev_maj[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:104:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_dev_min[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:105:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_rdev_maj[8];      /* only valid for chr and blk special files */
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:106:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_rdev_min[8];      /* only valid for chr and blk special files */
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:107:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_namesize[8];  /* count includes terminating NUL in pathname */
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/cpiohdr.h:108:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char c_chksum[8];    /* 0 for "new" portable format; for CRC format
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/idcache.c:63:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char usernum_string[20];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/idcache.c:74:7:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
      sprintf (usernum_string, "%u", (unsigned) uid);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/idcache.c:138:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char groupnum_string[20];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/idcache.c:149:7:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
      sprintf (groupnum_string, "%u", (unsigned int) gid);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/main.c:322:23:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      io_block_size = atoi (arg);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/main.c:339:23:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      io_block_size = atoi (arg);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:36:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char hold_tar_linkname[TARLINKNAMESIZE + 1];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:64:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char hold_tar_filename[TARNAMESIZE + TARPREFIXSIZE + 2];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:40:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char name[TARNAMESIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:41:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char mode[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:42:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char uid[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:43:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char gid[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:44:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char size[12];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:45:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char mtime[12];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:46:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char chksum[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:48:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char linkname[TARLINKNAMESIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:49:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char magic[6];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:50:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char version[2];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:51:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char uname[32];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:52:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char gname[32];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:53:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char devmajor[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:54:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char devminor[8];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:55:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char prefix[TARPREFIXSIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tarhdr.h:61:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[TARRECORDSIZE];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/userspec.c:131:10:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
		*uid = atoi (u);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/userspec.c:148:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		  char uint_buf[21];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/userspec.c:149:5:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
		  sprintf (uint_buf, "%u", (unsigned) (pwd->pw_gid));
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/userspec.c:178:13:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
	    *gid = atoi (g);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:256:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	  memcpy (out_buff, in_buf, (unsigned) space_left);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:283:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	  memcpy (out_buff, in_buf, (unsigned) space_left);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:310:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (in_buf, in_buff, (unsigned) space_left);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:384:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (peek_buf, in_buff, (unsigned) got_bytes);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:425:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char zeros_512[512];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:493:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		  char buf[UINTMAX_STRSIZE_BOUND];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:544:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char buf[UINTMAX_STRSIZE_BOUND];
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:855:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  tty_in = fopen (TTY_NAME, "r");
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:858:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  tty_out = fopen (TTY_NAME, "w");
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:1327:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (&data->stat, file_stat, sizeof data->stat);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:1388:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	  memcpy (&data->stat, file_hdr,
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/argcv.c:134:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tmp[4]; /* At most three characters + zero */
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/argcv.c:137:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (tmp, src, cnt);
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/argcv.c:266:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	      char tmp[4];
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/argcv.c:268:8:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	      memcpy (dst, tmp, 3);
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:427:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      fp = fopen (filename, seek_offset ? "rb+" : "wb");
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:465:41:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *fp = strcmp (files_from, "-") ? fopen (files_from, "rb") : stdin;
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:569:8:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  fd = open (file_name, flags, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:581:4:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	  char buf[256];
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:616:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[20]; /* ccyy-mm-dd HH:MM:SS\0 */
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:626:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[UINTMAX_STRSIZE_BOUND];
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:731:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	FILE *fp = fopen (p->name, "ab");
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:745:11:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	int fd = open (p->name, O_RDWR | O_BINARY);
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:811:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[128];
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argmatch.c:92:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  arglen = strlen (arg);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argmatch.c:99:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          if (strlen (arglist[i]) == arglen)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-fmtstream.h:229:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t __len = strlen (__str);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-help.c:217:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                if (strlen (un->name) == var_len
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-help.c:866:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          unsigned hol_so_len = strlen (hol->short_options);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-help.c:868:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            malloc (hol_so_len + strlen (more->short_options) + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-help.c:1283:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          space (stream, 6 + strlen (arg));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-help.c:1330:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      char *short_no_arg_opts = alloca (strlen (hol->short_options) + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-namefrob.h:126:27:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
# define getc_unlocked(x) getc (x)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/argp-namefrob.h:129:30:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  define getchar_unlocked() getchar ()
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/basename-lgpl.c:63:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  for (len = strlen (name);  1 < len && ISSLASH (name[len - 1]);  len--)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/chdir-long.c:117:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen (dir);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/chown.c:125:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (file);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/error.c:207:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (message) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/filenamecat-lgpl.c:69:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t baselen = strlen (base);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch.c:156:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
# define STRLEN(S) strlen (S)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch.c:186:22:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#   define STRLEN(S) wcslen (S)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fnmatch.c:334:54:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  return internal_fnmatch (pattern, string, string + strlen (string),
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/fstatat.c:71:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen (file);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getcwd-lgpl.c:119:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      result = realloc (buf, strlen (buf) + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getcwd.c:45:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
# define _D_EXACT_NAMLEN(d) strlen ((d)->d_name)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getdelim.c:39:41:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
# define getc_maybe_unlocked(fp)        getc(fp)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getdelim.c:45:41:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
# define getc_maybe_unlocked(fp)        getc(fp)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:268:56:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              int len = d->__nonoption_flags_max_len = strlen (orig_str);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:516:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if (namelen == (unsigned int) strlen (p->name))
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:622:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:698:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:738:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:743:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:936:63:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              if ((unsigned int) (nameend - d->__nextchar) == strlen (p->name))
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:984:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:1028:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:1066:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/getopt.c:1072:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:214:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t msgctxt_len = strlen (msgctxt) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:215:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t msgid_len = strlen (msgid) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:262:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t msgctxt_len = strlen (msgctxt) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/gettext.h:263:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t msgid_len = strlen (msgid) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/lchown.c:92:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (file);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:104:9:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
# undef getc
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:105:10:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
# define getc getc_unlocked
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:144:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t dir_len = strlen (dir);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:145:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t base_len = strlen (base);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:201:27:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
                      c = getc (fp);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:210:33:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
                            c = getc (fp);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:217:27:  [1] (buffer) fscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:219:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                      l1 = strlen (buf1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:220:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                      l2 = strlen (buf2);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:510:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if (pdot && 2 + strlen (pdot + 1) + 1 <= sizeof (buf))
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:591:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:591:52:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/localcharset.c:595:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        codeset = aliases + strlen (aliases) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/lstat.c:80:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen (file);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/open.c:109:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (filename);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/open.c:160:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (filename);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:98:56:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t bufsize = PROC_SELF_FD_DIR_SIZE_BOUND + strlen (file);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:118:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    dirlen = strlen (dir);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat-proc.c:119:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    bufsize = dirlen + 1 + strlen (file) + 1; /* 1 for '/', 1 for null */
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat.c:97:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (filename);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/openat.c:124:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (filename);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/opendir.c:103:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    p = dir_name_mask + strlen (dir_name_mask);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/opendir.c:139:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            + strlen (dir_name_mask) + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:428:11:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
          strncpy (buffer, ordinal_values[ pc->day_ordinal+1 ], n);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:444:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t l = strlen (buffer);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:447:11:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. Risk is low because the source is a constant character.
          strncat (buffer," ",n-l);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:450:7:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
      strncat (buffer,days_values[pc->day_number],n-l);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:1476:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#   define yystrlen strlen
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3189:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  wordlen = strlen (word);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3454:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t tzsize = strlen (tz) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/parse-datetime.c:3626:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  char const *input_sentinel = p + strlen (p);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/quotearg.c:362:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        quote_string_len = strlen (quote_string);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/quotearg.c:408:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  ? (argsize = strlen (arg)) : argsize))
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/quotearg.c:619:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  argsize = strlen (arg);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/read.c:34:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
# undef read
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/read.c:44:16:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
      result = read (fd, buf, count);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/read.c:56:24:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  define read_nothrow read
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/safe-read.c:47:13:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
# define rw read
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/savedir.c:31:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
# define _D_EXACT_NAMLEN(dp)    strlen ((dp)->d_name)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:118:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  const size_t namelen = strlen (name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:119:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  const size_t vallen = value != NULL ? strlen (value) + 1 : 0;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/setenv.c:376:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          size_t len = strlen (value);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stat.c:88:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stat.c:110:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:254:11:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   undef fgetc
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:255:12:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   define fgetc rpl_fgetc
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:257:19:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_FUNCDECL_RPL (fgetc, int, (FILE *stream) _GL_ARG_NONNULL ((1)));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:258:19:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_RPL (fgetc, int, (FILE *stream));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:260:19:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_SYS (fgetc, int, (FILE *stream));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:262:19:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIASWARN (fgetc);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:641:11:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   undef getc
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:642:12:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   define getc rpl_fgetc
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:644:19:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_FUNCDECL_RPL (fgetc, int, (FILE *stream) _GL_ARG_NONNULL ((1)));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:645:21:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_RPL_1 (getc, rpl_fgetc, int, (FILE *stream));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:647:19:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_SYS (getc, int, (FILE *stream));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:649:19:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIASWARN (getc);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:655:11:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   undef getchar
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:656:12:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   define getchar rpl_getchar
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:658:19:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_FUNCDECL_RPL (getchar, int, (void));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:659:19:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_RPL (getchar, int, (void));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:661:19:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_SYS (getchar, int, (void));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/stdio.in.h:663:19:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIASWARN (getchar);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strdup.c:41:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (s) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strerror.c:65:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen (msg);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strftime.c:88:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
# define STRLEN(s) strlen (s)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strftime.c:613:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              format_end = f + strlen (f) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strftime.c:625:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    len += strlen (f + len);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strftime.c:899:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  size_t len = strlen (era->era_name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/strftime.c:1373:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          cpy (strlen (zone), zone);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/string.in.h:394:11:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
#   undef strncat
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/string.in.h:395:12:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
#   define strncat rpl_strncat
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/string.in.h:397:19:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
_GL_FUNCDECL_RPL (strncat, char *, (char *dest, const char *src, size_t n)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/string.in.h:399:19:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
_GL_CXXALIAS_RPL (strncat, char *, (char *dest, const char *src, size_t n));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/string.in.h:401:19:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
_GL_CXXALIAS_SYS (strncat, char *, (char *dest, const char *src, size_t n));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/string.in.h:403:19:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
_GL_CXXALIASWARN (strncat);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/string.in.h:405:9:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
# undef strncat
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/string.in.h:407:18:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
_GL_WARN_ON_USE (strncat, "strncat is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/time_rz.c:96:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t name_size = name ? strlen (name) + 1 : 0;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/time_rz.c:152:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              size_t zone_size = strlen (zone) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/time_rz.c:166:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          zone_copy += strlen (zone_copy) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1249:11:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   undef read
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1250:12:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   define read rpl_read
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1252:19:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_FUNCDECL_RPL (read, ssize_t, (int fd, void *buf, size_t count)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1254:19:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_RPL (read, ssize_t, (int fd, void *buf, size_t count));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1259:24:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_SYS_CAST (read, ssize_t, (int fd, void *buf, size_t count));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1261:19:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIASWARN (read);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1544:11:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
#   undef usleep
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1545:12:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
#   define usleep rpl_usleep
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1547:19:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_FUNCDECL_RPL (usleep, int, (useconds_t n));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1548:19:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_CXXALIAS_RPL (usleep, int, (useconds_t n));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1551:19:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_FUNCDECL_SYS (usleep, int, (useconds_t n));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1553:19:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_CXXALIAS_SYS (usleep, int, (useconds_t n));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1555:19:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_CXXALIASWARN (usleep);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1557:9:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
# undef usleep
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unistd.in.h:1559:18:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_WARN_ON_USE (usleep, "usleep is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unlocked-io.h:100:10:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  undef getc
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unlocked-io.h:101:11:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  define getc(x) getc_unlocked (x)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unlocked-io.h:103:28:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  define getc_unlocked(x) getc (x)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unlocked-io.h:107:10:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  undef getchar
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unlocked-io.h:108:11:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  define getchar() getchar_unlocked ()
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unlocked-io.h:110:30:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  define getchar_unlocked() getchar ()
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/unsetenv.c:68:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen (name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:229:24:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#  define local_wcslen wcslen
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:1731:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            tmp_length = strlen (arg);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:2563:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                      arg_end = arg + strlen (arg);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3650:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                ndigits = strlen (digits);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3710:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        ndigits = strlen (digits);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3746:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        if (strlen (digits2) == precision + 1)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3846:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        ndigits = strlen (digits);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:3882:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        if (strlen (digits2) == precision)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4112:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                ndigits = strlen (digits);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4169:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        ndigits = strlen (digits);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4204:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        if (strlen (digits2) == precision + 1)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4317:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        ndigits = strlen (digits);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/vasnprintf.c:4352:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        if (strlen (digits2) == precision)
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:575:19:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
_GL_FUNCDECL_SYS (wcslen, size_t, (const wchar_t *s) _GL_ATTRIBUTE_PURE);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:577:19:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
_GL_CXXALIAS_SYS (wcslen, size_t, (const wchar_t *s));
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:578:19:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
_GL_CXXALIASWARN (wcslen);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:580:9:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
# undef wcslen
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:582:18:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
_GL_WARN_ON_USE (wcslen, "wcslen is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:640:19:  [1] (buffer) wcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
_GL_FUNCDECL_SYS (wcsncpy, wchar_t *,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:643:19:  [1] (buffer) wcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
_GL_CXXALIAS_SYS (wcsncpy, wchar_t *,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:645:19:  [1] (buffer) wcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
_GL_CXXALIASWARN (wcsncpy);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:647:9:  [1] (buffer) wcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
# undef wcsncpy
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:649:18:  [1] (buffer) wcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
_GL_WARN_ON_USE (wcsncpy, "wcsncpy is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:693:19:  [1] (buffer) wcsncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, or automatically resizing strings. 
_GL_FUNCDECL_SYS (wcsncat, wchar_t *,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:696:19:  [1] (buffer) wcsncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, or automatically resizing strings. 
_GL_CXXALIAS_SYS (wcsncat, wchar_t *,
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:698:19:  [1] (buffer) wcsncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, or automatically resizing strings. 
_GL_CXXALIASWARN (wcsncat);
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:700:9:  [1] (buffer) wcsncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, or automatically resizing strings. 
# undef wcsncat
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/wchar.in.h:702:18:  [1] (buffer) wcsncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, or automatically resizing strings. 
_GL_WARN_ON_USE (wcsncat, "wcsncat is unportable - "
/home/capstone/Desktop/root/cpio-2.13+dfsg/gnu/xmalloc.c:121:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  return xmemdup (string, strlen (string) + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:124:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t length = strlen (buffer);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:532:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t remote_file_len = strlen (remote_file);
/home/capstone/Desktop/root/cpio-2.13+dfsg/lib/rtapelib.c:536:5:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
    strcat (command_buffer, "\n");
/home/capstone/Desktop/root/cpio-2.13+dfsg/rmt/rmt.c:72:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (str);
/home/capstone/Desktop/root/cpio-2.13+dfsg/rmt/rmt.c:161:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t slen = strlen (s);
/home/capstone/Desktop/root/cpio-2.13+dfsg/rmt/rmt.c:165:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t pfxlen = strlen (pfx);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyin.c:1211:18:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
  newdir_umask = umask (0);     /* Reset umask to preserve modes of
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:49:20:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
      bytes_read = read (in_file_des, buf, BUFSIZ);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:588:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  char *p = xrealloc (*pvar, strlen (value) + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:661:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		  int len = strlen (input_name.ds_string);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copyout.c:805:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		link_size = strlen (link_name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:64:18:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
  newdir_umask = umask (0);     /* Reset umask to preserve modes of
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:70:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  dirname_len = strlen (directory_name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:75:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      dirname_len += strlen (pwd) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:78:7:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
      strcat (output_name.ds_string, "/");
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/copypass.c:119:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      ds_resize (&output_name, dirname_len + strlen (slash) + 2);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/defer.c:34:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  d->header.c_name = (char *) xmalloc (strlen (file_hdr->c_name) + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/dstring.c:73:13:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  next_ch = getc (f);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/dstring.c:82:17:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
      next_ch = getc (f);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/dstring.h:41:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#define ds_strlen(s)		strlen ((s)->ds_string)
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/main.c:279:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if (strlen (arg) > 2 && memcmp (arg, "no-", 3) == 0)
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/makepath.c:64:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  dirpath = alloca (strlen (argpath) + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:38:3:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
  strncpy (hold_tar_linkname, linkname, TARLINKNAMESIZE);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:67:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy (hold_tar_filename, filename, TARNAMESIZE);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:72:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy (hold_tar_filename, prefix, TARPREFIXSIZE);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:74:7:  [1] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). Risk is low because the source is a constant character.
      strcat (hold_tar_filename, "/");
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:144:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  name_len = strlen (file_hdr->c_name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:147:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy (tar_hdr->name, file_hdr->c_name, name_len);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:154:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy (tar_hdr->prefix, file_hdr->c_name, prefix_len);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:155:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy (tar_hdr->name, file_hdr->c_name + prefix_len + 1,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:174:4:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
	  strncpy (tar_hdr->linkname, file_hdr->c_tar_linkname,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:201:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy (tar_hdr->linkname, file_hdr->c_tar_linkname,
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:212:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy (tar_hdr->magic, TMAGIC, TMAGLEN);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:213:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy (tar_hdr->version, TVERSION, TVERSLEN);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/tar.c:454:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  whole_name_len = strlen (name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/userspec.c:42:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      int _len = strlen ((src));					\
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:226:16:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  input_size = read (in_des, input_buffer, num_bytes);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:655:7:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
      read (out_file_des, tmp_buf, useful_bytes_in_block);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:886:6:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	c = getc (tty_in);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:963:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy (new_media_message_with_number, message, length);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:965:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      length = strlen (p + 1);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:987:15:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
  old_umask = umask (mode);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:989:3:  [1] (access) umask:Ensure that umask is given most restrictive possible setting (e.g., 066 or 077) (CWE-732).  
  umask (old_umask);
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:1265:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (name) + 1;
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:1294:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    memmove (name, p, (size_t)(strlen (p) + 1));
/home/capstone/Desktop/root/cpio-2.13+dfsg/src/util.c:1323:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t file_name_len = strlen (file_stat->c_name);
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/argcv.c:279:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  int len = strlen (command);
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:449:12:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  for (c = getc (fp); c != EOF && c != filename_terminator; c = getc (fp))
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:449:65:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  for (c = getc (fp); c != EOF && c != filename_terminator; c = getc (fp))
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:551:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      file_length += block_size * strlen (mapstr);
/home/capstone/Desktop/root/cpio-2.13+dfsg/tests/genfile.c:584:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	      size_t n = strlen (buf);
