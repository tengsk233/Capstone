/home/capstone/Desktop/root/curl-7.68.0/docs/examples/asiohiper.cpp:88:35:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
static void timer_cb(const boost::system::error_code & error, GlobalInfo *g);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/asiohiper.cpp:105:12:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
    boost::system::error_code error; /*success*/
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/asiohiper.cpp:184:47:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
                     int action, const boost::system::error_code & error,
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/asiohiper.cpp:231:35:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
static void timer_cb(const boost::system::error_code & error, GlobalInfo *g)
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/asiohiper.cpp:390:12:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
    boost::system::error_code ec;
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/cookie_interface.c:93:9:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#define snprintf _snprintf
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/cookie_interface.c:93:18:  [4] (format) _snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#define snprintf _snprintf
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/evhiperfifo.c:76:22:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define DPRINT(x...) printf(x)
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/htmltidy.c:56:9:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
        printf(tidyAttrName(attr));
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:173:7:  [4] (buffer) sscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
      sscanf(s, " a = control: %s", control);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:158:22:  [4] (buffer) sscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
        int RetVal = sscanf((char *)(ptr), "Date: %s %hu %s %hu %hu:%hu:%hu",
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/threaded-shared-conn.c:63:38:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
                    curl_lock_access access, void *userptr)
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/threaded-shared-conn.c:65:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
  (void)access; /* unused */
/home/capstone/Desktop/root/curl-7.68.0/lib/content_encoding.c:784:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(p, ce->name);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_wb.c:181:6:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
  if(access(ntlm_auth, X_OK) != 0) {
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_wb.c:221:7:  [4] (shell) execl:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
      execl(ntlm_auth, ntlm_auth,
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_wb.c:228:7:  [4] (shell) execl:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
      execl(ntlm_auth, ntlm_auth,
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:181:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(*path, homedir);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_printf.h:32:9:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# undef printf
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_printf.h:33:9:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# undef fprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_printf.h:35:9:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# undef vprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_printf.h:36:9:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# undef vfprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_printf.h:37:9:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
# undef vsnprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_printf.h:40:10:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define printf curl_mprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_printf.h:41:10:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define fprintf curl_mfprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_printf.h:43:10:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define vprintf curl_mvprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_printf.h:44:10:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define vfprintf curl_mvfprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:81:9:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# undef printf
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:82:9:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# undef fprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:83:9:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
# undef sprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:85:9:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# undef vprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:86:9:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# undef vfprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:87:9:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
# undef vsprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:92:10:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define printf curlx_mprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:93:10:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define fprintf curlx_mfprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:94:10:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
# define sprintf curlx_msprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:96:10:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define vprintf curlx_mvprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:97:10:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define vfprintf curlx_mvfprintf
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:994:13:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
            strcpy(addr, string_ftpport);
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:1004:11:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
          strcpy(addr, string_ftpport);
/home/capstone/Desktop/root/curl-7.68.0/lib/inet_ntop.c:69:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(dst, tmp);
/home/capstone/Desktop/root/curl-7.68.0/lib/inet_ntop.c:166:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(dst, tmp);
/home/capstone/Desktop/root/curl-7.68.0/lib/ldap.c:773:3:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  vfprintf(stderr, fmt, args);
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:1351:33:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
    if(stat(filename, &sbuf) || access(filename, R_OK))
/home/capstone/Desktop/root/curl-7.68.0/lib/mprintf.c:949:10:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
        (sprintf)(work, formatbuf, p->data.dnum);
/home/capstone/Desktop/root/curl-7.68.0/lib/security.c:403:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(buffer, buf);
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:273:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(data->set.errorbuffer, error);
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:127:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(p, (str));                             \
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:132:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(p, (str));                             \
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:530:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(msg.bytes, req->path);
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.h:169:16:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
  unsigned int access;
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:239:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy((char *)socksreq + packetsize, hostname);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:68:11:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
          strcpy(buf + len, (char *) status_string.value);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:89:11:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
          strcpy(buf + len, (char *) status_string.value);
/home/capstone/Desktop/root/curl-7.68.0/lib/system_win32.c:412:9:  [4] (buffer) _tcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
        _tcscpy(path + _tcslen(path), TEXT("\\"));
/home/capstone/Desktop/root/curl-7.68.0/lib/system_win32.c:413:9:  [4] (buffer) _tcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
        _tcscpy(path + _tcslen(path), filename);
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:411:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(buf, option);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:703:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(path, &url[5]);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:1452:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(p, u->query); /* original query */
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:1455:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(&p[querylen + addamperand], newp); /* new suffix */
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_sspi.c:422:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy((char *) message + sizeof(outdata), user_name);
/home/capstone/Desktop/root/curl-7.68.0/lib/version.c:102:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(ptr, LIBCURL_NAME "/" LIBCURL_VERSION);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:98:3:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  vfprintf(stderr, fmt, ap);
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:779:21:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
            else if(access(sshc->rsa, R_OK) != 0) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:784:23:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
              else if(access(sshc->rsa, R_OK) != 0) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:793:29:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
            if(sshc->rsa && access(sshc->rsa, R_OK) != 0) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:796:31:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
              if(sshc->rsa && access(sshc->rsa, R_OK) != 0) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gskit.c:367:11:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
          strcpy(ciphers[i].ptr, ctp->gsktoken);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gskit.c:417:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(ciphers[CURL_GSKPROTO_SSLV3].ptr,
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/wolfssl.c:373:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(protocols + strlen(protocols), NGHTTP2_PROTO_VERSION_ID ",");
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/wolfssl.c:378:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(protocols + strlen(protocols), ALPN_HTTP_1_1);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1155:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(cp, cp2);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1188:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(cp, cp2);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1221:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(cp, cp2);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_hdr.c:238:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
      fprintf(outs->stream, BOLD "%.*s" BOLDOFF ":", namelen, ptr);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_prg.c:192:5:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    fprintf(bar->out, format, line, percent);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_dirhie.c:138:11:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
          strcpy(dirbuildup, tempdir);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1399:15:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
              strcpy(n, enc);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_help.c:586:3:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  printf(CURL_ID "%s\n", curl_version());
/home/capstone/Desktop/root/curl-7.68.0/src/tool_main.c:113:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(fname, env);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_msgs.c:117:5:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    vfprintf(errors, fmt, ap);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:99:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(string + stringlen, buffer);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_parsecfg.c:363:7:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
      strcpy(&line[linelen], buf);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_progress.c:285:5:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    fprintf(global->errors,
/home/capstone/Desktop/root/curl-7.68.0/src/tool_writeout.c:322:19:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
                  fprintf(stream, version);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/first.c:97:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(fname, env);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1541.c:49:38:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
                    curl_lock_access access, void *userptr)
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1541.c:51:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
  (void)access; /* unused */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib547.c:57:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(ptr, UPLOADTHIS);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib555.c:64:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(ptr, uploadthis);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/stub_gssapi.c:195:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(ctx->creds, creds);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:47:17:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#define show(x) printf x
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:433:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(couter, ptag);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:439:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(cmain, ptag);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:445:9:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        strcpy(csub, ptag);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:158:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy(config.addr, CONFIG_ADDR);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:199:11:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
          strcpy(config.addr, value);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:207:11:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
          strcpy(config.user, value);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:211:11:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
          strcpy(config.password, value);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1307.c:268:6:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
enum system {
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1307.c:278:8:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
  enum system machine;
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/curlx.c:332:17:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
        p.pst = getenv(*(++args));
/home/capstone/Desktop/root/curl-7.68.0/include/curl/curl.h:2358:19:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
CURL_EXTERN char *curl_getenv(const char *variable);
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:388:19:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  char *timestr = getenv("CURL_TIME");
/home/capstone/Desktop/root/curl-7.68.0/lib/config-dos.h:155:25:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#define CURL_CA_BUNDLE  getenv("CURL_CA_BUNDLE")
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_gethostname.c:67:32:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  const char *force_hostname = getenv("CURL_GETHOSTNAME");
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:676:27:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  char *force_timestamp = getenv("CURL_FORCETIME");
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_wb.c:144:16:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    username = getenv("NTLMUSER");
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_wb.c:146:18:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      username = getenv("LOGNAME");
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_wb.c:148:18:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      username = getenv("USER");
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_wb.c:174:21:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  ntlm_auth_alloc = curl_getenv("CURL_NTLM_WB_FILE");
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_threads.h:43:34:  [3] (misc) InitializeCriticalSection:Exceptions can be thrown in low-memory situations.  Use InitializeCriticalSectionAndSpinCount instead. 
#    define Curl_mutex_init(m)   InitializeCriticalSection(m)
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_threads.h:47:34:  [3] (misc) EnterCriticalSection:On some versions of Windows, exceptions can be thrown in low-memory situations.  Use InitializeCriticalSectionAndSpinCount instead. 
#  define Curl_mutex_acquire(m)  EnterCriticalSection(m)
/home/capstone/Desktop/root/curl-7.68.0/lib/curlx.h:65:22:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#define curlx_getenv curl_getenv
/home/capstone/Desktop/root/curl-7.68.0/lib/getenv.c:39:16:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  char *temp = getenv(variable);
/home/capstone/Desktop/root/curl-7.68.0/lib/getenv.c:45:15:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  char *env = getenv(variable);
/home/capstone/Desktop/root/curl-7.68.0/lib/getenv.c:51:7:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
char *curl_getenv(const char *v)
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:4106:14:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
             getenv("CURL_ALTSVC_HTTP")
/home/capstone/Desktop/root/curl-7.68.0/lib/ldap.c:766:23:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    const char *env = getenv("CURL_TRACE");
/home/capstone/Desktop/root/curl-7.68.0/lib/netrc.c:222:19:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    char *homea = curl_getenv("HOME"); /* portable environment reader */
/home/capstone/Desktop/root/curl-7.68.0/lib/openldap.c:225:21:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  const char *env = getenv("CURL_OPENLDAP_TRACE");
/home/capstone/Desktop/root/curl-7.68.0/lib/rand.c:47:25:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  char *force_entropy = getenv("CURL_ENTROPY");
/home/capstone/Desktop/root/curl-7.68.0/lib/setup-vms.h:37:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#define getenv decc_getenv
/home/capstone/Desktop/root/curl-7.68.0/lib/setup-vms.h:50:8:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#undef getenv
/home/capstone/Desktop/root/curl-7.68.0/lib/setup-vms.h:52:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
#define getenv vms_getenv
/home/capstone/Desktop/root/curl-7.68.0/lib/system_win32.c:393:7:  [3] (misc) LoadLibrary:Ensure that the full path to the library is specified, or current directory may be used (CWE-829, CWE-20).  Use registry entry or GetWindowsDirectory to find library path, if you aren't already. 
      LoadLibrary(filename);
/home/capstone/Desktop/root/curl-7.68.0/lib/system_win32.c:419:11:  [3] (misc) LoadLibrary:Ensure that the full path to the library is specified, or current directory may be used (CWE-829, CWE-20).  Use registry entry or GetWindowsDirectory to find library path, if you aren't already. 
          LoadLibrary(path);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2115:10:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  prox = curl_getenv(proxy_env);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2132:12:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    prox = curl_getenv(proxy_env);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2141:13:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    proxy = curl_getenv(envp); /* default proxy to use */
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2144:15:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      proxy = curl_getenv(envp);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2370:16:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    no_proxy = curl_getenv(p);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2373:18:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      no_proxy = curl_getenv(p);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:263:21:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  keylog_filename = getenv("SSLKEYLOGFILE");
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:192:6:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  if(getenv("SSLKEYLOGFILE"))
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:771:24:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
          char *home = curl_getenv("HOME");
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/nss.c:1378:14:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  cert_dir = getenv("SSL_DIR");
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:1062:24:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    keylog_file_name = curl_getenv("SSLKEYLOGFILE");
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:737:20:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
  return Curl_ssl->random(data, entropy, length);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:1290:19:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  env = env_tmp = curl_getenv("CURL_SSL_BACKEND");
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.h:55:14:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
  CURLcode (*random)(struct Curl_easy *data, unsigned char *entropy,
/home/capstone/Desktop/root/curl-7.68.0/src/tool_homedir.c:57:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  env = getenv(variable);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_main.c:329:6:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  if(getenv("_IN_NETWARE_BASH_") == NULL)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_vms.c:56:11:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  shell = getenv("SHELL");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/first.c:91:9:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  env = curl_getenv("CURL_MEMDEBUG");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/first.c:105:9:  [3] (buffer) curl_getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  env = curl_getenv("CURL_MEMLIMIT");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/sethostname.c:32:32:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  const char *force_hostname = getenv("CURL_GETHOSTNAME");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/stub_gssapi.c:103:11:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  creds = getenv("CURL_STUB_GSS_CREDS");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/fake_ntlm.c:161:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  env = getenv("CURL_NTLM_AUTH_TESTNUM");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/fake_ntlm.c:184:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  env = getenv("CURL_NTLM_AUTH_SRCDIR");
/home/capstone/Desktop/root/curl-7.68.0/CMake/CurlTests.c:116:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[8192];
/home/capstone/Desktop/root/curl-7.68.0/CMake/CurlTests.c:519:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[1024];
/home/capstone/Desktop/root/curl-7.68.0/CMake/CurlTests.c:534:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[1024];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/anyauthput.c:116:8:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  hd = open(file, O_RDONLY);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/asiohiper.cpp:85:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error[CURL_ERROR_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/asiohiper.cpp:391:17:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    tcp_socket->open(boost::asio::ip::tcp::v4(), ec);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/cookie_interface.c:72:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char nline[256];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/crawler.c:62:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&(mem->buf[mem->size]), contents, realsize);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/curlgtk.c:53:21:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    FILE *outfile = fopen(filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/curlx.c:157:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(tmp, ia5->data, ia5->length);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ephiperfifo.c:97:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error[CURL_ERROR_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ephiperfifo.c:394:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char s[1024];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ephiperfifo.c:431:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  sockfd = open(fifo, O_RDWR | O_NONBLOCK, 0);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/evhiperfifo.c:99:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error[CURL_ERROR_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/evhiperfifo.c:372:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char s[1024];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/evhiperfifo.c:409:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  sockfd = open(fifo, O_RDWR | O_NONBLOCK, 0);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/fileupload.c:39:8:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  fd = fopen("debugit", "rb"); /* open file to upload */
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/fopen.c:121:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&url->buffer[url->buffer_pos], buffer, size);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/fopen.c:244:23:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  file->handle.file = fopen(url, operation);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/fopen.c:357:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, file->buffer, want);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/fopen.c:405:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, file->buffer, want);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/fopen.c:461:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/fopen.c:470:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  outf = fopen(FGETSFILE, "wb+");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/fopen.c:494:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  outf = fopen(FREADFILE, "wb+");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/fopen.c:518:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  outf = fopen(REWINDFILE, "wb+");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ftp-wildcard.c:120:20:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    data->output = fopen(finfo->filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ftpget.c:41:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    out->stream = fopen(out->filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ftpgetresp.c:49:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  ftpfile = fopen(FTPBODY, "wb"); /* b is binary, needed on win32 */
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ftpgetresp.c:52:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  respfile = fopen(FTPHEADERS, "wb"); /* b is binary, needed on win32 */
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ftpsget.c:43:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    out->stream = fopen(out->filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ftpupload.c:88:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  hd_src = fopen(LOCAL_FILE, "rb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ftpuploadfrommem.c:58:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, upload->readptr, copylen);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ftpuploadresume.c:76:7:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  f = fopen(localpath, "rb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/getinmemory.c:53:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&(mem->memory[mem->size]), contents, realsize);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ghiper.c:82:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error[CURL_ERROR_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ghiper.c:401:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  socket = open(fifo, O_RDWR | O_NONBLOCK, 0);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/hiperfifo.c:97:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error[CURL_ERROR_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/hiperfifo.c:362:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char s[1024];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/hiperfifo.c:407:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  sockfd = open(fifo, O_RDWR | O_NONBLOCK, 0);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/href_extractor.c:42:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    html_parser_char_parse(hsp, ((char *)buffer)[p]);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/href_extractor.c:55:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tag[1], attr[4], val[128];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/htmltidy.c:79:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char curl_errbuf[CURL_ERROR_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/htmltitle.cpp:65:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char errorBuffer[CURL_ERROR_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-download.c:144:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char filename[128];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-download.c:151:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  t->out = fopen(filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-download.c:189:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    num_transfers = atoi(argv[1]);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-pushinmemory.c:55:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&(mem->memory[mem->size]), contents, realsize);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-serverpush.c:133:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *out = fopen(OUTPUTFILE, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-serverpush.c:172:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char filename[128];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-serverpush.c:181:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  out = fopen(filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-upload.c:108:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char timebuf[60];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-upload.c:171:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char url[256];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-upload.c:172:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char filename[128];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-upload.c:180:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  out = fopen(filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-upload.c:188:11:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  i->in = fopen(upload, "rb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/http2-upload.c:238:21:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    num_transfers = atoi(argv[1]);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/httpput.c:81:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  hd_src = fopen(file, "rb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/imap-append.c:75:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, data, len);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/multi-event.c:66:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char filename[50];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/multi-event.c:72:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  file = fopen(filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/multi-uv.c:76:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char filename[50];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/multi-uv.c:82:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  file = fopen(filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/multithread.c:42:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
const char * const urls[NUMT]= {
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/post-callback.c:54:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dest, wt->readptr, copy_this_much);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/postinmemory.c:50:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&(mem->memory[mem->size]), contents, realsize);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:92:18:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *sdp_fp = fopen(sdp_filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:153:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
  strcpy(sdp_filename, "video.sdp");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:169:18:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *sdp_fp = fopen(sdp_filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/sendrecv.c:131:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buf[1024];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/sepheaders.c:61:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  headerfile = fopen(headerfilename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/sepheaders.c:68:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  bodyfile = fopen(bodyfilename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/sftpget.c:52:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    out->stream = fopen(out->filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/sftpuploadresume.c:89:7:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  f = fopen(localpath, "rb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/simplessl.c:74:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  headerfile = fopen(pHeaderFile, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/smooth-gtk-thread.c:87:23:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      FILE *outfile = fopen(urls[j], "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/smtp-authzid.c:83:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, data, len);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/smtp-mail.c:80:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, data, len);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/smtp-multi.c:77:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, data, len);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/smtp-ssl.c:77:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, data, len);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/smtp-tls.c:77:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, data, len);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/sslbackend.c:60:14:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
    int id = atoi(name);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:106:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char http_proxy[MAX_STRING1];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:107:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char proxy_user[MAX_STRING1];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:108:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char timeserver[MAX_STRING1];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:111:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
const char DefaultTimeServer[3][MAX_STRING1] =
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:140:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char  TmpStr1[26], TmpStr2[26];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:215:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    outfile = fopen(OutFileName, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:309:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char timeBuf[61];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:310:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tzoneBuf[16];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/url2file.c:67:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  pagefile = fopen(pagefilename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/xmlstream.c:81:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&(mem->memory[mem->size]), s, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:144:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char srchost[MAX_ALTSVC_HOSTLEN + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:145:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dsthost[MAX_ALTSVC_HOSTLEN + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:146:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char srcalpn[MAX_ALTSVC_ALPNLEN + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:147:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dstalpn[MAX_ALTSVC_ALPNLEN + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:148:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char date[MAX_ALTSVC_DATELEN + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:191:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *fp = fopen(file, FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:326:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  out = fopen(file, FOPEN_WRITETEXT);
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:357:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(alpnbuf, protop, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:414:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char namebuf[MAX_ALTSVC_HOSTLEN] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:415:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char alpnbuf[MAX_ALTSVC_ALPNLEN] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:442:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char option[32];
/home/capstone/Desktop/root/curl-7.68.0/lib/altsvc.c:495:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(namebuf, hostp, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/asyn-ares.c:807:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char a6[INET6_ADDRSTRLEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/asyn-thread.c:300:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char service[12];
/home/capstone/Desktop/root/curl-7.68.0/lib/asyn-thread.c:303:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[1];
/home/capstone/Desktop/root/curl-7.68.0/lib/asyn-thread.c:739:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char sbuf[12];
/home/capstone/Desktop/root/curl-7.68.0/lib/base64.c:181:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char ibuf[3];
/home/capstone/Desktop/root/curl-7.68.0/lib/base64.c:182:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char obuf[4];
/home/capstone/Desktop/root/curl-7.68.0/lib/conncache.c:205:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char key[HASHKEY_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/conncache.c:258:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char key[HASHKEY_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:274:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char myhost[256] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:407:34:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
            si6->sin6_scope_id = atoi(scope_ptr);
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:456:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:482:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:622:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(conn->data->info.conn_primary_ip, conn->primary_ip, MAX_IPADR_LEN);
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:623:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(conn->data->info.conn_local_ip, conn->local_ip, MAX_IPADR_LEN);
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:698:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:729:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(conn->ip_addr_str, conn->primary_ip, MAX_IPADR_LEN);
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:936:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char ipaddress[MAX_IPADR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:937:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:959:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:1001:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:1030:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:1103:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char ipaddress[MAX_IPADR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:1109:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:1493:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&addr->sa_addr, ai->ai_addr, addr->addrlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/content_encoding.c:492:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(z->next_in, buf, z->avail_in);
/home/capstone/Desktop/root/curl-7.68.0/lib/content_encoding.c:515:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(z->next_in + z->avail_in - nbytes, buf, nbytes);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:462:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char name[MAX_NAME];
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:463:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char what[MAX_NAME];
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:756:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(co->path, path, pathlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:1132:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    fp = file?fopen(file, FOPEN_READTEXT):NULL;
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:1523:11:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    out = fopen(dumphere, FOPEN_WRITETEXT);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_addrinfo.c:182:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ca->ai_addr, ai->ai_addr, ss_size);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_addrinfo.c:347:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&addr->sin_addr, curr, sizeof(struct in_addr));
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_addrinfo.c:356:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&addr6->sin6_addr, curr, sizeof(struct in6_addr));
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_addrinfo.c:383:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char *h_addr_list[2];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_addrinfo.c:430:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(addrentry, inaddr, sizeof(struct in_addr));
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_addrinfo.c:436:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(addrentry, inaddr, sizeof(struct in6_addr));
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_addrinfo.c:531:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(sa_un->sun_path + 1, path, path_len - 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_addrinfo.c:533:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(sa_un->sun_path, path, path_len); /* copy NUL byte */
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ctype.c:44:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static const unsigned char ascii[128] = {
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_fnmatch.c:76:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char keyword[KEYLEN] = { 0 };
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_fnmatch.c:260:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char charset[CURLFNM_CHSET_SIZE] = { 0 };
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_gssapi.c:125:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[GSS_LOG_BUFFER_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_multibyte.c:45:21:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
    int str_w_len = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS,
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_multibyte.c:50:12:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
        if(MultiByteToWideChar(CP_UTF8, 0, str_utf8, -1, str_w,
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:167:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char key[8];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:187:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char key[8];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:210:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char key[8];                                /* expanded 64 bit key */
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:269:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char key[8];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:288:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char key[8];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:311:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char key[8];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:340:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char key[8];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:369:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(out, in, 8);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:446:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char pw[14];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:665:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char hmac_output[NTLM_HMAC_MD5_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:700:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ptr + 32, challenge_client, 8);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:701:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ptr + 44, ntlm->target_info, ntlm->target_info_len);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:704:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ptr + 8, &ntlm->nonce[0], 8);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:713:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ptr, hmac_output, NTLM_HMAC_MD5_LEN);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:741:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char data[16];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:742:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char hmac_output[16];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:745:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&data[0], challenge_server, 8);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:746:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&data[8], challenge_client, 8);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:753:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(lmresp, hmac_output, 16);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:754:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(lmresp + 16, challenge_client, 8);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_wb.c:125:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char pwbuf[1024];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_wb.c:127:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:58:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(real_path, working_path + 3, working_path_len - 2);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:60:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(real_path, working_path, 1 + working_path_len);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:72:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(real_path, homedir, homelen);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:76:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(real_path + homelen + 1, working_path + 3,
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:86:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(real_path, working_path, 1 + working_path_len);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:188:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&(*path)[pathLength], cp, (int)(end - cp));
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.c:151:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dnsp, hostp, labellen);
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.c:191:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&(mem->memory[mem->size]), contents, realsize);
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.c:484:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&a->ip.v4, &doh[index], 4);
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.c:496:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&a->ip.v6, &doh[index], 16);
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.c:522:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&c->alloc[c->len], src, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.c:786:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.c:899:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&addr->sin_addr, &de->addr[i].ip.v4, sizeof(struct in_addr));
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.c:908:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&addr6->sin6_addr, &de->addr[i].ip.v6, sizeof(struct in6_addr));
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.h:82:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char v4[4]; /* network byte order */
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.h:83:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char v6[16];
/home/capstone/Desktop/root/curl-7.68.0/lib/dotdot.c:177:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(outptr, &input[oindex], qlen + 1); /* include the end zero byte */
/home/capstone/Desktop/root/curl-7.68.0/lib/escape.c:166:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char hexstr[3];
/home/capstone/Desktop/root/curl-7.68.0/lib/file.c:76:30:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#  define open_readonly(p,f) open((p),(f),(0))
/home/capstone/Desktop/root/curl-7.68.0/lib/file.c:78:30:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#  define open_readonly(p,f) open((p),(f))
/home/capstone/Desktop/root/curl-7.68.0/lib/file.c:288:8:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  fd = open(file->path, mode, conn->data->set.new_file_perms);
/home/capstone/Desktop/root/curl-7.68.0/lib/file.c:421:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char header[80];
/home/capstone/Desktop/root/curl-7.68.0/lib/formdata.c:725:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[8192];
/home/capstone/Desktop/root/curl-7.68.0/lib/formdata.c:789:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(zname, name, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:923:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char myhost[256] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:928:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char hbuf[NI_MAXHOST];
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:934:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tmp[1024];
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:945:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:1117:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(sa, ai->ai_addr, ai->ai_addrlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:1822:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char separator[4];
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:2041:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char timebuf[24];
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:2057:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char headerbuf[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:2272:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char clbuf[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:2307:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[24]= { "Accept-ranges: bytes\r\n" };
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:3459:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:3944:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char s[SBUF_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:3959:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&s, cmd, write_len);
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:3960:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
  strcpy(&s[write_len], "\r\n"); /* append a trailing CRLF */
/home/capstone/Desktop/root/curl-7.68.0/lib/getenv.c:38:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char env[4096];
/home/capstone/Desktop/root/curl-7.68.0/lib/hash.c:92:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(he->key, key, key_len);
/home/capstone/Desktop/root/curl-7.68.0/lib/hash.h:63:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char   key[1]; /* allocated memory following the struct */
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:266:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char entry_id[MAX_HOSTCACHE_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:421:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char entry_id[MAX_HOSTCACHE_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:837:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char hostname[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:844:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char entry_id[MAX_HOSTCACHE_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:873:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char address[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:890:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(hostname, hostp->data, host_end - hostp->data);
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:928:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(address, addr_begin, alen);
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip4.c:151:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char sbuf[12];
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip6.c:104:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[INET6_ADDRSTRLEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip6.c:110:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip6.c:137:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char sbuf[12];
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip6.c:140:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char addrbuf[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:270:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(value, start, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1103:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buffer, http->postdata, (size_t)http->postsize);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1123:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(buffer, http->postdata, fullsize);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1231:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(data->state.ulbuf, ptr, sendsize);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1391:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&in->buffer[in->size_used], inptr, size);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1521:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char proxy_header[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1524:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tcp_version[5];
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1528:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(tcp_version, "TCP6");
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1531:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(tcp_version, "TCP4");
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1913:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char datestr[80];
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1994:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char ftp_typecode[sizeof("/;type=?")] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:3219:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(k->hbufp, k->str_start, length);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:3671:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char scratch[SCRATCHSIZE + 1]; /* "HTTP/major.minor 123" */
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:3698:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char twoorthree[2];
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:715:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&stream->mem[stream->memlen],
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:781:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&stream->mem[stream->memlen], data, nread);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:1122:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf, stream->upload_mem, nread);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:1588:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(mem, stream->header_recvbuf->buffer + stream->nread_header_recvbuf,
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:1624:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(mem, stream->pausedata, nread);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:1959:28:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[0].namelen = strlen((char *)nva[0].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:1981:28:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[1].namelen = strlen((char *)nva[1].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:1991:28:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[2].namelen = strlen((char *)nva[2].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:1996:29:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[2].valuelen = strlen((char *)nva[2].value);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:2029:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      nva[i].namelen = strlen((char *)nva[i].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:2034:25:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      Curl_strntolower((char *)hdbuf, hdbuf, nva[i].namelen);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:2042:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    switch(inspect_header((const char *)nva[i].name, nva[i].namelen, hdbuf,
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:2293:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(httpc->inbuf, mem, nread);
/home/capstone/Desktop/root/curl-7.68.0/lib/http_chunks.h:86:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char hexbuffer[ MAXNUM_SIZE + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/idn_win32.c:77:5:  [2] (buffer) wchar_t:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    wchar_t punycode[IDN_MAX_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/lib/idn_win32.c:97:5:  [2] (buffer) wchar_t:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    wchar_t unicode[IDN_MAX_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/lib/if2ip.c:122:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char scope[12] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/if2ip.c:123:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char ipstr[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/if2ip.c:209:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(req.ifr_name, interf, len + 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/if2ip.h:52:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char ifrn_name[IFNAMSIZ]; /* if name, e.g. "en0" */
/home/capstone/Desktop/root/curl-7.68.0/lib/imap.c:1062:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmp[20];
/home/capstone/Desktop/root/curl-7.68.0/lib/imap.h:79:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char resptag[5];            /* Response tag to wait for */
/home/capstone/Desktop/root/curl-7.68.0/lib/inet_ntop.c:52:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tmp[sizeof("255.255.255.255")];
/home/capstone/Desktop/root/curl-7.68.0/lib/inet_ntop.c:86:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tmp[sizeof("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255")];
/home/capstone/Desktop/root/curl-7.68.0/lib/inet_pton.c:97:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char tmp[INADDRSZ], *tp;
/home/capstone/Desktop/root/curl-7.68.0/lib/inet_pton.c:132:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(dst, tmp, INADDRSZ);
/home/capstone/Desktop/root/curl-7.68.0/lib/inet_pton.c:155:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char tmp[IN6ADDRSZ], *tp, *endp, *colonp;
/home/capstone/Desktop/root/curl-7.68.0/lib/inet_pton.c:232:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(dst, tmp, IN6ADDRSZ);
/home/capstone/Desktop/root/curl-7.68.0/lib/krb5.c:91:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(buf, "599 ");
/home/capstone/Desktop/root/curl-7.68.0/lib/krb5.c:95:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(buf, dec.value, dec.length);
/home/capstone/Desktop/root/curl-7.68.0/lib/krb5.c:139:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(*to, enc.value, enc.length);
/home/capstone/Desktop/root/curl-7.68.0/lib/md4.c:85:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(result, gcry_md_read(ctx, 0), MD4_DIGEST_LENGTH);
/home/capstone/Desktop/root/curl-7.68.0/lib/md4.c:117:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(ctx->data, data, size);
/home/capstone/Desktop/root/curl-7.68.0/lib/md4.c:201:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(ctx->data, data, size);
/home/capstone/Desktop/root/curl-7.68.0/lib/md4.c:266:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buffer[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/md4.c:437:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&ctx->buffer[used], data, size);
/home/capstone/Desktop/root/curl-7.68.0/lib/md4.c:441:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&ctx->buffer[used], data, available);
/home/capstone/Desktop/root/curl-7.68.0/lib/md4.c:452:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ctx->buffer, data, size);
/home/capstone/Desktop/root/curl-7.68.0/lib/md5.c:54:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/lib/md5.c:80:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/lib/md5.c:82:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(digest, gcry_md_read(*ctx, 0), 16);
/home/capstone/Desktop/root/curl-7.68.0/lib/md5.c:122:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/lib/md5.c:154:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/lib/md5.c:217:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buffer[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/md5.c:410:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&ctx->buffer[used], data, size);
/home/capstone/Desktop/root/curl-7.68.0/lib/md5.c:414:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&ctx->buffer[used], data, available);
/home/capstone/Desktop/root/curl-7.68.0/lib/md5.c:425:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ctx->buffer, data, size);
/home/capstone/Desktop/root/curl-7.68.0/lib/memdebug.c:112:26:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      curl_dbg_logfile = fopen(logname, FOPEN_WRITETEXT);
/home/capstone/Desktop/root/curl-7.68.0/lib/memdebug.c:231:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(mem, str, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/memdebug.c:256:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(mem, str, bsiz);
/home/capstone/Desktop/root/curl-7.68.0/lib/memdebug.c:450:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *res = fopen(file, mode);
/home/capstone/Desktop/root/curl-7.68.0/lib/memdebug.h:147:8:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#undef fopen
/home/capstone/Desktop/root/curl-7.68.0/lib/memdebug.h:148:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#define fopen(file,mode) curl_dbg_fopen(file,mode,__LINE__,__FILE__)
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:126:20:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#define fopen_read fopen
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:144:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[8192];
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:149:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  file = fopen(name, FOPEN_READTEXT); /* VMS */
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:205:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    return fopen(file, FOPEN_READTEXT); /* VMS */
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:208:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    return fopen(file, FOPEN_READTEXT, "rfm=stmlf", "ctx=stm");
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:360:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buffer, st->buf, size);
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:509:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[4];
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:577:9:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
        strcpy(buf, "\x3D\x0D\x0A");    /* "=\r\n" */
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:588:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, buf, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:622:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buffer, (char *) &part->data[part->state.offset], sz);
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:732:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(buffer, bytes, sz);
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:1325:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(part->data, data, datasize);
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.h:83:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char           buf[ENCODING_BUFFER_SIZE]; /* Input buffer. */
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.h:102:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char boundary[MIME_BOUNDARY_LEN]; /* The part boundary. */
/home/capstone/Desktop/root/curl-7.68.0/lib/mprintf.c:575:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char *endpos[MAX_PARAMETERS];
/home/capstone/Desktop/root/curl-7.68.0/lib/mprintf.c:578:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char work[BUFFSIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/mprintf.c:883:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char formatbuf[32]="%";
/home/capstone/Desktop/root/curl-7.68.0/lib/multi.c:653:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/multi.c:1184:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
          char buf[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/multi.c:1266:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1];
/home/capstone/Desktop/root/curl-7.68.0/lib/multi.c:2622:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(data->sockets, socks, num*sizeof(curl_socket_t));
/home/capstone/Desktop/root/curl-7.68.0/lib/multi.c:2623:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(data->actions, actions, num*sizeof(int));
/home/capstone/Desktop/root/curl-7.68.0/lib/multi.c:2713:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tv, &node->time, sizeof(*tv));
/home/capstone/Desktop/root/curl-7.68.0/lib/multi.c:3081:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&node->time, stamp, sizeof(*stamp));
/home/capstone/Desktop/root/curl-7.68.0/lib/netrc.c:78:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  file = fopen(netrcfile, FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/lib/netrc.c:83:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char netrcbuffer[4096];
/home/capstone/Desktop/root/curl-7.68.0/lib/netrc.c:229:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char pwbuf[1024];
/home/capstone/Desktop/root/curl-7.68.0/lib/non-ascii.c:67:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(convbuf, indata, insize);
/home/capstone/Desktop/root/curl-7.68.0/lib/openldap.c:211:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char hosturl[1024];
/home/capstone/Desktop/root/curl-7.68.0/lib/openldap.c:216:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
  strcpy(hosturl, "ldap");
/home/capstone/Desktop/root/curl-7.68.0/lib/parsedate.c:119:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char name[5];
/home/capstone/Desktop/root/curl-7.68.0/lib/parsedate.c:356:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buf[32]="";
/home/capstone/Desktop/root/curl-7.68.0/lib/parsedate.h:25:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
extern const char * const Curl_wkday[7];
/home/capstone/Desktop/root/curl-7.68.0/lib/parsedate.h:26:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
extern const char * const Curl_month[12];
/home/capstone/Desktop/root/curl-7.68.0/lib/pingpong.c:310:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(ptr, pp->cache, pp->cache_size);
/home/capstone/Desktop/root/curl-7.68.0/lib/pingpong.c:444:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(pp->cache, pp->linestart_resp, pp->cache_size);
/home/capstone/Desktop/root/curl-7.68.0/lib/pop3.c:416:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char digest[MD5_DIGEST_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/pop3.c:417:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char secret[2 * MD5_DIGEST_LEN + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/pop3.c:638:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(pop3c->apoptimestamp, line + i, timestamplen);
/home/capstone/Desktop/root/curl-7.68.0/lib/progress.c:42:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(r, "--:--:--");
/home/capstone/Desktop/root/curl-7.68.0/lib/progress.c:468:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char max5[6][10];
/home/capstone/Desktop/root/curl-7.68.0/lib/progress.c:474:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char time_left[10];
/home/capstone/Desktop/root/curl-7.68.0/lib/progress.c:475:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char time_total[10];
/home/capstone/Desktop/root/curl-7.68.0/lib/progress.c:476:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char time_spent[10];
/home/capstone/Desktop/root/curl-7.68.0/lib/rand.c:54:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy((char *)&seed, force_entropy, min);
/home/capstone/Desktop/root/curl-7.68.0/lib/rand.c:77:14:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    int fd = open(RANDOM_FILE, O_RDONLY);
/home/capstone/Desktop/root/curl-7.68.0/lib/rand.c:155:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buffer[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/rtsp.c:615:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(rtspc->rtp_buf + rtspc->rtp_bufsize, k->str, *nread);
/home/capstone/Desktop/root/curl-7.68.0/lib/rtsp.c:687:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(scratch, rtp, rtp_dataleft);
/home/capstone/Desktop/root/curl-7.68.0/lib/rtsp.c:815:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(data->set.str[STRING_RTSP_SESSION_ID], start, end - start);
/home/capstone/Desktop/root/curl-7.68.0/lib/security.c:120:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char print_buffer[50];
/home/capstone/Desktop/root/curl-7.68.0/lib/security.c:222:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(data, (char *)buf->data + buf->index, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:200:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf, psnd->buffer + psnd->recv_processed, copysize);
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:238:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char print_buffer[2048 + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:267:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char error[CURL_ERROR_SIZE + 2];
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:414:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:480:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:527:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(newptr + s->tempwrite[i].len, ptr, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:753:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static const char s_infotype[CURLINFO_END][3] = {
/home/capstone/Desktop/root/curl-7.68.0/lib/setopt.c:527:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(p, argptr, (size_t)data->set.postfieldsize);
/home/capstone/Desktop/root/curl-7.68.0/lib/sha256.c:96:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buf[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/sha256.c:201:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(md->buf + md->curlen, in, n);
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:351:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy((char *)h->magic, "\xffSMB", 4);
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:416:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(conn->data->state.ulbuf + sizeof(struct smb_header),
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:434:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char lm_hash[21];
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:435:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char lm[24];
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:436:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char nt_hash[21];
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:437:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char nt[24];
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:464:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(p, lm, sizeof(lm));
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:466:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(p, nt, sizeof(nt));
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.h:39:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char challenge[8];
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.h:100:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char magic[4];
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.h:106:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char signature[8];
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.h:130:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char bytes[1];
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.h:150:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char bytes[1024];
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.h:159:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char bytes[1024];
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.h:178:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char bytes[1024];
/home/capstone/Desktop/root/curl-7.68.0/lib/smtp.c:210:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmpline[6];
/home/capstone/Desktop/root/curl-7.68.0/lib/smtp.c:214:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmpline, line, (len == 5 ? 5 : 3));
/home/capstone/Desktop/root/curl-7.68.0/lib/smtp.c:1506:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char localhost[HOSTNAME_MAX + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/smtp.c:1587:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&scratch[si], &SMTP_EOB[eob_sent], smtp->eob - eob_sent);
/home/capstone/Desktop/root/curl-7.68.0/lib/smtp.c:1605:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&scratch[si], &SMTP_EOB_REPL[eob_sent],
/home/capstone/Desktop/root/curl-7.68.0/lib/smtp.c:1617:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&scratch[si], &SMTP_EOB[eob_sent], smtp->eob - eob_sent);
/home/capstone/Desktop/root/curl-7.68.0/lib/sockaddr.h:37:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char cbuf[256];   /* this should be big enough to fit a lot */
/home/capstone/Desktop/root/curl-7.68.0/lib/socketpair.c:66:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char data[2][12];
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:118:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char socksreq[SOCKS4REQLEN]; /* room for SOCKS4 request incl. user
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:176:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buf[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:216:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(socksreq + 8, proxy_user, plen + 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:378:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char socksreq[REQUEST_BUFSIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:379:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dest[REQUEST_BUFSIZE] = "unknown";  /* printable hostname:port */
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:539:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(socksreq + len, proxy_user, proxy_user_len);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:549:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(socksreq + len, proxy_password, proxy_password_len);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:609:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&socksreq[len], hostname, hostname_len); /* address str w/o NULL */
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:641:9:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
        strcpy(dest, "unknown");
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:55:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[1024];
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:77:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(buf + len, ".\n");
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:123:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char socksreq[4]; /* room for GSS-API exchange header only */
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:142:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(service.value, serviceptr, service.length);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:200:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(socksreq + 2, &us_length, sizeof(short));
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:265:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&us_length, socksreq + 2, sizeof(short));
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:324:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(user, gss_send_token.value, gss_send_token.length);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:380:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(socksreq + 2, &us_length, sizeof(short));
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:389:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(gss_send_token.value, &gss_enc, 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:405:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(socksreq + 2, &us_length, sizeof(short));
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:417:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(socksreq, &gss_enc, 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:459:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&us_length, socksreq + 2, sizeof(short));
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:500:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(socksreq, gss_w_token.value, gss_w_token.length);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:512:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(socksreq, gss_recv_token.value, gss_recv_token.length);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:54:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:87:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char socksreq[4]; /* room for GSS-API exchange header only */
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:203:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(socksreq + 2, &us_length, sizeof(short));
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:287:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&us_length, socksreq + 2, sizeof(short));
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:381:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(socksreq + 2, &us_length, sizeof(short));
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:410:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(sspi_w_token[1].pvBuffer, &gss_enc, 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:444:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(sspi_send_token.pvBuffer, sspi_w_token[0].pvBuffer,
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:446:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy((PUCHAR) sspi_send_token.pvBuffer +(int)sspi_w_token[0].cbBuffer,
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:448:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy((PUCHAR) sspi_send_token.pvBuffer
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:464:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(socksreq + 2, &us_length, sizeof(short));
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:477:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(socksreq, &gss_enc, 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:521:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&us_length, socksreq + 2, sizeof(short));
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:531:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  result = Curl_blockread_all(conn, sock, (char *)sspi_w_token[0].pvBuffer,
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:575:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(socksreq, sspi_w_token[1].pvBuffer, sspi_w_token[1].cbBuffer);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:587:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(socksreq, sspi_w_token[0].pvBuffer, sspi_w_token[0].cbBuffer);
/home/capstone/Desktop/root/curl-7.68.0/lib/strdup.c:51:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(newstr, str, (len + 1)*sizeof(char));
/home/capstone/Desktop/root/curl-7.68.0/lib/strdup.c:74:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(buffer, src, length);
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:657:5:  [2] (buffer) wchar_t:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    wchar_t wbuf[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:761:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:774:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:971:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char txtbuf[80];
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:972:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char msgbuf[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:161:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char subopt_ttype[32];             /* Set with suboption TTYPE */
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:162:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char subopt_xdisploc[128];         /* Set with suboption XDISPLOC */
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:168:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char subbuffer[SUBBUFSIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:348:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
   unsigned char buf[3];
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:822:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char option_keyword[128] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:823:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char option_arg[256] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:890:25:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        binary_option = atoi(option_arg);
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:925:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char temp[2048];
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:929:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char varname[128] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:930:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char varval[128] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:506:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buf[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:555:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:606:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:730:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:1055:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:1134:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&state->remote_addr, &fromaddr, fromlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:1272:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/transfer.c:133:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buffer,
/home/capstone/Desktop/root/curl-7.68.0/lib/transfer.c:318:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char hexbuffer[11] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/transfer.c:327:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(data->req.upload_fromhere, hexbuffer, hexlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/transfer.c:340:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(data->req.upload_fromhere + nread,
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2102:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char proxy_env[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2112:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
  strcpy(envp, "_proxy");
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2303:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char proxyuser[MAX_CURL_USER_LENGTH]="";
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2304:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char proxypasswd[MAX_CURL_PASSWORD_LENGTH]="";
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2598:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(ubuf, login, ulen);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2606:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(pbuf, psep + 1, plen);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2614:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(obuf, osep + 1, olen);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2638:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char portbuf[16];
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:407:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(newest, url_clone, urllen);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:537:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char portbuf[7];
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:602:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char dest[16]; /* fits a binary IPv6 address */
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:619:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char zoneid[16];
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:670:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char schemebuf[MAX_SCHEME_LEN + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:815:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(hostname, hostp, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:842:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(path, p, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:1008:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char portbuf[7];
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:1134:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(allochost, u->host, hostlen - 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/urldata.h:367:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char nonce[8];
/home/capstone/Desktop/root/curl-7.68.0/lib/urldata.h:559:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char dohbuffer[512];
/home/capstone/Desktop/root/curl-7.68.0/lib/urldata.h:795:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char connect_buffer[CONNECT_BUFFER_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/urldata.h:857:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char ip_addr_str[MAX_IPADR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/urldata.h:895:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char primary_ip[MAX_IPADR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/urldata.h:902:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char local_ip[MAX_IPADR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/urldata.h:1116:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char conn_primary_ip[MAX_IPADR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/urldata.h:1118:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char conn_local_ip[MAX_IPADR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/urldata.h:1681:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char *str[STRING_LAST]; /* array of strings, pointing to allocated memory */
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/cleartext.c:94:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(plainauth, authzid, zlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/cleartext.c:96:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(plainauth + zlen + 1, authcid, clen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/cleartext.c:98:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(plainauth + zlen + clen + 2, passwd, plen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/cram.c:100:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char digest[MD5_DIGEST_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:363:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char digest[MD5_DIGEST_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:364:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:365:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:366:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:367:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char nonce[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:368:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char realm[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:369:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char algorithm[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:370:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char qop_options[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:372:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char cnonce[33];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:539:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char value[DIGEST_MAX_VALUE_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:540:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char content[DIGEST_MAX_CONTENT_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:694:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char hashbuf[32]; /* 32 bytes/256 bits */
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:695:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char request_digest[65];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:697:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char ha1[65];    /* 64 digits and 1 zero byte */
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:698:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char ha2[65];    /* 64 digits and 1 zero byte */
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:699:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char userh[65];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:710:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char cnoncebuf[33];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:790:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char hashed[65];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest_sspi.c:279:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char value[DIGEST_MAX_VALUE_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest_sspi.c:280:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char content[DIGEST_MAX_CONTENT_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest_sspi.c:354:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char value[DIGEST_MAX_VALUE_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest_sspi.c:355:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char content[DIGEST_MAX_CONTENT_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest_sspi.c:638:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(resp, output_token, output_token_len);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_gssapi.c:298:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&indata, output_token.value, 4);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_gssapi.c:336:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(message, &outdata, sizeof(outdata));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_gssapi.c:337:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(message + sizeof(outdata), username_token.value,
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_sspi.c:236:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(krb5->context, &context, sizeof(context));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_sspi.c:371:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&indata, input_buf[1].pvBuffer, 4);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_sspi.c:421:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(message, &outdata, sizeof(outdata));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_sspi.c:475:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(appdata, wrap_buf[0].pvBuffer, wrap_buf[0].cbBuffer);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_sspi.c:477:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(appdata + offset, wrap_buf[1].pvBuffer, wrap_buf[1].cbBuffer);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_sspi.c:479:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(appdata + offset, wrap_buf[2].pvBuffer, wrap_buf[2].cbBuffer);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:197:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(ntlm->target_info, &buffer[target_info_offset], target_info_len);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:312:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ntlm->nonce, &type2[24], 8);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:392:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char ntlmbuf[NTLM_BUFSIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:520:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char ntlmbuf[NTLM_BUFSIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:522:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char lmresp[24]; /* fixed-size */
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:526:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char ntresp[24]; /* fixed-size */
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:531:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char host[HOSTNAME_MAX + 1] = "";
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:567:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ntbuffer[0x18];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:568:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char entropy[8];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:569:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ntlmv2hash[0x18];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:604:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ntbuffer[0x18];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:605:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char tmp[0x18];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:606:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char md5sum[MD5_DIGEST_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:607:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char entropy[8];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:615:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(lmresp, entropy, 8);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:621:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp, &ntlm->nonce[0], 8);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:622:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(tmp + 8, entropy, 8);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:644:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char ntbuffer[0x18];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:646:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char lmbuffer[0x18];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:772:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&ntlmbuf[size], lmresp, 0x18);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:788:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&ntlmbuf[size], ptr_ntresp, ntresplen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:818:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&ntlmbuf[size], domain, domlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:826:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&ntlmbuf[size], user, userlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:834:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&ntlmbuf[size], host, hostlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/spnego_sspi.c:257:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/spnego_sspi.c:271:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/version.c:94:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char version[250];
/home/capstone/Desktop/root/curl-7.68.0/lib/version.c:183:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char suff[2];
/home/capstone/Desktop/root/curl-7.68.0/lib/version.c:394:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char ssh_buffer[80];
/home/capstone/Desktop/root/curl-7.68.0/lib/version.c:398:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char ssl_buffer[200];
/home/capstone/Desktop/root/curl-7.68.0/lib/version.c:400:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char ssl_buffer[80];
/home/capstone/Desktop/root/curl-7.68.0/lib/version.c:404:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char brotli_buffer[80];
/home/capstone/Desktop/root/curl-7.68.0/lib/version.c:470:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static char quicbuffer[80];
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:205:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&crypto_data->buf[crypto_data->len], data, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:250:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char error_buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:265:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    keylog_file = fopen(keylog_filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:555:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char ipbuf[40];
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:565:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:797:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(stream->mem, buf, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:814:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(stream->overflow_buf + stream->overflow_buflen, buf, ncopy);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:926:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char line[14]; /* status line is always 13 characters long */
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1060:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(stream->mem, stream->overflow_buf, ncopy);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1182:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&out->buf[out->windex], stream->upload_mem, nread);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1281:28:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[0].namelen = strlen((char *)nva[0].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1299:28:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[1].namelen = strlen((char *)nva[1].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1305:28:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[2].namelen = strlen((char *)nva[2].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1310:29:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[2].valuelen = strlen((char *)nva[2].value);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1340:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      nva[i].namelen = strlen((char *)nva[i].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1345:25:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      Curl_strntolower((char *)hdbuf, hdbuf, nva[i].namelen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1355:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    switch(inspect_header((const char *)nva[i].name, nva[i].namelen, hdbuf,
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1690:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&remote_addr, ps.path.remote.addr, ps.path.remote.addrlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:209:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:214:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(conn->ip_addr_str, conn->primary_ip, MAX_IPADR_LEN);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:596:29:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[0].name_len = strlen((char *)nva[0].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:613:29:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[1].name_len = strlen((char *)nva[1].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:618:29:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[2].name_len = strlen((char *)nva[2].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:623:30:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  nva[2].value_len = strlen((char *)nva[2].value);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:652:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      nva[i].name_len = strlen((char *)nva[i].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:657:25:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      Curl_strntolower((char *)hdbuf, hdbuf, nva[i].name_len);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:666:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    switch(inspect_header((const char *)nva[i].name, nva[i].namelen, hdbuf,
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:1341:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(sshc->readdir_line, sshc->readdir_longentry,
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:615:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char md5buffer[33];
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1090:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char tempHome[PATH_MAX];
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:2010:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(sshc->readdir_line, sshc->readdir_longentry,
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:49:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buf[BR_SSL_BUFSIZE_BIDI];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:52:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  const char *protocols[2];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:69:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char dn[1024];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:83:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ca->dn + ca->dn_len, buf, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:106:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buf[BUFSIZ], *p;
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:110:8:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  fp = fopen(path, "rb");
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:196:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(ta->dn.data, ca.dn, ca.dn_len);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:201:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(ta->pkey.key.rsa.n, pkey->key.rsa.n, pkey->key.rsa.nlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:203:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(ta->pkey.key.rsa.e, pkey->key.rsa.e, pkey->key.rsa.elen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:207:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(ta->pkey.key.ec.q, pkey->key.ec.q, pkey->key.ec.qlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:604:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(app, buf, applen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/bearssl.c:626:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(buf, app, applen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gskit.c:528:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[CURL_MAX_WRITE_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gskit.c:1172:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[120];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gtls.c:226:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char str[96];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gtls.c:253:7:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  f = fopen(file, "rb");
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gtls.c:1019:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char certbuf[256] = ""; /* big enough? */
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gtls.c:1085:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      const char *beg = (const char *) chainp[i].data;
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gtls.c:1282:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char addrbuf[sizeof(struct use_addr)];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gtls.c:1293:16:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      unsigned char certaddr[sizeof(struct use_addr)];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gtls.c:1656:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[120];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gtls.c:1807:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(md5sum, gcry_md_read(MD5pw, 0), md5len);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gtls.c:1827:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(sha256sum, gcry_md_read(SHA256pw, 0), sha256len);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/mbedtls.c:75:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  const char *protocols[3];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/mbedtls.c:253:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char errorbuf[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/mbedtls.c:558:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char errorbuf[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/mbedtls.c:618:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char pubkey[PUB_DER_MAX_BYTES];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/mbedtls.c:836:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char errorbuf[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/mesalink.c:311:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char error_buffer[MESALINK_MAX_ERROR_SZ];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/mesalink.c:387:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error_buffer[MESALINK_MAX_ERROR_SZ];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/mesalink.c:432:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error_buffer[MESALINK_MAX_ERROR_SZ];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/nss.c:819:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buf[50];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/nss.c:930:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char timeString[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/nss.c:2070:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char protocols[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/nss.c:2076:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&protocols[cur], NGHTTP2_PROTO_VERSION_ID,
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/nss.c:2082:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&protocols[cur], ALPN_HTTP_1_1, ALPN_HTTP_1_1_LENGTH);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:215:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char master_key[SSL_MAX_MASTER_KEY_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:216:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char client_random[SSL3_RANDOM_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:253:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char stackbuf[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:264:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf, line, linelen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:284:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char line[KEYLOG_PREFIX_LEN + 2 * SSL3_RANDOM_SIZE + 1 +
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:287:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char client_random[SSL3_RANDOM_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:288:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char master_key[SSL_MAX_MASTER_KEY_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:305:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(master_key, session->master_key, session->master_key_length);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:306:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(client_random, ssl->s3->client_random, SSL3_RANDOM_SIZE);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:321:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(state->master_key, master_key, master_key_length);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:322:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(state->client_random, client_random, SSL3_RANDOM_SIZE);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:324:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(line, KEYLOG_PREFIX, KEYLOG_PREFIX_LEN);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:441:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(buf, global_passwd, klen + 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:461:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char fname[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:512:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char randb[64];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:525:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&randb[i * sizeof(struct curltime)], &tv,
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:631:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error_buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:1007:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(buf, biomem->data, size);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:1064:24:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      keylog_file_fp = fopen(keylog_file_name, FOPEN_APPENDTEXT);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:1212:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:1306:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[256]; /* We will use this for the OpenSSL error buffer, so it has
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:1652:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy(peer_CN, ASN1_STRING_get0_data(tmp), j);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:1952:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char unknown[32];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:2009:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char ssl_buf[1024];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:2030:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      msg_type = (((char *)buf)[0] << 8) + ((char *)buf)[1];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:2030:46:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      msg_type = (((char *)buf)[0] << 8) + ((char *)buf)[1];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:2422:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error_buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:2634:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char protocols[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:2641:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&protocols[cur], NGHTTP2_PROTO_VERSION_ID,
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:2649:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&protocols[cur], ALPN_HTTP_1_1, ALPN_HTTP_1_1_LENGTH);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:2960:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char error_buffer[256]="";
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:2991:11:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
          strcpy(error_buffer, "SSL certificate verification failed");
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:3008:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char extramsg[80]="";
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:3103:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char namebuf[32];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:3140:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[512];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:3142:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char namebuf[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:3475:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error_buffer[256]="";
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:3476:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[2048];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:3828:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error_buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:3875:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char ver[120];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:3902:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error_buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:4014:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char sub[3];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/polarssl.c:227:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char errorbuf[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/polarssl.c:422:18:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    static const char *protocols[3];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/polarssl.c:457:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[1024];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/polarssl.c:463:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char errorbuf[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/polarssl.c:527:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char pubkey[PUB_DER_MAX_BYTES];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:215:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tmp[LONGEST_ALG_ID] = { 0 };
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:425:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char alpn_buffer[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:686:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:740:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(&alpn_buffer[cur], NGHTTP2_PROTO_ALPN, NGHTTP2_PROTO_ALPN_LEN);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:747:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&alpn_buffer[cur], ALPN_HTTP_1_1, ALPN_HTTP_1_1_LENGTH);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:803:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:980:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(inbuf[0].pvBuffer, BACKEND->encdata_buffer,
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:1047:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:1515:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(outbuf[1].pvBuffer, buf, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:1774:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(BACKEND->decdata_buffer + BACKEND->decdata_offset,
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:1859:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:1907:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf, BACKEND->decdata_buffer, size);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:2014:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:2159:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:99:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:121:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:131:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:162:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:225:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
          char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:254:15:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
              char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:440:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:466:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:494:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:518:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[STRERROR_LEN];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:906:12:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
  *major = atoi(os_version_major);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:907:12:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
  *minor = atoi(os_version_minor);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:2031:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buf[512], *data;
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:2033:8:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  fd = open(file, 0);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:2064:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(data + len, buf, n);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:2328:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(realpubkey, spkiHeader, spkiHeaderLength);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:2329:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(realpubkey + spkiHeaderLength, pubkey, pubkeylen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:2961:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[120];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:703:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&output[labellen + 1], value, valuelen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:855:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(pinkeycopy, pinnedpubkey, pinkeylen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:888:8:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  fp = fopen(pinnedpubkey, "rb");
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:1238:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char backends[200];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:1265:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buffer, backends, total + 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:1267:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buffer, backends, size - 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/wolfssl.c:365:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char protocols[128];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/wolfssl.c:398:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char error_buffer[WOLFSSL_MAX_ERROR_SZ];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/wolfssl.c:449:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char error_buffer[WOLFSSL_MAX_ERROR_SZ];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/wolfssl.c:658:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error_buffer[WOLFSSL_MAX_ERROR_SZ];
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/wolfssl.c:704:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error_buffer[WOLFSSL_MAX_ERROR_SZ];
/home/capstone/Desktop/root/curl-7.68.0/lib/x509asn1.c:302:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(buf, from, outlength);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:59:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
makeOS400IconvCode(char buf[ICONV_ID_SIZE], unsigned int ccsid)
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:85:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char fromcode[ICONV_ID_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:86:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tocode[ICONV_ID_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:134:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(d, s, i);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:479:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy((char *) id, (char *) p, sizeof(*p));
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:485:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(cp, (char *) p->protocols, i);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:745:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
          free((char *) forms[nargs].value);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:783:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(buf->value, t, i);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:803:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy((char *) &in, (char *) in_name, sizeof(in));
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1246:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy((char *) dstaddr, (char *) srcaddr, srclen);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1283:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy((char *) dstaddr, (char *) srcaddr, srclen);
/home/capstone/Desktop/root/curl-7.68.0/packages/vms/curl_crtl_init.c:180:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char unix_shell_name[255];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_dbg.c:53:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char timebuf[20];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_dbg.c:83:30:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      config->trace_stream = fopen(config->trace_dump, FOPEN_WRITETEXT);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_hdr.c:262:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(copy, ptr, len);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_hdr.c:332:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[512]; /* suitably large */
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_prg.c:72:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[256];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_prg.c:77:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&buf[bar->bar], "-=O=-", 5);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_prg.c:173:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char line[MAX_BARLENGTH + 1];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_prg.c:174:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char format[40];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_wrt.c:48:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    file = fopen(outs->filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_wrt.c:58:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  file = fopen(outs->filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_wrt.c:173:14:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
    wc_len = MultiByteToWideChar(CP_UTF8, 0, buffer, in_len,  NULL, 0);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_wrt.c:179:14:  [2] (buffer) MultiByteToWideChar:Requires maximum length in CHARACTERS, not bytes (CWE-120).  
    wc_len = MultiByteToWideChar(CP_UTF8, 0, buffer, in_len, wc_buf, wc_len);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:312:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dos_name[PATH_MAX];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:408:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(d, "plus", 4);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:464:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char fname[PATH_MAX];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:629:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[PATH_MAX];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:675:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[sizeof(mod.szExePath) * 2];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_easysrc.c:181:11:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    out = fopen(o, FOPEN_WRITETEXT);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_formparse.c:198:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(buffer, sip->data + curlx_sotouz(sip->curpos), nitems);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_formparse.c:277:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(cp, m->data, size + 1);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_formparse.c:419:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char hdrbuf[999]; /* Max. header length + 1. */
/home/capstone/Desktop/root/curl-7.68.0/src/tool_formparse.c:485:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char type_major[128] = "";
/home/capstone/Desktop/root/curl-7.68.0/src/tool_formparse.c:486:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char type_minor[128] = "";
/home/capstone/Desktop/root/curl-7.68.0/src/tool_formparse.c:570:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        fp = fopen(hdrfile, FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:794:27:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
          FILE *newfile = fopen(nextarg, FOPEN_WRITETEXT);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:955:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char lrange[7];  /* 16bit base 10 is 5 digits, but we allow 6 so that
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1354:20:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            file = fopen(p, "rb");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1420:18:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
          file = fopen(nextarg, "rb");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1476:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(config->postfields, oldpost, (size_t)oldlen);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1479:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(&config->postfields[oldlen + 1], postdata, size);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1767:38:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        FILE *file = use_stdin?stdin:fopen(&nextarg[1], FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1974:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buffer[32];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:2111:18:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
          file = fopen(nextarg, FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getpass.c:232:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  int fd = open("/dev/tty", O_RDONLY);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_help.c:601:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char *featp[ sizeof(feats) / sizeof(feats[0]) + 1];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_help.c:607:29:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        featp[numfeat++] = (char *)feats[i].name;
/home/capstone/Desktop/root/curl-7.68.0/src/tool_homedir.c:36:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char  buf1[1024], buf2[1024];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_main.c:110:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char fname[CURL_MT_LOGFNAME_BUFSIZE];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:141:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:159:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void SHA1_Final(unsigned char digest[20], SHA_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:177:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void SHA256_Final(unsigned char digest[32], SHA256_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:197:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:199:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(digest, gcry_md_read(*ctx, 0), 16);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:216:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void SHA1_Final(unsigned char digest[20], SHA_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:218:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(digest, gcry_md_read(*ctx, 0), 20);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:235:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void SHA256_Final(unsigned char digest[32], SHA256_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:237:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(digest, gcry_md_read(*ctx, 0), 32);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:289:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *pctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:306:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void SHA1_Final(unsigned char digest[20], SHA_CTX *pctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:323:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void SHA256_Final(unsigned char digest[32], SHA256_CTX *pctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:343:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:361:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void SHA1_Final(unsigned char digest[20], SHA_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:379:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void SHA256_Final(unsigned char digest[32], SHA256_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:416:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:437:33:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void SHA1_Final(unsigned char digest[20], SHA_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:458:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static void SHA256_Final(unsigned char digest[32], SHA256_CTX *ctx)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:573:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[3];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:610:8:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  fd = open(filename, flags);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:632:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char buf[4096];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operate.c:160:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[8192];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operate.c:166:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  file = fopen(name, "r"); /* VMS */
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operate.c:295:21:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        per->infd = open(per->uploadfile, O_RDONLY | O_BINARY);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operate.c:298:21:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        per->infd = open(per->uploadfile, O_RDONLY | O_BINARY,
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operate.c:304:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      per->infd = open(per->uploadfile, O_RDONLY | O_BINARY);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operate.c:875:29:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            FILE *newfile = fopen(config->headerfile, "wb");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operate.c:901:29:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            FILE *newfile = fopen(config->etag_save_file, "wb");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operate.c:929:24:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
          FILE *file = fopen(config->etag_compare_file, FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operate.c:1084:26:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            FILE *file = fopen(outfile, "ab",
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operate.c:1088:26:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            FILE *file = fopen(per->outfile, "ab");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operate.h:54:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char errorbuffer[CURL_ERROR_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operhlp.c:185:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buffer[512]; /* suitably large */
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:66:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:482:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char passwd[256] = "";
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:483:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char prompt[256];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:517:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&passptr[userlen + 1], passwd, passwdlen + 1);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_parsecfg.c:47:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char filebuffer[512];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_parsecfg.c:63:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        return fopen(filebuffer, FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_parsecfg.c:110:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        file = fopen(pathalloc, FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_parsecfg.c:131:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      file = fopen(filename, FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_parsecfg.c:342:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[4096];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_progress.c:119:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(r, "--:--:--");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_progress.c:185:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char time_left[10];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_progress.c:186:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char time_total[10];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_progress.c:187:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char time_spent[10];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_progress.c:188:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[3][6];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_progress.c:190:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char dlpercen[4]="--";
/home/capstone/Desktop/root/curl-7.68.0/src/tool_progress.c:191:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char ulpercen[4]="--";
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:241:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(e, "\\n");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:245:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(e, "\\r");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:249:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(e, "\\t");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:253:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(e, "\\\\");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:257:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(e, "\\\"");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:318:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char preamble[80];          /* should accommodate any symbol name */
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:361:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char preamble[80];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:465:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(cp, part->data, size + 1);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:627:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[256];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_strdup.c:42:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(newstr, str, (len + 1)*sizeof(char));
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:54:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(pat->content.Set.elements[0], fixed, len);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:373:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy(buf, pattern, skip);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:462:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char text[512];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:607:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char numbuf[18];
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:694:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(&target[stringlen], appendthis, appendlen);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/chkdecimalpoint.c:32:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char zero[TOTAL_STR_LEN] = {'\0'};
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/chkhostname.c:30:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buff[HOSTNAME_MAX];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/first.c:94:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char fname[CURL_MT_LOGFNAME_BUFSIZE];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/first.c:121:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char dump[200 * 3 + 1];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1156.c:89:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char urlbuf[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1502.c:48:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char redirect[160];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1506.c:39:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char target_url[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1506.c:40:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dnsentry[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1510.c:37:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char target_url[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1510.c:38:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dnsentry[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1512.c:41:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dnsentry[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1512.c:44:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char target_url[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1515.c:122:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dns_entry[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1515.c:135:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char target_url[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1517.c:48:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ptr, pooh->readptr, tocopy);/* copy requested data */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1520.c:63:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, data, len);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1522.c:30:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char g_Data[40 * 1024]; /* POST 40KB */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1523.c:60:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[CURL_ERROR_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1525.c:42:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ptr, data, strlen(data));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1526.c:41:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ptr, data, strlen(data));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1527.c:41:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ptr, data, strlen(data));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1529.c:31:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char bURL[512];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1555.c:39:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1560.c:48:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1560.c:637:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buf[80];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1560.c:638:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char part[80];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1560.c:639:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char value[80];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1560.c:640:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(buf, p, n);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1591.c:49:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ptr, data, amount);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1900.c:33:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char *urlstring[MAX_URLS];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1900.c:35:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char *site_blacklist[MAX_BLACKLIST];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1900.c:36:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char *server_blacklist[MAX_BLACKLIST];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1900.c:55:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[200];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1900.c:61:7:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  f = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1900.c:114:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char urlbuf[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1906.c:34:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error_buffer[CURL_ERROR_SIZE] = "";
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1907.c:33:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char error_buffer[CURL_ERROR_SIZE] = "";
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib500.c:97:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      FILE *moo = fopen(libtest_arg2, "wb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib505.c:55:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  hd_src = fopen(libtest_arg2, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib510.c:55:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, data, len);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib518.c:53:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char msgbuff[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib518.c:85:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    fpa[i] = fopen(DEV_NULL, FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib518.c:106:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char strbuff[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib518.c:107:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char strbuff1[81];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib518.c:108:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char strbuff2[81];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib518.c:132:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(strbuff, "INFINITY");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib518.c:140:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(strbuff, "INFINITY");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib518.c:198:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(strbuff, "INFINITY");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib518.c:206:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(strbuff, "INFINITY");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib518.c:324:11:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  fd[0] = open(DEV_NULL, O_RDONLY);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib525.c:55:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  hd_src = fopen(libtest_arg2, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib530.c:39:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char target_url[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib537.c:54:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char msgbuff[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib537.c:86:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    fpa[i] = fopen(DEV_NULL, FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib537.c:108:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char strbuff[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib537.c:109:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char strbuff1[81];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib537.c:133:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(strbuff, "INFINITY");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib537.c:141:5:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
    strcpy(strbuff, "INFINITY");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib537.c:193:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(strbuff, "INFINITY");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib537.c:201:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy(strbuff, "INFINITY");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib537.c:318:11:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  fd[0] = open(DEV_NULL, O_RDONLY);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib540.c:189:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[246]; /* naively fixed-size */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib541.c:47:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  hd_src = fopen(libtest_arg2, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib544.c:73:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
  strcpy(teststring, "FAIL");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib552.c:127:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char databuf[70000]; /* MUST be more than 64k OR
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib552.c:137:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ptr, databuf + current_offset, given);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib553.c:36:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char buf[1024];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib553.c:48:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(ptr, buf, size);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib553.c:56:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char buf[SIZE_HEADERS + 100];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib556.c:81:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char buf[1024];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:67:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char result[BUFSZ];   /* result string   */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:74:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char result[BUFSZ];   /* result string   */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:81:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char result[BUFSZ];   /* result string   */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:88:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char result[BUFSZ];   /* result string   */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:95:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char result[BUFSZ];   /* result string   */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:102:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char result[BUFSZ];   /* result string   */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:109:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char result[BUFSZ];   /* result string   */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:1415:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:1448:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:1553:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[512]; /* larger than max float size */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib566.c:54:11:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    moo = fopen(libtest_arg2, "wb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib568.c:79:9:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  sdp = open("log/file568.txt", O_RDONLY);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib568.c:83:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  sdpf = fopen("log/file568.txt", "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib569.c:43:18:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *idfile = fopen(libtest_arg2, "wb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib571.c:108:21:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *protofile = fopen(libtest_arg2, "wb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib572.c:98:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  params = open("log/file572.txt", O_RDONLY);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib572.c:102:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  paramsf = fopen("log/file572.txt", "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib578.c:34:15:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *moo = fopen(libtest_arg2, "wb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib579.c:55:17:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    FILE *moo = fopen(libtest_arg2, "ab");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib579.c:79:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(ptr, data, len);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib582.c:244:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  hd_src = fopen(libtest_arg2, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib591.c:48:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  upload = fopen(libtest_arg3, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib599.c:83:11:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    moo = fopen(libtest_arg2, "wb");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib650.c:64:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char flbuf[32];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib651.c:26:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char buffer[17000]; /* more than 16K */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib652.c:26:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char buffer[17000]; /* more than 16K */
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/stub_gssapi.c:63:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char creds[MAX_CREDS_LENGTH];
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/testtrace.c:93:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char timebuf[20];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/fake_ntlm.c:112:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[1024];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/fake_ntlm.c:113:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char logfilename[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/fake_ntlm.c:190:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  stream = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/fake_ntlm.c:208:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  stream = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/fake_ntlm.c:228:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      stream = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/fake_ntlm.c:250:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      stream = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:93:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(convbuf, indata, insize);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:212:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(*dst_buf + *dst_len, src_buf, src_len);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:247:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(*buf, buf64, src_len);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:282:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char couter[MAX_TAG_LEN + 1]; /* current outermost section */
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:283:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char cmain[MAX_TAG_LEN + 1];  /* current main section */
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:284:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char csub[MAX_TAG_LEN + 1];   /* current sub section */
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:285:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char ptag[MAX_TAG_LEN + 1];   /* potential tag */
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:286:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char patt[MAX_TAG_LEN + 1];   /* potential attributes */
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:346:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(ptag, ptr, len.uns);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:408:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(ptag, ptr, len.uns);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:428:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy(patt, ptr, len.uns);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:98:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char reqbuf[REQBUFSIZ]; /* buffer area for the incoming request */
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:103:8:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  bool open;      /* keep connection open info, as found in the request */
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:340:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char request[REQUEST_KEYWORD_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:341:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char doc[MAXDOCNAMELEN];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:342:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char prot_str[5];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:360:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char logbuf[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:425:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      stream = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:505:19:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                  memcpy(rtp_scratch + 4 + i, RTP_DATA, RTP_DATA_SIZE);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:516:19:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                  memcpy(req->rtp_buffer + req->rtp_buffersize, rtp_scratch,
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:689:11:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
     req->open &&
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:745:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    dump = fopen(REQUEST_DUMP, "ab");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:910:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char weare[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:940:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char msgbuf[64];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:985:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char partbuf[80]="data";
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:990:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    stream = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:1014:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    stream = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:1055:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  dump = fopen(RESPONSE_DUMP, "ab");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:1139:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char command[32];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:1423:15:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      if(!req.open) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:1428:14:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      if(req.open)
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:1431:17:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    } while(req.open || (req.testno == DOCNUMBER_CONNECT));
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sockfilt.c:479:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char data[120];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sockfilt.c:927:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buffer[17010];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sockfilt.c:928:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char data[16];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:121:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char addr[32]; /* backend IPv4 numerical */
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:122:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char user[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:123:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char password[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:159:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
  strcpy(config.user, "user");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:160:3:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
  strcpy(config.password, "password");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:177:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *fp = fopen(configfile, FOPEN_READTEXT);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:180:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buffer[512];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:183:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char key[32];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:184:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char value[32];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:352:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char data[1200];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:421:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char response[256 + 16];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:452:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&response[2], &buffer[SOCKS4_DSTPORT], 6);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:473:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buffer[256 + 16];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:474:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char response[256 + 16];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:675:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&response[SOCKS5_BNDADDR], address, len);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:678:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(&response[SOCKS5_BNDADDR + len],
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:711:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[512];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:1036:39:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
        backendport = (unsigned short)atoi(argv[arg++]);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:98:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char reqbuf[REQBUFSIZ]; /* buffer area for the incoming request */
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:105:8:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  bool open;      /* keep connection open info, as found in the request */
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:372:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  stream = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:465:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char request[REQUEST_KEYWORD_SIZE];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:466:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char doc[MAXDOCNAMELEN];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:467:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char logbuf[456];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:837:11:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if(req->open &&
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:890:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    dump = fopen(dumpfile, "ab");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1047:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char weare[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1075:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char msgbuf[64];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1105:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char partbuf[80];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1119:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    stream = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1142:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    stream = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1182:10:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  dump = fopen(responsedump, "ab");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1257:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char command[32];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1419:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char readclient[2][256];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1420:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char readserver[2][256];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1919:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if(!req->open) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1944:11:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  if(req->open) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1971:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char port_str[11];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:2318:21:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            if(!req.open)
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftp.h:45:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char th_data[1];         /* data or error string */
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:128:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char storage[PKTSIZE];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:498:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(dp->th_data, test->rptr, copy_n);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:571:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char outfile[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:574:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    test->ofile = open(outfile, O_CREAT|O_RDWR|O_BINARY, 0777);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:576:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    test->ofile = open(outfile, O_CREAT|O_RDWR, 0777);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:638:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char rbuf[PKTSIZE];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:965:18:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  FILE *server = fopen(REQUEST_DUMP, "ab");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:1075:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  stream = fopen(filename, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:1143:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char weare[128];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:1159:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char partbuf[80]="data";
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:1193:22:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      FILE *stream = fopen(file, "rb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:1428:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(tp->th_msg, pe->e_msg, length + 1);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/util.c:78:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char buf[256*3];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/util.c:102:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buffer[2048 + 1];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/util.c:107:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char timebuf[20];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/util.c:132:11:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  logfp = fopen(serverlogfile, "ab");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/util.c:150:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[512];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/util.c:199:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char filename[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/server/util.c:267:13:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  pidfile = fopen(filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/tests/server/util.c:285:16:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    lockfile = fopen(filename, "wb");
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1304.c:28:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char filename[64];
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1304.c:54:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(filename, filename1, strlen(filename1));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1398.c:32:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char buf[3] = {'b', 'u', 'g'};
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1398.c:35:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char output[24];
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1399.c:65:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char msg[64];
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1600.c:50:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char output[21];
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1601.c:39:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char output[16];
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1607.c:53:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  const char *address[10];
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1607.c:143:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char ipaddress[MAX_IPADR_LEN] = {0};
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1609.c:53:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  const char *address[10];
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1609.c:151:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char ipaddress[MAX_IPADR_LEN] = {0};
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1621.c:74:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    url = (char *)tests[i].input;
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1650.c:156:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buffer[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1650.c:176:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
             hexdump((unsigned char *)req[i].packet, size));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1650.c:188:31:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    rc = doh_decode((unsigned char *)resp[i].packet, resp[i].size,
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1650.c:231:31:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    if(resp[i].out && strcmp((char *)buffer, resp[i].out)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1652.c:35:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char input[4096];
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1652.c:36:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char result[4096];
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1652.c:55:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(result, buf, size);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1654.c:49:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char outname[256];
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1655.c:86:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    unsigned char dohbuffer[255 + 16]; /* deliberately short buffer */
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1655.c:140:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char buffer[128];
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/anyauthput.c:89:13:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  retcode = read(fd, ptr, (READ_3RD_ARG)(size * nmemb));
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/asiohiper.cpp:350:3:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
  strncpy(pBuffer, (const char *)ptr, written);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/crawler.c:130:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(!link || strlen(link) < 20)
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/crawler.c:145:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  return ctype != NULL && strlen(ctype) > 10 && strstr(ctype, "text/html");
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/curlx.c:452:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(hostporturl) + 9;
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/curlx.c:495:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  contenttype = malloc(15 + strlen(mimetype));
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/curlx.c:496:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  snprintf(contenttype, 15 + strlen(mimetype), "Content-type: %s", mimetype);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ephiperfifo.c:225:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  err = read(g->tfd, &count, sizeof(uint64_t));
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ephiperfifo.c:400:10:  [1] (buffer) fscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
    rv = fscanf(g->input, "%1023s%n", s, &n);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/evhiperfifo.c:379:10:  [1] (buffer) fscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
    rv = fscanf(g->input, "%1023s%n", s, &n);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/fopen.c:485:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    fwrite(buffer, 1, strlen(buffer), outf);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/ftpuploadfrommem.c:75:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  upload.sizeleft = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/hiperfifo.c:371:10:  [1] (buffer) fscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
    rv = fscanf(g->input, "%1023s%n", s, &n);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/imap-append.c:74:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/imap-append.c:115:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      infilesize += (long)strlen(*p);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/post-callback.c:72:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  wt.sizeleft = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/postinmemory.c:86:57:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, (long)strlen(postthis));
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:53:8:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  ch = getchar();
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:221:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    char *uri = malloc(strlen(url) + 32);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:222:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    char *sdp_filename = malloc(strlen(url) + 32);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:223:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    char *control = malloc(strlen(url) + 32);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:225:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    get_sdp_filename(url, sdp_filename, strlen(url) + 32);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:246:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        snprintf(uri, strlen(url) + 32, "%s", url);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:256:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        snprintf(uri, strlen(url) + 32, "%s/%s", url, control);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/rtsp.c:260:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        snprintf(uri, strlen(url) + 32, "%s/", url);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/sendrecv.c:64:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t request_len = strlen(request);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/simplepost.c:44:57:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, (long)strlen(postthis));
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/smtp-authzid.c:82:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/smtp-mail.c:79:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/smtp-multi.c:76:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/smtp-ssl.c:76:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/smtp-tls.c:76:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:154:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if(strlen((char *)(ptr)) > 50) /* Can prevent buffer overflow to
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:192:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(strlen(proxy_port) > 0)
/home/capstone/Desktop/root/curl-7.68.0/docs/examples/synctime.c:195:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(strlen(proxy_user_password) > 0)
/home/capstone/Desktop/root/curl-7.68.0/lib/base64.c:118:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  srclen = strlen(src);
/home/capstone/Desktop/root/curl-7.68.0/lib/base64.c:195:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    insize = strlen(indata);
/home/capstone/Desktop/root/curl-7.68.0/lib/base64.c:273:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  *outlen = strlen(base64data);
/home/capstone/Desktop/root/curl-7.68.0/lib/conncache.c:207:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    bundle = Curl_hash_pick(&connc->hash, key, strlen(key));
/home/capstone/Desktop/root/curl-7.68.0/lib/conncache.c:217:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  void *p = Curl_hash_add(&connc->hash, key, strlen(key), bundle);
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:273:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(dev && (strlen(dev)<255) ) {
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:281:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(strncmp(if_prefix, dev, strlen(if_prefix)) == 0) {
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:282:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      dev += strlen(if_prefix);
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:285:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    else if(strncmp(host_prefix, dev, strlen(host_prefix)) == 0) {
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:286:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      dev += strlen(host_prefix);
/home/capstone/Desktop/root/curl-7.68.0/lib/connect.c:309:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    dev, (curl_socklen_t)strlen(dev) + 1) == 0) {
/home/capstone/Desktop/root/curl-7.68.0/lib/content_encoding.c:772:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      len += strlen(ce->name) + 2;
/home/capstone/Desktop/root/curl-7.68.0/lib/content_encoding.c:785:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        p += strlen(p);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:121:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t cookie_domain_len = strlen(cooke_domain);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:122:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t hostname_len = strlen(hostname);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:179:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  cookie_path_len = strlen(cookie_path);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:193:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(0 == strlen(uri_path) || uri_path[0] != '/') {
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:209:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  uri_path_len = strlen(uri_path);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:252:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(domain);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:308:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(new_path);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:467:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t linelength = strlen(lineptr);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:492:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t len = strlen(what);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:493:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t nlen = strlen(name);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:1001:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              cllen = strlen(clist->spath);
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:1190:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  l1 = c1->path ? strlen(c1->path) : 0;
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:1191:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  l2 = c2->path ? strlen(c2->path) : 0;
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:1197:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  l1 = c1->domain ? strlen(c1->domain) : 0;
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:1198:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  l2 = c2->domain ? strlen(c2->domain) : 0;
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:1204:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  l1 = c1->name ? strlen(c1->name) : 0;
/home/capstone/Desktop/root/curl-7.68.0/lib/cookie.c:1205:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  l2 = c2->name ? strlen(c2->name) : 0;
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_addrinfo.c:516:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  path_len = strlen(path) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_get_line.c:40:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t rlen = strlen(b);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_gethostname.c:69:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(name, force_hostname, namelen);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:450:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = CURLMIN(strlen(password), 14);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_core.c:539:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(password);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_wb.c:260:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len_in = strlen(input), len_out = 0;
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_ntlm_wb.c:345:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  header += strlen("NTLM");
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:64:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t homelen = strlen(homedir);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:132:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  fullPathLength = strlen(cp) + strlen(homedir) + 2;
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:132:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  fullPathLength = strlen(cp) + strlen(homedir) + 2;
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:142:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    for(i = j = 0; i <= strlen(cp); i++) {
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_path.c:182:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      pathLength = strlen(homedir);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_sasl.c:390:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
       strlen(mech) + len > sasl->params->maxirlen) {
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_setup_once.h:130:31:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define sread(x,y,z) (ssize_t)read((RECV_TYPE_ARG1)(x), \
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_sspi.c:180:39:  [1] (buffer) _tcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  identity->UserLength = curlx_uztoul(_tcslen(dup_user.tchar_ptr));
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_sspi.c:189:3:  [1] (buffer) _tcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
  _tcsncpy(dup_domain.tchar_ptr, domain.tchar_ptr, domlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/curl_sspi.c:207:43:  [1] (buffer) _tcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  identity->PasswordLength = curlx_uztoul(_tcslen(dup_passwd.tchar_ptr));
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.c:85:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  const size_t hostlen = strlen(host);
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.c:143:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      labellen = strlen(hostp);
/home/capstone/Desktop/root/curl-7.68.0/lib/doh.c:796:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        l = strlen(ptr);
/home/capstone/Desktop/root/curl-7.68.0/lib/dotdot.c:55:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t inlen = strlen(input);
/home/capstone/Desktop/root/curl-7.68.0/lib/dotdot.c:176:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    qlen = strlen(&input[oindex]);
/home/capstone/Desktop/root/curl-7.68.0/lib/escape.c:93:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  alloc = (inlength?(size_t)inlength:strlen(string)) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/escape.c:152:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t alloc = (length?length:strlen(string)) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/file.c:517:13:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    nread = read(fd, buf, bytestoread);
/home/capstone/Desktop/root/curl-7.68.0/lib/formdata.c:83:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    post->namelength = (long)(name?(namelength?namelength:strlen(name)):0);
/home/capstone/Desktop/root/curl-7.68.0/lib/formdata.c:608:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                   strlen(form->name) + 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/formdata.c:622:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          clen = strlen(form->value) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:954:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
     (strlen(data->set.str[STRING_FTPPORT]) > 1)) {
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:957:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t addrlen = INET6_ADDRSTRLEN > strlen(string_ftpport) ?
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:958:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      INET6_ADDRSTRLEN : strlen(string_ftpport);
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:960:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t addrlen = INET_ADDRSTRLEN > strlen(string_ftpport) ?
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:961:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      INET_ADDRSTRLEN : strlen(string_ftpport);
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:978:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(addr, ip_start, ip_end - ip_start);
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:1000:13:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
            strncpy(addr, string_ftpport, ip_end - ip_start);
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:3207:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          pathLen -= ftpc->file?strlen(ftpc->file):0; /* file is url-decoded */
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:3955:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  write_len = strlen(cmd);
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:4140:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(ftpc->dirs[0], rawPath, dirlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:4183:13:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
            strncpy(comp, curPos, compLen);
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:4219:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        n -= ftpc->file?strlen(ftpc->file):0;
/home/capstone/Desktop/root/curl-7.68.0/lib/ftp.c:4221:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if((strlen(oldPath) == n) && !strncmp(rawPath, oldPath, n)) {
/home/capstone/Desktop/root/curl-7.68.0/lib/gopher.c:103:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(strlen(gopherpath) <= 2) {
/home/capstone/Desktop/root/curl-7.68.0/lib/gopher.c:105:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(sel);
/home/capstone/Desktop/root/curl-7.68.0/lib/hostcheck.c:76:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(hostname);
/home/capstone/Desktop/root/curl-7.68.0/lib/hostcheck.c:79:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(pattern);
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:175:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(name);
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:270:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  entry_len = strlen(entry_id);
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:278:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    entry_len = strlen(entry_id);
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:443:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  entry_len = strlen(entry_id);
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:858:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      entry_len = strlen(entry_id);
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:910:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          addr_end = addr_begin + strlen(addr_begin);
/home/capstone/Desktop/root/curl-7.68.0/lib/hostip.c:968:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      entry_len = strlen(entry_id);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:205:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t thislen = strlen(thisheader);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:309:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  result = Curl_base64_encode(data, out, strlen(out), &authorization, &size);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1331:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    CURLcode result = Curl_add_buffer(inp, s, strlen(s));
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1419:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t hlen = strlen(header);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1447:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  clen = strlen(content); /* length of the word to find */
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1761:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                           strlen(endofline_network));
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:1966:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  result = Curl_add_buffer(&req_buffer, datestr, strlen(datestr));
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:2302:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        memmove(cookiehost, cookiehost + 1, strlen(cookiehost) - 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:2422:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          if(!*data->state.up.path && path[strlen(path) - 1] != '/') {
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:2584:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    result = Curl_add_buffer(&req_buffer, url, strlen(url));
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:2594:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    result = Curl_add_buffer(&req_buffer, path, strlen(path));
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:3088:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t ch = CURLMIN(strlen(prefix), len);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:3111:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(CURLE_OK != Curl_convert_from_network(data, scratch, strlen(s) + 1)) {
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:3151:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(CURLE_OK != Curl_convert_from_network(data, scratch, strlen(s) + 1)) {
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:3677:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy(&scratch[0], k->p, SCRATCHSIZE);
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:3849:52:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    result = Curl_convert_from_network(data, k->p, strlen(k->p));
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:4035:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      k->timeofdoc = Curl_getdate_capped(k->p + strlen("Last-Modified:"));
/home/capstone/Desktop/root/curl-7.68.0/lib/http.c:4114:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                 &k->p[ strlen("Alt-Svc:") ],
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:456:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(header);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:1959:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[0].namelen = strlen((char *)nva[0].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:1981:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[1].namelen = strlen((char *)nva[1].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:1991:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[2].namelen = strlen((char *)nva[2].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:1996:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[2].valuelen = strlen((char *)nva[2].value);
/home/capstone/Desktop/root/curl-7.68.0/lib/http2.c:2029:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      nva[i].namelen = strlen((char *)nva[i].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/http_digest.c:64:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  header += strlen("Digest");
/home/capstone/Desktop/root/curl-7.68.0/lib/http_negotiate.c:81:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  header += strlen("Negotiate");
/home/capstone/Desktop/root/curl-7.68.0/lib/http_negotiate.c:85:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(header);
/home/capstone/Desktop/root/curl-7.68.0/lib/http_ntlm.c:76:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    header += strlen("NTLM");
/home/capstone/Desktop/root/curl-7.68.0/lib/http_proxy.c:531:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                  strlen("Content-Length:"), NULL, 10, &s->cl);
/home/capstone/Desktop/root/curl-7.68.0/lib/idn_win32.c:96:21:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t in_len = wcslen(in_w) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/if2ip.c:200:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(interf);
/home/capstone/Desktop/root/curl-7.68.0/lib/imap.c:209:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t cmd_len = strlen(cmd);
/home/capstone/Desktop/root/curl-7.68.0/lib/imap.c:250:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t id_len = strlen(id);
/home/capstone/Desktop/root/curl-7.68.0/lib/imap.c:348:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(buffer);
/home/capstone/Desktop/root/curl-7.68.0/lib/imap.c:1029:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(line);
/home/capstone/Desktop/root/curl-7.68.0/lib/imap.c:1439:3:  [1] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant character.
  strcpy(imapc->resptag, "*");
/home/capstone/Desktop/root/curl-7.68.0/lib/imap.c:1809:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  newlen = strlen(str) + backsp_count + quote_count + (escape_only ? 0 : 2);
/home/capstone/Desktop/root/curl-7.68.0/lib/inet_ntop.c:64:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(tmp);
/home/capstone/Desktop/root/curl-7.68.0/lib/inet_ntop.c:148:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      tp += strlen(tp);
/home/capstone/Desktop/root/curl-7.68.0/lib/krb5.c:202:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    input_buffer.length = strlen(stringp);
/home/capstone/Desktop/root/curl-7.68.0/lib/ldap.c:531:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      name_len = strlen(name);
/home/capstone/Desktop/root/curl-7.68.0/lib/ldap.c:591:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      attr_len = strlen(attr);
/home/capstone/Desktop/root/curl-7.68.0/lib/md5.c:521:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  MD5_Update(&ctx, input, curlx_uztoui(strlen((char *)input)));
/home/capstone/Desktop/root/curl-7.68.0/lib/memdebug.c:227:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(str) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/memdebug.c:251:10:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  wsiz = wcslen(str) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:315:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(hdr);
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:720:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t tsz = strlen(trail);
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:844:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                            hdr->data, strlen(hdr->data), "\r\n");
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:946:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                          strlen(mime->boundary), part? "\r\n": "--\r\n");
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:1316:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      datasize = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:1544:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t skiplen = skip? strlen(skip): 0;
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:1548:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size += strlen(s->data) + overhead;
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:1562:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  boundarysize = 4 + strlen(mime->boundary) + 2;
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:1656:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len1 = strlen(filename);
/home/capstone/Desktop/root/curl-7.68.0/lib/mime.c:1661:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len2 = strlen(ctts[i].extension);
/home/capstone/Desktop/root/curl-7.68.0/lib/mprintf.c:827:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          len = strlen(str);
/home/capstone/Desktop/root/curl-7.68.0/lib/mprintf.c:885:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t left = sizeof(formatbuf)-strlen(formatbuf);
/home/capstone/Desktop/root/curl-7.68.0/lib/mprintf.c:950:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        DEBUGASSERT(strlen(work) <= sizeof(work));
/home/capstone/Desktop/root/curl-7.68.0/lib/openldap.c:294:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      passwd.bv_len = strlen(passwd.bv_val);
/home/capstone/Desktop/root/curl-7.68.0/lib/parsedate.c:360:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen(buf);
/home/capstone/Desktop/root/curl-7.68.0/lib/pingpong.c:197:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  write_len = strlen(s);
/home/capstone/Desktop/root/curl-7.68.0/lib/pop3.c:246:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(buffer);
/home/capstone/Desktop/root/curl-7.68.0/lib/pop3.c:433:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(pop3c->apoptimestamp)));
/home/capstone/Desktop/root/curl-7.68.0/lib/pop3.c:436:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(conn->passwd)));
/home/capstone/Desktop/root/curl-7.68.0/lib/pop3.c:610:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(line);
/home/capstone/Desktop/root/curl-7.68.0/lib/pop3.c:669:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(line);
/home/capstone/Desktop/root/curl-7.68.0/lib/rand.c:51:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t elen = strlen(force_entropy);
/home/capstone/Desktop/root/curl-7.68.0/lib/rand.c:80:23:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
      ssize_t nread = read(fd, &randseed, sizeof(randseed));
/home/capstone/Desktop/root/curl-7.68.0/lib/rtsp.c:510:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        (data->set.postfields? (curl_off_t)strlen(data->set.postfields):0);
/home/capstone/Desktop/root/curl-7.68.0/lib/rtsp.c:793:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                 strlen(data->set.str[STRING_RTSP_SESSION_ID]))  != 0) {
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:246:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      len = strlen(fmt);
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:253:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(print_buffer);
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:270:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(error);
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:303:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  write_len = strlen(s);
/home/capstone/Desktop/root/curl-7.68.0/lib/sendf.c:664:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(ptr);
/home/capstone/Desktop/root/curl-7.68.0/lib/setopt.c:65:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen(str);
/home/capstone/Desktop/root/curl-7.68.0/lib/setopt.c:89:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    result = Curl_parse_login_details(option, strlen(option),
/home/capstone/Desktop/root/curl-7.68.0/lib/setopt.c:2566:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
       strncasecompare(argptr, "SRP", strlen("SRP")))
/home/capstone/Desktop/root/curl-7.68.0/lib/setopt.c:2574:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
       strncasecompare(argptr, "SRP", strlen("SRP")))
/home/capstone/Desktop/root/curl-7.68.0/lib/sha256.c:263:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  SHA256_Update(&ctx, input, curlx_uztoui(strlen((char *)input)));
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:128:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  p += strlen(str);
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:133:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  p += strlen(str) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:440:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  byte_count += strlen(smbc->user) + strlen(smbc->domain);
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:440:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  byte_count += strlen(smbc->user) + strlen(smbc->domain);
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:441:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  byte_count += strlen(OS) + strlen(CLIENTNAME) + 4; /* 4 null chars */
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:441:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  byte_count += strlen(OS) + strlen(CLIENTNAME) + 4; /* 4 null chars */
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:485:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t byte_count = strlen(conn->host.name) + strlen(smbc->share);
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:485:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t byte_count = strlen(conn->host.name) + strlen(smbc->share);
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:486:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  byte_count += strlen(SERVICENAME) + 5; /* 2 nulls and 3 backslashes */
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:512:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if((strlen(req->path) + 1) > sizeof(msg.bytes))
/home/capstone/Desktop/root/curl-7.68.0/lib/smb.c:518:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  byte_count = strlen(req->path);
/home/capstone/Desktop/root/curl-7.68.0/lib/smtp.c:239:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(buffer);
/home/capstone/Desktop/root/curl-7.68.0/lib/smtp.c:705:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(line);
/home/capstone/Desktop/root/curl-7.68.0/lib/smtp.c:853:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(line);
/home/capstone/Desktop/root/curl-7.68.0/lib/socketpair.c:103:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  dlen = strlen(data[0]);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:210:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t plen = strlen(proxy_user);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:228:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      strlen((char *)socksreq + 8); /* size including NUL */
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:237:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      hostnamelen = (ssize_t)strlen(hostname) + 1; /* length including NUL */
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:254:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      hostnamelen = (ssize_t)strlen(hostname) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:390:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  const size_t hostname_len = strlen(hostname);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:515:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      proxy_user_len = strlen(proxy_user);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:516:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      proxy_password_len = strlen(proxy_password);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks.c:637:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t destlen = strlen(dest);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:126:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  const size_t serviceptr_length = strlen(serviceptr);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:149:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                           strlen(conn->socks_proxy.host.name) + 2);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_gssapi.c:153:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      strlen(conn->socks_proxy.host.name) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:90:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  const size_t service_length = strlen(service);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:108:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                          strlen(conn->socks_proxy.host.name) + 2);
/home/capstone/Desktop/root/curl-7.68.0/lib/socks_sspi.c:112:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              strlen(conn->socks_proxy.host.name) + 2, "%s/%s",
/home/capstone/Desktop/root/curl-7.68.0/lib/strcase.h:47:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#define checkprefix(a,b)    curl_strnequal(a,b,strlen(a))
/home/capstone/Desktop/root/curl-7.68.0/lib/strdup.c:42:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(str);
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:633:3:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
  strncpy(buf, p, len);
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:731:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(buf, strerror(err), max);
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:764:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy(buf, msg, max);
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:776:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy(buf, buffer, max);
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:784:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy(buf, msg, max);
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:837:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(buf, txt, buflen);
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:979:7:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
      strncpy(buf, txtbuf, buflen);
/home/capstone/Desktop/root/curl-7.68.0/lib/strerror.c:989:3:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
  strncpy(buf, txt, buflen);
/home/capstone/Desktop/root/curl-7.68.0/lib/system_win32.c:408:28:  [1] (buffer) _tcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t filenamelen = _tcslen(filename);
/home/capstone/Desktop/root/curl-7.68.0/lib/system_win32.c:412:24:  [1] (buffer) _tcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        _tcscpy(path + _tcslen(path), TEXT("\\"));
/home/capstone/Desktop/root/curl-7.68.0/lib/system_win32.c:413:24:  [1] (buffer) _tcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        _tcscpy(path + _tcslen(path), filename);
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:844:8:  [1] (buffer) sscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
    if(sscanf(head->data, "%127[^= ]%*[ =]%255s",
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:849:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(tn->subopt_ttype, option_arg, 31);
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:857:9:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        strncpy(tn->subopt_xdisploc, option_arg, 127);
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:937:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      len = strlen(tn->subopt_ttype) + 4 + 2;
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:949:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      len = strlen(tn->subopt_xdisploc) + 4 + 2;
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:967:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t tmplen = (strlen(v->data) + 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:970:14:  [1] (buffer) sscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
          if(sscanf(v->data, "%127[^,],%127s", varname, varval)) {
/home/capstone/Desktop/root/curl-7.68.0/lib/telnet.c:1649:19:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
          nread = read(pfd[1].fd, buf, data->set.buffer_size);
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:328:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  *value = &buf[strlen(*option) + 1];
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:409:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(( strlen(option) + *csize + 1) > (size_t)state->blksize)
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:412:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  *csize += strlen(option) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:493:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(strlen(filename) > (state->blksize - strlen(mode) - 4)) {
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:493:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(strlen(filename) > (state->blksize - strlen(mode) - 4)) {
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:502:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sbytes = 4 + strlen(filename) + strlen(mode);
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:502:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sbytes = 4 + strlen(filename) + strlen(mode);
/home/capstone/Desktop/root/curl-7.68.0/lib/tftp.c:512:9:  [1] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant character.
        strcpy(buf, "0"); /* the destination is large enough */
/home/capstone/Desktop/root/curl-7.68.0/lib/transfer.c:97:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t thislen = strlen(thisheader);
/home/capstone/Desktop/root/curl-7.68.0/lib/transfer.c:342:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
               strlen(endofline_network));
/home/capstone/Desktop/root/curl-7.68.0/lib/transfer.c:389:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      nread += strlen(endofline_network); /* for the added end of line */
/home/capstone/Desktop/root/curl-7.68.0/lib/transfer.c:1469:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      data->state.infilesize = (curl_off_t)strlen(data->set.postfields);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:1423:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(host->name);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:1893:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    hlen = strlen(hostname);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2021:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    no_proxy_len = strlen(no_proxy);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2031:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      namelen = strlen(name);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2284:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(host);
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2308:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(proxyuser, data->set.str[STRING_PROXYUSERNAME],
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2313:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(proxypasswd, data->set.str[STRING_PROXYPASSWORD],
/home/capstone/Desktop/root/curl-7.68.0/lib/url.c:2915:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    hostname_to_match_len = strlen(hostname_to_match);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:119:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    sep = url + strlen(url);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:122:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    query = url + strlen(url);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:396:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  urllen = strlen(url_clone);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:585:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t n = strlen(part);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:598:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t hlen = strlen(hostname);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:683:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  urllen = strlen(url);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:697:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    schemelen = strlen(schemebuf);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:763:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      memmove(path, &path[1], strlen(&path[1]) + 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:841:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(p);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:858:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    char *newp = malloc(strlen(path) * 3);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:927:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(0 == strlen(hostname) && (flags & CURLU_NO_AUTHORITY)) {
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:1129:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t hostlen = strlen(u->host);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:1130:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t alen = hostlen + 3 + strlen(u->zoneid) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:1257:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(strlen(part) > MAX_SCHEME_LEN)
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:1374:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t nalloc = strlen(part);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:1443:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t querylen = u->query ? strlen(u->query) : 0;
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:1446:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t newplen = strlen(newp);
/home/capstone/Desktop/root/curl-7.68.0/lib/urlapi.c:1464:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if(0 == strlen(newp) && (flags & CURLU_NO_AUTHORITY)) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/cleartext.c:79:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  zlen = (authzid == NULL ? 0 : strlen(authzid));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/cleartext.c:80:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  clen = strlen(authcid);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/cleartext.c:81:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  plen = strlen(passwd);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/cleartext.c:127:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t vlen = strlen(valuep);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/cram.c:61:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t chlg64len = strlen(chlg64);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/cram.c:104:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    chlglen = strlen(chlg);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/cram.c:109:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                        curlx_uztoui(strlen(passwdp)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:65:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  result = Curl_convert_to_network(a, (char *)b, strlen((const char *)b)); \
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:206:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  find_pos += strlen(key);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:276:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t chlg64len = strlen(chlg64);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:300:5:  [1] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant character.
    strcpy(realm, "");
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:412:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(userp)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:415:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(realm)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:418:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(passwdp)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:428:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(nonce)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:431:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(cnonce)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:452:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(method)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:455:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(spn)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:472:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(nonce)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:476:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(nonceCount)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:479:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(cnonce)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:482:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  curlx_uztoui(strlen(qop)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:716:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest.c:922:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  *outlen = strlen(response);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest_sspi.c:118:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(strlen(chlg64) && *chlg64 != '=') {
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest_sspi.c:303:49:  [1] (buffer) _tcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          identity->DomainLength = curlx_uztoul(_tcslen(dup_domain.tchar_ptr));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest_sspi.c:344:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t chlglen = strlen(chlg);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest_sspi.c:472:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    chlg_buf[1].cbBuffer   = curlx_uztoul(strlen((const char *) request));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest_sspi.c:475:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    chlg_buf[2].cbBuffer   = curlx_uztoul(strlen((const char *) uripath));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/digest_sspi.c:570:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    chlg_buf[1].cbBuffer   = curlx_uztoul(strlen((const char *) request));
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_gssapi.c:113:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    spn_token.length = strlen(spn);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_gssapi.c:232:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(strlen(chlg64) && *chlg64 != '=') {
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_sspi.c:301:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(strlen(chlg64) && *chlg64 != '=') {
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/krb5_sspi.c:406:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  messagelen = sizeof(outdata) + strlen(user_name) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:288:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(strlen(type2msg) && *type2msg != '=') {
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:553:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  userlen = strlen(user);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm.c:562:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    hostlen = strlen(host);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/ntlm_sspi.c:213:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(strlen(type2msg) && *type2msg != '=') {
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/oauth2.c:82:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  result = Curl_base64_encode(data, oauth, strlen(oauth), outptr, outlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/oauth2.c:119:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  result = Curl_base64_encode(data, xoauth, strlen(xoauth), outptr, outlen);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/spnego_gssapi.c:112:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    spn_token.length = strlen(spn);
/home/capstone/Desktop/root/curl-7.68.0/lib/vauth/vauth.c:136:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    valid = (p != NULL && p > user && p < user + strlen(user) - 1 ? TRUE :
/home/capstone/Desktop/root/curl-7.68.0/lib/version.c:103:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(ptr);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1281:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[0].namelen = strlen((char *)nva[0].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1299:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[1].namelen = strlen((char *)nva[1].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1305:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[2].namelen = strlen((char *)nva[2].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1310:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[2].valuelen = strlen((char *)nva[2].value);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/ngtcp2.c:1340:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      nva[i].namelen = strlen((char *)nva[i].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:390:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  olen = strlen(headers->dest);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:596:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[0].name_len = strlen((char *)nva[0].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:613:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[1].name_len = strlen((char *)nva[1].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:618:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[2].name_len = strlen((char *)nva[2].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:623:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nva[2].value_len = strlen((char *)nva[2].value);
/home/capstone/Desktop/root/curl-7.68.0/lib/vquic/quiche.c:652:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      nva[i].name_len = strlen((char *)nva[i].name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:342:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(hlen != strlen(data->set.str[STRING_SSH_HOST_PUBLIC_KEY_MD5]) ||
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:378:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    foundkey.len = strlen(base64);
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:1043:67:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        result = Curl_client_write(conn, CLIENTWRITE_HEADER, tmp, strlen(tmp));
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:1082:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if(protop->path[strlen(protop->path)-1] == '/')
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:1135:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
             (strlen(protop->path) > 1))) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:1227:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if(strlen(protop->path) > 1) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:1301:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        sshc->readdir_len = strlen(sshc->readdir_filename);
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:1332:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          sshc->readdir_currLen = strlen(sshc->readdir_longentry);
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:1393:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          sshc->readdir_len = strlen(sshc->readdir_tmp);
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:1398:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        sshc->readdir_len = strlen(sshc->readdir_link_attrs->name);
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:2501:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      Curl_debug(data, CURLINFO_HEADER_IN, tmp, strlen(tmp));
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh.c:2506:63:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    result = Curl_client_write(conn, CLIENTWRITE_HEADER, tmp, strlen(tmp));
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:99:56:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        libssh2_sftp_symlink_ex((s), (p), curlx_uztoui(strlen(p)), \
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:209:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    responses[0].length = curlx_uztoui(strlen(conn->passwd));
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:631:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(pubkey_md5 && strlen(pubkey_md5) == 32) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:729:59:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                             curlx_uztoui(strlen(conn->user)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:848:53:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                                    strlen(conn->user)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:886:54:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        curlx_uztoui(strlen(conn->user)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:888:54:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        curlx_uztoui(strlen(conn->passwd)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1027:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                                      strlen(conn->user)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1201:53:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          Curl_debug(data, CURLINFO_HEADER_IN, tmp, strlen(tmp));
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1206:67:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        result = Curl_client_write(conn, CLIENTWRITE_HEADER, tmp, strlen(tmp));
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1390:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                  curlx_uztoui(strlen(sshc->quote_path2)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1461:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                curlx_uztoui(strlen(sshc->quote_path2)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1483:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                   curlx_uztoui(strlen(sshc->quote_path1)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1485:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                   curlx_uztoui(strlen(sshc->quote_path2)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1506:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                 curlx_uztoui(strlen(sshc->quote_path1)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1525:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                  curlx_uztoui(strlen(sshc->quote_path1)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1527:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                  curlx_uztoui(strlen(sshc->quote_path2)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1550:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                 curlx_uztoui(strlen(sshc->quote_path1)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1568:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                  curlx_uztoui(strlen(sshc->quote_path1)));
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1589:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                curlx_uztoui(strlen(sshc->quote_path1)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1625:67:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        result = Curl_client_write(conn, CLIENTWRITE_HEADER, tmp, strlen(tmp));
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1653:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                curlx_uztoui(strlen(sftp_scp->path)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1670:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if(sftp_scp->path[strlen(sftp_scp->path)-1] == '/')
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1691:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                    curlx_uztoui(strlen(sftp_scp->path)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1722:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                             curlx_uztoui(strlen(sftp_scp->path)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1751:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            (strlen(sftp_scp->path) > 1))) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1860:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if(strlen(sftp_scp->path) > 1) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1884:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                 curlx_uztoui(strlen(sftp_scp->path)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1925:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                                 strlen(sftp_scp->path)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:1999:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          sshc->readdir_currLen = strlen(sshc->readdir_longentry);
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:2057:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                curlx_uztoui(strlen(sshc->readdir_linkPath)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:2137:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                             curlx_uztoui(strlen(sftp_scp->path)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vssh/libssh2.c:2162:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                curlx_uztoui(strlen(sftp_scp->path)),
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gskit.c:332:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  l = strlen(cipherlist) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gskit.c:368:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          ciphers[i].ptr += strlen(ctp->gsktoken);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gskit.c:576:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    n = read(BACKEND->remotefd, buf, sizeof(buf));
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gskit.c:1206:13:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    nread = read(conn->sock[sockindex], buf, sizeof(buf));
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/gtls.c:689:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                             strlen(hostname)) < 0))
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/mesalink.c:103:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t hostname_len = strlen(hostname);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/nss.c:476:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                (CK_ULONG)strlen(filename) + 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:255:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t linelen = strlen(line);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:401:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(buf, (error ? "Unknown error" : "No error"), size);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:439:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int klen = curlx_uztosi(strlen((char *)global_passwd));
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:1452:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                strlen(match_pattern2)) == CURLE_OK) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:1583:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          if((altlen == strlen(altptr)) &&
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:1660:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if(peer_CN && (curlx_uztosi(strlen((char *)peer_CN)) != j)) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:1674:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                           strlen((char *)peer_CN));
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:3859:11:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
          strncpy(error_buffer, SSL_ERROR_to_str(err), sizeof(error_buffer));
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/openssl.c:3945:11:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
          strncpy(error_buffer, SSL_ERROR_to_str(err), sizeof(error_buffer));
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:218:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    min(strlen(name), LONGEST_ALG_ID - 1);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:219:3:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
  strncpy(tmp, name, n);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel.c:407:6:  [1] (buffer) _tcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(_tcslen(*thumbprint) != CERT_THUMBPRINT_STR_LEN)
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:186:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  END_CERT_LEN = strlen(END_CERT);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:192:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(!begin_cert_ptr || !is_cr_or_lf(begin_cert_ptr[strlen(BEGIN_CERT)])) {
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/schannel_verify.c:393:29:  [1] (buffer) _tcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        cert_hostname_len = _tcslen(
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:214:12:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    rrtn = read(sock, currData, bytesToGo);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:1010:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  attr.length = (UInt32)strlen(label);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:1134:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    (const UInt8 *)cPath, strlen(cPath), false);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:1626:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        strlen(SSL_SET_OPTION(cert_type))) != 0)
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:1764:5:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    strlen(hostname));
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:1938:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      ssl_sessionid_len = strlen(ssl_sessionid);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:2044:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    n = read(fd, buf, sizeof(buf));
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/sectransp.c:2993:13:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    nread = read(conn->sock[sockindex], buf, sizeof(buf));
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:692:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t labellen = strlen(label);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:728:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t valuelen = strlen(value);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:849:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    pinkeylen = strlen(pinnedpubkey) + 1;
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/vtls.c:868:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if(encodedlen == strlen(begin_pos + 8) &&
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/wolfssl.c:321:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t hostname_len = strlen(hostname);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/wolfssl.c:373:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      strcpy(protocols + strlen(protocols), NGHTTP2_PROTO_VERSION_ID ",");
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/wolfssl.c:378:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    strcpy(protocols + strlen(protocols), ALPN_HTTP_1_1);
/home/capstone/Desktop/root/curl-7.68.0/lib/vtls/wolfssl.c:382:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                       (unsigned)strlen(protocols),
/home/capstone/Desktop/root/curl-7.68.0/lib/warnless.c:448:19:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  return (ssize_t)read(fd, buf, curlx_uztoui(count));
/home/capstone/Desktop/root/curl-7.68.0/lib/warnless.h:77:11:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  undef  read
/home/capstone/Desktop/root/curl-7.68.0/lib/warnless.h:78:11:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  define read(fd, buf, count)  curlx_read(fd, buf, count)
/home/capstone/Desktop/root/curl-7.68.0/lib/x509asn1.c:1209:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          if(len > 0 && (size_t)len == strlen(dnsname))
/home/capstone/Desktop/root/curl-7.68.0/lib/x509asn1.c:1267:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(strlen(dnsname) != (size_t) len)         /* Nul byte in string ? */
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:130:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    lslen = slen >= 0? slen: strlen(s) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:175:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  dlen = (size_t) (slen < 0? strlen(s): slen) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:254:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  i = strlen(aversion) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:327:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    *outlength = strlen(s);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:437:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      n += strlen(p->protocols[nproto++]);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:443:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n += strlen(p->version) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:446:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n += strlen(p->host) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:449:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n += strlen(p->ssl_version) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:452:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n += strlen(p->libz_version) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:455:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n += strlen(p->ares) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:458:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n += strlen(p->libidn) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:461:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n += strlen(p->libssh_version) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:533:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  i = MAX_CONV_EXPANSION * (strlen(s) + 1);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:559:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  i = MAX_CONV_EXPANSION * (strlen(s) + 1);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:585:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  i = MAX_CONV_EXPANSION * (strlen(s) + 1);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/ccsidcurl.c:766:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    l = strlen(forms[formx].value) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:252:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  i = strlen(s) + 1;
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:296:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        nodenamelen - 1, strlen(enodename));
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:302:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        servnamelen - 1, strlen(eservname));
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:328:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(nodename);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:339:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(servname);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:533:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    bufSize = strlen(buffer);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:950:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  i = strlen(host);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:976:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(dn);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:987:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(passwd);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1024:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(base);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1036:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    i = strlen(filter);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1056:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        i = strlen(attrs[j]);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1098:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int i = strlen(attr);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1142:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  i = strlen(cp);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1175:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  i = strlen(cp);
/home/capstone/Desktop/root/curl-7.68.0/packages/OS400/os400sys.c:1208:7:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  i = strlen(cp);
/home/capstone/Desktop/root/curl-7.68.0/packages/vms/curl_crtl_init.c:103:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    name_dsc.dsc$w_length = strlen(logname);
/home/capstone/Desktop/root/curl-7.68.0/packages/vms/curl_crtl_init.c:132:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    proc_table_dsc.dsc$w_length = strlen(proc_table);
/home/capstone/Desktop/root/curl-7.68.0/packages/vms/curl_crtl_init.c:137:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    logname_dsc.dsc$w_length = strlen(logname);
/home/capstone/Desktop/root/curl-7.68.0/packages/vms/curl_crtl_init.c:141:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    item_list[0].buflen = strlen(value);
/home/capstone/Desktop/root/curl-7.68.0/packages/vms/report_openssl_version.c:84:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      symbol_dsc.dsc$w_length = strlen(argv[2]);
/home/capstone/Desktop/root/curl-7.68.0/packages/vms/report_openssl_version.c:89:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      value_dsc.dsc$w_length = strlen(version);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_hdr.c:311:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    memmove(copy, p, strlen(p) + 1);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_prg.c:222:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if((endptr != colp) && (endptr == colp + strlen(colp)) && (num > 20) &&
/home/capstone/Desktop/root/curl-7.68.0/src/tool_cb_rea.c:43:8:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  rc = read(in->fd, buffer, sz*nmemb);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_dirhie.c:111:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  outlen = strlen(outfile);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_dirhie.c:132:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t dlen = strlen(dirbuildup);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:140:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(file_name);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:153:3:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
  strncpy(target, file_name, len);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:207:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(target);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:221:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(target);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:266:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(path);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:331:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(strlen(file_name) > PATH_MAX-1 &&
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:481:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(file_name);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:485:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(*sanitized, file_name, len + 1);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:490:6:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(strlen(file_name) > PATH_MAX-1 &&
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:495:3:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
  strncpy(fname, file_name, PATH_MAX-1);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:538:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    p_len = strlen(p);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:541:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(strlen(fname) == PATH_MAX-1) {
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:565:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t blen = strlen(base);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_doswin.c:567:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if(strlen(fname) == PATH_MAX-1) {
/home/capstone/Desktop/root/curl-7.68.0/src/tool_formparse.c:271:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          size_t size = strlen(m->data);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_formparse.c:422:13:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    int c = getc(fp);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_formparse.c:526:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      p = type + strlen(type_major) + strlen(type_minor) + 1;
/home/capstone/Desktop/root/curl-7.68.0/src/tool_formparse.c:526:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      p = type + strlen(type_major) + strlen(type_minor) + 1;
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:343:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t param_length = strlen(cert_parameter);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:372:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(certname_place, param_place, span);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:424:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if(strlen(param_place) > 0) {
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:466:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  else if(strlen(unit) > 1)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:525:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t fnam = strlen(word);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:962:16:  [1] (buffer) sscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
          rc = sscanf(p, " - %6s", lrange);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1371:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            size = strlen(postdata);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1388:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            size_t outlen = nlen + strlen(enc) + 2;
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1432:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            size = strlen(postdata);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1451:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          size = strlen(postdata);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1457:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if(convert_to_network(postdata, strlen(postdata))) {
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getparam.c:1552:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if(!config->hostpubmd5 || strlen(config->hostpubmd5) != 32)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getpass.c:91:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                   prompt, strlen(prompt));
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getpass.c:104:19:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#  define getch() getchar()
/home/capstone/Desktop/root/curl-7.68.0/src/tool_getpass.c:239:11:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  nread = read(fd, password, buflen);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_main.c:111:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(strlen(env) >= CURL_MT_LOGFNAME_BUFSIZE)
/home/capstone/Desktop/root/curl-7.68.0/src/tool_main.c:125:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if((endptr != env) && (endptr == env + strlen(env)) && (num > 0))
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:633:19:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    ssize_t len = read(fd, buf, sizeof(buf));
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:685:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(hex_digest);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_metalink.c:927:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t media_type_len = strlen(media_type);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_msgs.c:42:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t width = (79 - strlen(prefix));
/home/capstone/Desktop/root/curl-7.68.0/src/tool_msgs.c:51:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(print_buffer);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_operhlp.c:88:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(!ptr || !strlen(++ptr)) {
/home/capstone/Desktop/root/curl-7.68.0/src/tool_panykey.c:41:3:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  getchar();
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:80:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      buflen = strlen(buffer);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:163:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(str);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:189:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if((endptr != str) && (endptr == str + strlen(str))) {
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:264:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if((endptr != str) && (endptr == str + strlen(str))) {
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:457:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if((endptr != str) && (endptr == str + strlen(str)))
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:485:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t userlen = strlen(*userpwd);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_paramhlp.c:503:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    passwdlen = strlen(passwd);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_parsecfg.c:60:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      remaining = sizeof(filebuffer) - strlen(filebuffer);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_parsecfg.c:61:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if(strlen(filename) < remaining - 1) {
/home/capstone/Desktop/root/curl-7.68.0/src/tool_parsecfg.c:190:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        param = malloc(strlen(line) + 1); /* parameter */
/home/capstone/Desktop/root/curl-7.68.0/src/tool_parsecfg.c:356:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t linelen = strlen(line);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_parsecfg.c:357:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      ptr = realloc(line, linelen + strlen(buf) + 1);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:227:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    len = strlen(str);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:332:54:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        msnprintf(preamble, sizeof(preamble), "%*s", strlen(preamble), "");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:375:54:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        msnprintf(preamble, sizeof(preamble), "%*s", strlen(preamble), "");
/home/capstone/Desktop/root/curl-7.68.0/src/tool_setopt.c:461:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t size = strlen(part->data);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_strdup.c:33:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen(str);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:444:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  glob_buffer = malloc(strlen(url) + 1);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:454:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  glob_expand->urllen = strlen(url);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:570:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        len = strlen(buf);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:586:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      len = strlen(buf);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:618:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  allocsize = strlen(filename) + 1; /* make it at least one byte to store the
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:648:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              strlen(pat->content.Set.elements[pat->content.Set.ptr_s]);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_urlglob.c:662:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          appendlen = strlen(numbuf);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_xattr.c:110:54:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        err = fsetxattr(fd, mappings[i].attr, value, strlen(value), 0, 0);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_xattr.c:112:54:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        err = fsetxattr(fd, mappings[i].attr, value, strlen(value), 0);
/home/capstone/Desktop/root/curl-7.68.0/src/tool_xattr.c:116:64:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                      mappings[i].attr, value, strlen(value));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/first.c:95:8:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(strlen(env) >= CURL_MT_LOGFNAME_BUFSIZE)
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/first.c:109:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if((endptr != env) && (endptr == env + strlen(env)) && (num > 0))
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1517.c:62:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  pooh.sizeleft = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1520.c:62:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1525.c:38:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(amount < strlen(data)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1525.c:39:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1525.c:42:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  memcpy(ptr, data, strlen(data));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1525.c:43:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  return strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1525.c:85:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  test_setopt(curl, CURLOPT_INFILESIZE, (long)strlen(data));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1526.c:37:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(amount < strlen(data)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1526.c:38:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1526.c:41:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  memcpy(ptr, data, strlen(data));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1526.c:42:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  return strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1526.c:88:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  test_setopt(curl, CURLOPT_INFILESIZE, (long)strlen(data));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1527.c:37:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(amount < strlen(data)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1527.c:38:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1527.c:41:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  memcpy(ptr, data, strlen(data));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1527.c:42:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  return strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1527.c:86:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  test_setopt(curl, CURLOPT_INFILESIZE, (long)strlen(data));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1537.c:56:44:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  raw = curl_easy_unescape(NULL, ptr, (int)strlen(ptr), &outlen);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1537.c:63:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  raw = curl_unescape(ptr, (int)strlen(ptr));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1537.c:68:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  outlen = (int)strlen(raw);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1560.c:75:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    n = strlen(bufp);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1591.c:39:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(consumed == strlen(data)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1591.c:43:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(amount > strlen(data)-consumed) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1591.c:44:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    amount = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1900.c:66:8:  [1] (buffer) fscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
    if(fscanf(f, "%d %199s\n", &filetime, buf)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib1900.c:73:8:  [1] (buffer) fscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
    if(fscanf(f, "blacklist_site %199s\n", buf)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib508.c:58:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  pooh.sizeleft = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib510.c:50:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib547.c:55:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(size * nmemb > strlen(UPLOADTHIS)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib547.c:58:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return strlen(UPLOADTHIS);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib547.c:114:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  test_setopt(curl, CURLOPT_POSTFIELDSIZE, (long)strlen(UPLOADTHIS));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib554.c:79:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  pooh.sizeleft = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib554.c:109:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  pooh2.sizeleft = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib555.c:62:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(size * nmemb > strlen(uploadthis)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib555.c:65:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    return strlen(uploadthis);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib555.c:109:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  easy_setopt(curl, CURLOPT_POSTFIELDSIZE, (long)strlen(uploadthis));
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib556.c:75:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    res = curl_easy_send(curl, request, strlen(request), &iolen);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:212:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
               strlen(us_test[i].expected))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:382:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              strlen(ss_test[i].expected))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:532:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
               strlen(ui_test[i].expected))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:760:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              strlen(si_test[i].expected))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:909:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
               strlen(ul_test[i].expected))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:1137:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              strlen(sl_test[i].expected))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:1366:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              strlen(co_test[i].expected))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib557.c:1396:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t buflen = strlen(buf);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib579.c:78:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib582.c:41:18:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  struct Sockets read, write;
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib582.c:114:21:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    addFd(&sockets->read, s, "read");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib582.c:120:24:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    removeFd(&sockets->read, s, 1);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib582.c:308:26:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    updateFdSet(&sockets.read, &readSet, &maxFd);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib582.c:324:28:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    checkFdSet(m, &sockets.read, &readSet, CURL_CSELECT_IN, "read");
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib582.c:353:16:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  free(sockets.read.sockets);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib643.c:86:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  datasize = (curl_off_t)strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib643.c:141:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  datasize = (curl_off_t)strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib650.c:98:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  contentlength = (long)(strlen(data) - 1);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib650.c:110:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                        CURLFORM_NAMELENGTH, strlen(name) - 1,
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/lib654.c:104:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  pooh.sizeleft = (curl_off_t) strlen(data);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/libauthretry.c:34:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen(url) + 4 + 1;
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/libntlmconnect.c:95:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t urllen = strlen(url) + 4 + 1;
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/sethostname.c:34:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(name, force_hostname, namelen);
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/stub_gssapi.c:104:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(!creds || strlen(creds) >= MAX_CREDS_LENGTH) {
/home/capstone/Desktop/root/curl-7.68.0/tests/libtest/stub_gssapi.c:339:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      status_string->length = strlen(status_string->value);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/fake_ntlm.c:63:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    inlength = strlen(inbuf);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/fake_ntlm.c:165:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if((endptr != env + strlen(env)) || (lnum < 1L)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/fake_ntlm.c:249:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    else if(strncmp(buf, type3_input, strlen(type3_input)) == 0) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:135:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    length = offset + strlen(*buffer + offset);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/getpart.c:185:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t src_len = strlen(src_buf);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:352:6:  [1] (buffer) sscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
     sscanf(line,
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:384:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if((strlen(doc) + strlen(request)) < 200)
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:384:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if((strlen(doc) + strlen(request)) < 200)
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:457:49:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            if(!strncmp(CMD_AUTH_REQUIRED, ptr, strlen(CMD_AUTH_REQUIRED))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:461:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            else if(!strncmp(CMD_IDLE, ptr, strlen(CMD_IDLE))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:466:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            else if(!strncmp(CMD_STREAM, ptr, strlen(CMD_STREAM))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:583:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    req->checkindex += (end - line) + strlen(END_OF_HEADERS);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:627:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                            strlen("Transfer-Encoding: chunked"))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:692:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
     req->reqbuf + req->offset > end + strlen(END_OF_HEADERS) &&
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:693:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
     (!strncmp(req->reqbuf, "GET", strlen("GET")) ||
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:694:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      !strncmp(req->reqbuf, "HEAD", strlen("HEAD")))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:697:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    req->checkindex = (end - req->reqbuf) + strlen(END_OF_HEADERS);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:709:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    req->checkindex += (end - line) + strlen(END_OF_HEADERS);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:721:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(req->cl <= req->offset - (end - req->reqbuf) - strlen(END_OF_HEADERS))
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:920:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    count = strlen(STREAMTHIS);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:952:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      msglen = strlen(msgbuf);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:981:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    count = strlen(buffer);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:1144:15:  [1] (buffer) sscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
      if(2 == sscanf(ptr, "%31s %d", command, &num)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/rtspd.c:1243:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if((endptr != argv[arg] + strlen(argv[arg])) ||
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sockfilt.c:296:12:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    return read(fd, buf, count);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sockfilt.c:312:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#undef  read
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sockfilt.c:313:9:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#define read(a,b,c) read_wincon(a,b,c)
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sockfilt.c:364:18:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
    ssize_t rc = read(filedes,
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sockfilt.c:1066:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      buffer_len = (ssize_t)strlen((char *)buffer);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sockfilt.c:1394:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if((endptr != argv[arg] + strlen(argv[arg])) ||
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sockfilt.c:1411:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if((endptr != argv[arg] + strlen(argv[arg])) ||
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:185:15:  [1] (buffer) sscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
      if(2 == sscanf(buffer, "%31s %31s", key, value)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:558:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if((ulen != strlen(config.user)) ||
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:559:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
       (plen != strlen(config.password)) ||
/home/capstone/Desktop/root/curl-7.68.0/tests/server/socksd.c:1063:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if((endptr != argv[arg] + strlen(argv[arg])) ||
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:400:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if(!strncmp(CMD_AUTH_REQUIRED, cmd, strlen(CMD_AUTH_REQUIRED))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:404:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      else if(!strncmp(CMD_IDLE, cmd, strlen(CMD_IDLE))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:409:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      else if(!strncmp(CMD_STREAM, cmd, strlen(CMD_STREAM))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:414:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                       strlen(CMD_CONNECTIONMONITOR))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:418:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      else if(!strncmp(CMD_UPGRADE, cmd, strlen(CMD_UPGRADE))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:422:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      else if(!strncmp(CMD_SWSCLOSE, cmd, strlen(CMD_SWSCLOSE))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:503:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if((strlen(doc) + strlen(request)) < 400)
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:503:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if((strlen(doc) + strlen(request)) < 400)
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:746:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                            strlen("Transfer-Encoding: chunked"))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:840:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
     req->reqbuf + req->offset > end + strlen(end_of_headers) &&
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:842:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
     (!strncmp(req->reqbuf, "GET", strlen("GET")) ||
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:843:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      !strncmp(req->reqbuf, "HEAD", strlen("HEAD")))) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:846:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    req->checkindex = (end - req->reqbuf) + strlen(end_of_headers);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:865:55:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    if(req->cl <= req->offset - (end - req->reqbuf) - strlen(end_of_headers))
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1055:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    count = strlen(STREAMTHIS);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1086:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      msglen = strlen(msgbuf);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1102:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    count = strlen(buffer);
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:1262:15:  [1] (buffer) sscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
      if(2 == sscanf(ptr, "%31s %d", command, &num)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:2025:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if(strlen(unix_socket) >= sizeof(me.sau.sun_path)) {
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:2042:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if((endptr != argv[arg] + strlen(argv[arg])) ||
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:2146:5:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    strncpy(me.sau.sun_path, unix_socket, sizeof(me.sau.sun_path));
/home/capstone/Desktop/root/curl-7.68.0/tests/server/sws.c:2315:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              storerequest(keepopen, strlen(keepopen));
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:724:35:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        if((endptr != argv[arg] + strlen(argv[arg])) ||
/home/capstone/Desktop/root/curl-7.68.0/tests/server/tftpd.c:1424:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  length = (int)strlen(pe->e_msg);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1304.c:54:31:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  memcpy(filename, filename1, strlen(filename1));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1305.c:130:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    key_len = strlen(data_key);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1396.c:105:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    outlen = (int)strlen(out);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:63:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if(Curl_hash_str(key1, strlen(key1), slots) != 1 ||
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:64:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
     Curl_hash_str(key2, strlen(key2), slots) != 0 ||
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:65:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
     Curl_hash_str(key3, strlen(key3), slots) != 2 ||
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:66:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
     Curl_hash_str(key4, strlen(key4), slots) != 1)
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:70:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_add(&hash_static, &key1, strlen(key1), &key1);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:72:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key1, strlen(key1));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:75:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_add(&hash_static, &key2, strlen(key2), &key2);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:77:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key2, strlen(key2));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:80:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_add(&hash_static, &key3, strlen(key3), &key3);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:82:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key3, strlen(key3));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:86:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_add(&hash_static, &key4, strlen(key4), &key4);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:88:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key4, strlen(key4));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:92:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key1, strlen(key1));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:94:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key2, strlen(key2));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:96:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key3, strlen(key3));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:98:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key4, strlen(key4));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:102:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  rc = Curl_hash_delete(&hash_static, &key4, strlen(key4));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:104:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key1, strlen(key1));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:106:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key4, strlen(key4));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:110:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_add(&hash_static, &key4, strlen(key4), &key4);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:112:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key4, strlen(key4));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:116:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  rc = Curl_hash_delete(&hash_static, &key1, strlen(key1));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:118:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key1, strlen(key1));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:120:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key4, strlen(key4));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:124:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  rc = Curl_hash_delete(&hash_static, &key4, strlen(key4));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:126:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key1, strlen(key1));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:128:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key4, strlen(key4));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:132:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  rc = Curl_hash_delete(&hash_static, &key4, strlen(key4));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:136:46:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_add(&hash_static, &key1, strlen(key1), &notakey);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:138:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key1, strlen(key1));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:142:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key2, strlen(key2));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1603.c:144:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  nodep = Curl_hash_pick(&hash_static, &key3, strlen(key3));
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1607.c:135:57:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    dns = Curl_hash_pick(easy->dns.hostcache, entry_id, strlen(entry_id) + 1);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1609.c:143:57:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    dns = Curl_hash_pick(easy->dns.hostcache, entry_id, strlen(entry_id) + 1);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1620.c:72:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                          hostname, strlen(hostname), NULL, NULL, NULL);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1650.c:204:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        o = strlen(ptr);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1650.c:214:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          l = strlen(ptr);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1650.c:226:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      o = strlen(ptr);
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1652.c:94:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
fail_unless(strlen(result) == 0, "Empty string");
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1652.c:102:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
fail_unless(strlen(result) == 2048, "No truncation of infof input");
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1652.c:110:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
fail_unless(strlen(result) == 2048, "Truncation of infof input 1");
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1652.c:119:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
fail_unless(strlen(result) == 2048, "Truncation of infof input 2");
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1652.c:128:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
fail_unless(strlen(result) == 2048, "Truncation of infof input 3");
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1655.c:131:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        fail_unless(olen > strlen(name), "unrealistic low size");
/home/capstone/Desktop/root/curl-7.68.0/tests/unit/unit1655.c:154:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  fail_unless(olen1 > strlen(sunshine1), "bad out length");
