/home/capstone/Desktop/root/patch-2.7.6/lib/canonicalize-lgpl.c:73:21:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
# define __readlink readlink
/home/capstone/Desktop/root/patch-2.7.6/lib/chown.c:36:1:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
chown (const char *file _GL_UNUSED, uid_t uid _GL_UNUSED,
/home/capstone/Desktop/root/patch-2.7.6/lib/chown.c:46:9:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
# undef chown
/home/capstone/Desktop/root/patch-2.7.6/lib/chown.c:131:12:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
  result = chown (file, uid, gid);
/home/capstone/Desktop/root/patch-2.7.6/lib/chown.c:143:16:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
      result = chmod (file, st.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO
/home/capstone/Desktop/root/patch-2.7.6/lib/fchmodat.c:49:20:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#define AT_FUNC_F2 chmod
/home/capstone/Desktop/root/patch-2.7.6/lib/fchownat.c:45:21:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
# define AT_FUNC_F2 chown
/home/capstone/Desktop/root/patch-2.7.6/lib/lchown.c:35:10:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
#  undef chown
/home/capstone/Desktop/root/patch-2.7.6/lib/lchown.c:57:10:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
  return chown (file, uid, gid);
/home/capstone/Desktop/root/patch-2.7.6/lib/lchown.c:85:16:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
        return chown (file, uid, gid);
/home/capstone/Desktop/root/patch-2.7.6/lib/lchown.c:94:16:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
        return chown (file, uid, gid);
/home/capstone/Desktop/root/patch-2.7.6/lib/readlink.c:32:1:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
readlink (const char *name, char *buf _GL_UNUSED,
/home/capstone/Desktop/root/patch-2.7.6/lib/readlink.c:47:9:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
# undef readlink
/home/capstone/Desktop/root/patch-2.7.6/lib/readlink.c:71:10:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
  return readlink (name, buf, bufsize);
/home/capstone/Desktop/root/patch-2.7.6/lib/readlinkat.c:68:21:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
# define AT_FUNC_F1 readlink
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:745:8:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
#undef gets
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:747:18:  [5] (buffer) gets:Does not check for buffer overflows (CWE-120, CWE-20).  Use fgets() instead. 
_GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");
/home/capstone/Desktop/root/patch-2.7.6/lib/sys_stat.in.h:507:19:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
#   define lchmod chmod
/home/capstone/Desktop/root/patch-2.7.6/lib/sys_stat.in.h:511:34:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
_GL_CXXALIAS_RPL_CAST_1 (lchmod, chmod, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:263:18:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_WARN_ON_USE (chown, "chdir is not always in <unistd.h> - "
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:277:11:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
#   undef chown
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:278:12:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
#   define chown rpl_chown
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:280:19:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_FUNCDECL_RPL (chown, int, (const char *file, uid_t uid, gid_t gid)
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:282:19:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_CXXALIAS_RPL (chown, int, (const char *file, uid_t uid, gid_t gid));
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:285:19:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_FUNCDECL_SYS (chown, int, (const char *file, uid_t uid, gid_t gid)
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:288:19:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_CXXALIAS_SYS (chown, int, (const char *file, uid_t uid, gid_t gid));
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:290:19:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_CXXALIASWARN (chown);
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:292:9:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
# undef chown
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:294:18:  [5] (race) chown:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchown( ) instead. 
_GL_WARN_ON_USE (chown, "chown fails to follow symlinks on some systems and "
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1291:12:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
#   define readlink rpl_readlink
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1293:19:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_FUNCDECL_RPL (readlink, ssize_t,
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1296:19:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_CXXALIAS_RPL (readlink, ssize_t,
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1300:19:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_FUNCDECL_SYS (readlink, ssize_t,
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1304:19:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_CXXALIAS_SYS (readlink, ssize_t,
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1307:19:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_CXXALIASWARN (readlink);
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1309:9:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
# undef readlink
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1311:18:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
_GL_WARN_ON_USE (readlink, "readlink is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/src/safe.c:689:12:  [5] (race) chmod:This accepts filename arguments; if an attacker can move those files, a race condition results. (CWE-362).  Use fchmod( ) instead. 
    return chmod (pathname, mode);
/home/capstone/Desktop/root/patch-2.7.6/src/safe.c:731:12:  [5] (race) readlink:This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results.  Also, it does not terminate with ASCII NUL. (CWE-362, CWE-20).  Reconsider approach. 
    return readlink (pathname, buf, bufsiz);
/home/capstone/Desktop/root/patch-2.7.6/lib/chdir-long.c:249:7:  [4] (shell) execlp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
      execlp (cmd, (char *) NULL);
/home/capstone/Desktop/root/patch-2.7.6/lib/error.c:274:5:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
    vfprintf (stderr, message, args);
/home/capstone/Desktop/root/patch-2.7.6/lib/error.c:389:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, file_name != NULL ? "%s:%u: " : " ",
/home/capstone/Desktop/root/patch-2.7.6/lib/euidaccess.c:58:10:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
# define access __access
/home/capstone/Desktop/root/patch-2.7.6/lib/euidaccess.c:82:10:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
  return access (file, mode | EFF_ONLY_OK);
/home/capstone/Desktop/root/patch-2.7.6/lib/euidaccess.c:116:16:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
      result = access (file, mode);
/home/capstone/Desktop/root/patch-2.7.6/lib/euidaccess.c:138:12:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
    return access (file, mode);
/home/capstone/Desktop/root/patch-2.7.6/lib/faccessat.c:48:9:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
# undef access
/home/capstone/Desktop/root/patch-2.7.6/lib/faccessat.c:49:10:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
# define access euidaccess
/home/capstone/Desktop/root/patch-2.7.6/lib/faccessat.c:85:21:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
# define AT_FUNC_F2 access
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt.c:40:10:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
# define fprintf __fxprintf_nocancel
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:243:23:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:244:23:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
                      strcpy (res_ptr + res_size - (l2 + 1), buf2);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:515:5:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
    sprintf (buf, "CP%s", pdot + 1);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:88:13:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
            sprintf (dotdot_buf, PROC_SELF_FD_FORMAT "../fd", proc_self_fd);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:89:27:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
            proc_status = access (dotdot_buf, F_OK) ? -1 : 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:106:18:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
        dirlen = sprintf (result, PROC_SELF_FD_FORMAT, fd);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:127:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy (result, dir);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:132:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy (result + dirlen, file);
/home/capstone/Desktop/root/patch-2.7.6/lib/opendir.c:151:3:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
  strcpy (dirp->dir_name_mask, dir_name_mask);
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:209:3:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  vfprintf (stderr, msg, args);
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:444:16:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
             : snprintf (buffer, n, "%"PRIdMAX, pc->day_ordinal));
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:454:5:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
    snprintf (buffer + len, n - len, &" %s"[len == 0],
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:510:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
      fprintf (stderr, "(Y-M-D) %04"PRIdMAX"-%02"PRIdMAX"-%02"PRIdMAX,
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:520:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
      fprintf (stderr, _("year: %04"PRIdMAX), pc->year.value);
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:529:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
      fprintf (stderr, &" %02"PRIdMAX":%02"PRIdMAX":%02"PRIdMAX[!space],
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:559:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
      fprintf (stderr, &" isdst=%d%s"[!space],
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:568:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
      fprintf (stderr, &" UTC%s"[!space],
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:579:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
      fprintf (stderr, _("number of seconds: %"PRIdMAX), sec);
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:592:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  fprintf (stderr, &" %+"PRIdMAX" %s"[!space], val, name);
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:1262:21:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  define YYFPRINTF fprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:2978:3:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
  sprintf (buf, &"-%02d%02d"[-TM_YEAR_BASE <= tm_year],
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:304:12:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#   define fprintf rpl_fprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:308:19:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (fprintf, int, (FILE *fp, const char *format, ...)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:312:19:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (fprintf, int, (FILE *fp, const char *format, ...)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:316:19:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (fprintf, int, (FILE *fp, const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:318:19:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS (fprintf, int, (FILE *fp, const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:320:19:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (fprintf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:324:10:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  undef fprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:327:18:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (fprintf, "fprintf is not always POSIX compliant - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:431:11:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   undef fscanf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:432:12:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   define fscanf rpl_fscanf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:434:19:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_FUNCDECL_RPL (fscanf, int, (FILE *stream, const char *format, ...)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:437:19:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_RPL (fscanf, int, (FILE *stream, const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:439:19:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_SYS (fscanf, int, (FILE *stream, const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:441:19:  [4] (buffer) fscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIASWARN (fscanf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:839:11:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#   undef popen
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:840:12:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
#   define popen rpl_popen
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:842:19:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_FUNCDECL_RPL (popen, FILE *, (const char *cmd, const char *mode)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:844:19:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_CXXALIAS_RPL (popen, FILE *, (const char *cmd, const char *mode));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:847:19:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_FUNCDECL_SYS (popen, FILE *, (const char *cmd, const char *mode)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:850:19:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_CXXALIAS_SYS (popen, FILE *, (const char *cmd, const char *mode));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:852:19:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_CXXALIASWARN (popen);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:854:9:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
# undef popen
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:856:18:  [4] (shell) popen:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
_GL_WARN_ON_USE (popen, "popen is buggy on some platforms - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:867:13:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#    define printf __printf__
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:884:21:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL_1 (printf, __printf__, int, (const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:887:13:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#    define printf rpl_printf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:889:19:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (printf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:893:19:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (printf, int, (const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:897:19:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS (printf, int, (const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:899:19:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (printf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:903:10:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  undef printf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:906:18:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (printf, "printf is not always POSIX compliant - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1028:12:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#    undef scanf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1030:13:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#    define scanf __scanf__
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1038:21:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_RPL_1 (scanf, __scanf__, int, (const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1041:12:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#    undef scanf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1042:13:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#    define scanf rpl_scanf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1044:19:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_FUNCDECL_RPL (scanf, int, (const char *format, ...)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1047:19:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_RPL (scanf, int, (const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1050:19:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_SYS (scanf, int, (const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1052:19:  [4] (buffer) scanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIASWARN (scanf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1058:12:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   define snprintf rpl_snprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1060:19:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (snprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1064:19:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (snprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1068:19:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_SYS (snprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1073:19:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS (snprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1076:19:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (snprintf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1078:9:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
# undef snprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1080:18:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (snprintf, "snprintf is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1097:12:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
#   define sprintf rpl_sprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1099:19:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_FUNCDECL_RPL (sprintf, int, (char *str, const char *format, ...)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1102:19:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIAS_RPL (sprintf, int, (char *str, const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1104:19:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIAS_SYS (sprintf, int, (char *str, const char *format, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1106:19:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIASWARN (sprintf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1108:9:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
# undef sprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1110:18:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_WARN_ON_USE (sprintf, "sprintf is not always POSIX compliant - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1216:12:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#   define vfprintf rpl_vfprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1220:19:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (vfprintf, int, (FILE *fp, const char *format, va_list args)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1224:19:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (vfprintf, int, (FILE *fp, const char *format, va_list args)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1228:19:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (vfprintf, int, (FILE *fp, const char *format, va_list args));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1233:24:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS_CAST (vfprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1236:19:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (vfprintf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1240:10:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  undef vfprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1243:18:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (vfprintf, "vfprintf is not always POSIX compliant - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1251:11:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   undef vfscanf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1252:12:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   define vfscanf rpl_vfscanf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1254:19:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_FUNCDECL_RPL (vfscanf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1258:19:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_RPL (vfscanf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1261:19:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_SYS (vfscanf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1264:19:  [4] (buffer) vfscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIASWARN (vfscanf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1271:12:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#   define vprintf rpl_vprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1275:19:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (vprintf, int, (const char *format, va_list args)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1279:19:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (vprintf, int, (const char *format, va_list args)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1283:19:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (vprintf, int, (const char *format, va_list args));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1288:24:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS_CAST (vprintf, int, (const char *format, va_list args));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1290:19:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (vprintf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1294:10:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
#  undef vprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1297:18:  [4] (format) vprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (vprintf, "vprintf is not always POSIX compliant - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1305:11:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   undef vscanf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1306:12:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
#   define vscanf rpl_vscanf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1308:19:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_FUNCDECL_RPL (vscanf, int, (const char *format, va_list args)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1311:19:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_RPL (vscanf, int, (const char *format, va_list args));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1313:19:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIAS_SYS (vscanf, int, (const char *format, va_list args));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1315:19:  [4] (buffer) vscanf:The scanf() family's %s operation, without a limit specification, permits buffer overflows (CWE-120, CWE-20).  Specify a limit to %s, or use a different input function. 
_GL_CXXALIASWARN (vscanf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1321:12:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   define vsnprintf rpl_vsnprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1323:19:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_RPL (vsnprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1327:19:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_RPL (vsnprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1331:19:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_FUNCDECL_SYS (vsnprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1336:19:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIAS_SYS (vsnprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1339:19:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_CXXALIASWARN (vsnprintf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1341:9:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
# undef vsnprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1343:18:  [4] (format) vsnprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
_GL_WARN_ON_USE (vsnprintf, "vsnprintf is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1351:12:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
#   define vsprintf rpl_vsprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1353:19:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_FUNCDECL_RPL (vsprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1357:19:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIAS_RPL (vsprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1363:24:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIAS_SYS_CAST (vsprintf, int,
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1366:19:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_CXXALIASWARN (vsprintf);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1368:9:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
# undef vsprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1370:18:  [4] (buffer) vsprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
_GL_WARN_ON_USE (vsprintf, "vsprintf is not always POSIX compliant - "
/home/capstone/Desktop/root/patch-2.7.6/lib/strerror.c:33:8:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
#undef sprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/strerror.c:59:7:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
      sprintf (buf, fmt, n);
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:252:18:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
_GL_WARN_ON_USE (access, "the access function is a security risk - "
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:802:19:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
_GL_FUNCDECL_SYS (getlogin, char *, (void));
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:804:19:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
_GL_CXXALIAS_SYS (getlogin, char *, (void));
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:805:19:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
_GL_CXXALIASWARN (getlogin);
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:807:9:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
# undef getlogin
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:809:18:  [4] (misc) getlogin:It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes (CWE-807).  Use getpwuid(geteuid()) and extract the desired information instead. 
_GL_WARN_ON_USE (getlogin, "getlogin is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:171:20:  [4] (buffer) swprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
#  define SNPRINTF swprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:189:21:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   define SNPRINTF snprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:191:11:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   undef snprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:194:21:  [4] (format) _snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#   define SNPRINTF _snprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:199:20:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#  define SNPRINTF snprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:201:10:  [4] (format) snprintf:If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate (CWE-134).  Use a constant for the format specification. 
#  undef snprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:205:8:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
#undef sprintf
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4267:39:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                                      sprintf ((char *) p, decimal_format, exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4275:39:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                                      sprintf (expbuf, decimal_format, exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4460:47:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                                              sprintf ((char *) p, decimal_format, exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4468:47:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                                              sprintf (expbuf, decimal_format, exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4990:33:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                        count = sprintf (tmp, buf, arg);                    \
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4993:33:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                        count = sprintf (tmp, buf, prefixes[0], arg);       \
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4996:33:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
                        count = sprintf (tmp, buf, prefixes[0], prefixes[1],\
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:607:19:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
_GL_FUNCDECL_SYS (wcscpy, wchar_t *, (wchar_t *dest, const wchar_t *src));
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:609:19:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
_GL_CXXALIAS_SYS (wcscpy, wchar_t *, (wchar_t *dest, const wchar_t *src));
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:610:19:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
_GL_CXXALIASWARN (wcscpy);
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:612:9:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
# undef wcscpy
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:614:18:  [4] (buffer) wcscpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using a function version that stops copying at the end of the buffer. 
_GL_WARN_ON_USE (wcscpy, "wcscpy is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:676:19:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
_GL_FUNCDECL_SYS (wcscat, wchar_t *, (wchar_t *dest, const wchar_t *src));
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:678:19:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
_GL_CXXALIAS_SYS (wcscat, wchar_t *, (wchar_t *dest, const wchar_t *src));
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:679:19:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
_GL_CXXALIASWARN (wcscat);
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:681:9:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
# undef wcscat
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:683:18:  [4] (buffer) wcscat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  
_GL_WARN_ON_USE (wcscat, "wcscat is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1434:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
		    fprintf (fp, outstate->after_newline + not_defined,
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1462:7:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
		    fprintf (fp, outstate->after_newline + if_defined,
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1481:9:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
	       fprintf (fp, 1 + not_defined, R_do_defines);
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1530:3:  [4] (format) fprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
		fprintf (fp, outstate->after_newline + if_defined,
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1676:2:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	sprintf (buf, "*** %s,%s ****\n",
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1685:2:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	sprintf (buf, "--- %s,%s ----\n",
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1832:2:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	sprintf (buf, "*** %s,%s\n",
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1877:2:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
	sprintf (buf, "--- %s,%s\n",
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:2471:6:  [4] (shell) execlp:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
	    execlp (editor_program, editor_program, "-", outname, (char  *) NULL);
/home/capstone/Desktop/root/patch-2.7.6/src/safe.c:745:12:  [4] (race) access:This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!).  Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
    return access (pathname, mode);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:723:3:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
  sprintf (trybuf, "%s/", dir);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:725:24:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
#define try1(f,a1)    (sprintf (trybuf + dirlen, f, a1),    safe_stat (trybuf, &cstat) == 0)
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:726:24:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
#define try2(f,a1,a2) (sprintf (trybuf + dirlen, f, a1,a2), safe_stat (trybuf, &cstat) == 0)
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:741:4:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
	  sprintf (p, readonly ? CHECKOUT : CHECKOUT_LOCKED, dotslash);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:750:4:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
	  sprintf (p, RCSDIFF1, dotslash);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:754:4:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	  strcpy (p, DEV_NULL);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:765:4:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
	  sprintf (p, readonly ? GET : GET_LOCKED);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:774:4:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	  strcpy (p, SCCSDIFF1);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:777:4:  [4] (format) sprintf:Potential format string problem (CWE-134).  Make format string constant. 
	  sprintf (p, SCCSDIFF2, dotslash);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:781:4:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	  strcpy (p, DEV_NULL);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:792:4:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	  strcpy (p, CLEARTOOL_CO);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:809:4:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
	  strcpy (p, PERFORCE_CO);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:933:3:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  vfprintf (stderr, format, args);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:967:3:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  vfprintf (stderr, format, args);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:981:3:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  vfprintf (stdout, format, args);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1004:3:  [4] (format) vfprintf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
  vfprintf (stdout, format, args);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1241:10:  [4] (shell) system:This causes a new program to execute and is difficult to use safely (CWE-78).  try using a library call that implements the same functionality if available. 
  return system (command);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1662:7:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
      sprintf (template, "%s/%s.%cXXXXXX", dirname, basename, letter);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1679:7:  [4] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. 
      sprintf (template, "%s/p%cXXXXXX", tmpdir, letter);
/home/capstone/Desktop/root/patch-2.7.6/src/util.h:33:64:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
bool ok_to_reverse (char const *, ...) __attribute__ ((format (printf, 1, 2)));
/home/capstone/Desktop/root/patch-2.7.6/src/util.h:34:54:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
void ask (char const *, ...) __attribute__ ((format (printf, 1, 2)));
/home/capstone/Desktop/root/patch-2.7.6/src/util.h:35:54:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
void say (char const *, ...) __attribute__ ((format (printf, 1, 2)));
/home/capstone/Desktop/root/patch-2.7.6/src/util.h:38:36:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
	__attribute__ ((noreturn, format (printf, 1, 2)));
/home/capstone/Desktop/root/patch-2.7.6/src/util.h:40:36:  [4] (format) printf:If format strings can be influenced by an attacker, they can be exploited (CWE-134).  Use a constant for the format specification. 
	__attribute__ ((noreturn, format (printf, 1, 2)));
/home/capstone/Desktop/root/patch-2.7.6/lib/argmatch.c:262:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  if ((cp = getenv ("VERSION_CONTROL")))
/home/capstone/Desktop/root/patch-2.7.6/lib/backup-find.c:90:45:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    return get_version ("$VERSION_CONTROL", getenv ("VERSION_CONTROL"));
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:88:9:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    s = getenv ("SIMPLE_BACKUP_SUFFIX");
/home/capstone/Desktop/root/patch-2.7.6/lib/canonicalize-lgpl.c:51:21:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
# define __realpath realpath
/home/capstone/Desktop/root/patch-2.7.6/lib/canonicalize-lgpl.c:71:30:  [3] (buffer) getwd:This does not protect against buffer overflows by itself, so use with caution (CWE-120, CWE-20).  Use getcwd instead. 
#  define __getcwd(buf, max) getwd (buf)
/home/capstone/Desktop/root/patch-2.7.6/lib/canonicalize-lgpl.c:394:37:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
versioned_symbol (libc, __realpath, realpath, GLIBC_2_3);
/home/capstone/Desktop/root/patch-2.7.6/lib/canonicalize-lgpl.c:411:38:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
compat_symbol (libc, __old_realpath, realpath, GLIBC_2_0);
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt-core.h:91:12:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt-ext.h:66:12:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
extern int getopt_long (int ___argc, char *__getopt_argv_const *___argv,
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt-pfx-core.h:40:9:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# undef getopt
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt-pfx-core.h:45:10:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# define getopt __GETOPT_ID (getopt)
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt-pfx-core.h:45:30:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# define getopt __GETOPT_ID (getopt)
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt-pfx-ext.h:40:9:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# undef getopt_long
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt-pfx-ext.h:44:10:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# define getopt_long __GETOPT_ID (getopt_long)
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt-pfx-ext.h:44:35:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
# define getopt_long __GETOPT_ID (getopt_long)
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt.c:405:33:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  else if (posixly_correct || !!getenv ("POSIXLY_CORRECT"))
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt.c:736:14:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
GETOPT_ENTRY(getopt, 0)
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt.c:739:14:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
GETOPT_ENTRY(getopt, 1)
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt.c:758:11:  [3] (buffer) getopt:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
      c = getopt (argc, argv, "abc:d:0123456789");
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt1.c:28:1:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
getopt_long (int argc, char *__getopt_argv_const *argv, const char *options,
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt1.c:94:11:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
      c = getopt_long (argc, argv, "abc:d:0123456789",
/home/capstone/Desktop/root/patch-2.7.6/lib/gettimeofday.c:44:22:  [3] (misc) LoadLibrary:Ensure that the full path to the library is specified, or current directory may be used (CWE-829, CWE-20).  Use registry entry or GetWindowsDirectory to find library path, if you aren't already. 
  HMODULE kernel32 = LoadLibrary ("kernel32.dll");
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:140:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      dir = getenv ("CHARSETALIASDIR");
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:418:16:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      locale = getenv ("LC_ALL");
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:421:20:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
          locale = getenv ("LC_CTYPE");
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:423:22:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
            locale = getenv ("LANG");
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:479:16:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      locale = getenv ("LC_ALL");
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:482:20:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
          locale = getenv ("LC_CTYPE");
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:484:22:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
            locale = getenv ("LANG");
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:540:12:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  locale = getenv ("LC_ALL");
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:543:16:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      locale = getenv ("LC_CTYPE");
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:545:18:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
        locale = getenv ("LANG");
/home/capstone/Desktop/root/patch-2.7.6/lib/mktime.c:516:20:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  const char *tz = getenv ("TZ");
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3443:26:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  char const *tzstring = getenv ("TZ");
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:372:19:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      char *tmp = getenv (name);
/home/capstone/Desktop/root/patch-2.7.6/lib/stat-w32.c:60:22:  [3] (misc) LoadLibrary:Ensure that the full path to the library is specified, or current directory may be used (CWE-829, CWE-20).  Use registry entry or GetWindowsDirectory to find library path, if you aren't already. 
  HMODULE kernel32 = LoadLibrary ("kernel32.dll");
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:573:19:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_FUNCDECL_SYS (random, long, (void));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:575:19:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIAS_SYS (random, long, (void));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:576:19:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIASWARN (random);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:578:9:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
# undef random
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:580:18:  [3] (random) random:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_WARN_ON_USE (random, "random is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:587:19:  [3] (random) srandom:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_FUNCDECL_SYS (srandom, void, (unsigned int seed));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:589:19:  [3] (random) srandom:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIAS_SYS (srandom, void, (unsigned int seed));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:590:19:  [3] (random) srandom:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIASWARN (srandom);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:592:9:  [3] (random) srandom:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
# undef srandom
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:594:18:  [3] (random) srandom:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_WARN_ON_USE (srandom, "srandom is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:618:19:  [3] (random) setstate:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_FUNCDECL_SYS (setstate, char *, (char *arg_state) _GL_ARG_NONNULL ((1)));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:620:19:  [3] (random) setstate:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIAS_SYS (setstate, char *, (char *arg_state));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:621:19:  [3] (random) setstate:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_CXXALIASWARN (setstate);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:623:9:  [3] (random) setstate:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
# undef setstate
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:625:18:  [3] (random) setstate:This function is not sufficiently random for security-related functions such as key and nonce creation (CWE-327).  Use a more secure technique for acquiring random values. 
_GL_WARN_ON_USE (setstate, "setstate is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:788:12:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
#   define realpath rpl_realpath
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:790:19:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_FUNCDECL_RPL (realpath, char *, (const char *name, char *resolved)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:792:19:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_CXXALIAS_RPL (realpath, char *, (const char *name, char *resolved));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:795:19:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_FUNCDECL_SYS (realpath, char *, (const char *name, char *resolved)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:798:19:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_CXXALIAS_SYS (realpath, char *, (const char *name, char *resolved));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:800:19:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_CXXALIASWARN (realpath);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:802:9:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
# undef realpath
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:804:18:  [3] (buffer) realpath:This function does not protect against buffer overflows, and some implementations can overflow internally (CWE-120/CWE-785!).  Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against implementation problems, the input argument should also be checked to ensure it is no larger than MAXPATHLEN. 
_GL_WARN_ON_USE (realpath, "realpath is unportable - use gnulib module "
/home/capstone/Desktop/root/patch-2.7.6/lib/time_rz.c:214:10:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  return getenv ("TZ");
/home/capstone/Desktop/root/patch-2.7.6/lib/tzset.c:66:20:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  const char *tz = getenv ("TZ");
/home/capstone/Desktop/root/patch-2.7.6/lib/unsetenv.c:119:10:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
  while (getenv (name))
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:135:11:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    val = getenv ("QUOTING_STYLE");
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:142:23:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    posixly_correct = getenv ("POSIXLY_CORRECT") != 0;
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:144:25:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    patch_get = ((val = getenv ("PATCH_GET"))
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:148:11:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    val = getenv ("SIMPLE_BACKUP_SUFFIX");
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:151:28:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    if ((version_control = getenv ("PATCH_VERSION_CONTROL")))
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:153:33:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
    else if ((version_control = getenv ("VERSION_CONTROL")))
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:879:20:  [3] (buffer) getopt_long:Some older implementations do not protect against internal buffer overflows (CWE-120, CWE-20).  Check implementation on installation, or limit the size of all string inputs. 
    while ((optc = getopt_long (Argc, Argv, shortopts, longopts, (int *) 0))
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:804:13:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
           (getenv("P4PORT") || getenv("P4USER") || getenv("P4CONFIG")))
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:804:33:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
           (getenv("P4PORT") || getenv("P4USER") || getenv("P4CONFIG")))
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:804:53:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
           (getenv("P4PORT") || getenv("P4USER") || getenv("P4CONFIG")))
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1670:16:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
      tmpdir = getenv ("TMPDIR");  /* Unix tradition */
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1672:11:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	tmpdir = getenv ("TMP");  /* DOS tradition */
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1674:11:  [3] (buffer) getenv:Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once (CWE-807, CWE-20).  Check environment variables carefully before using them. 
	tmpdir = getenv ("TEMP");  /* another DOS tradition */
/home/capstone/Desktop/root/patch-2.7.6/lib/at-func.c:89:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char proc_buf[OPENAT_BUFFER_SIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/at-func2.c:83:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char proc_buf1[OPENAT_BUFFER_SIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/at-func2.c:89:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char proc_buf2[OPENAT_BUFFER_SIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:111:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char tmp[sizeof "."];
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:112:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (tmp, base, sizeof ".");
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:122:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (base, tmp, sizeof ".");
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:203:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char tmp[sizeof "."];
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:204:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (tmp, base, sizeof ".");
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:209:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (base, tmp, sizeof ".");
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:210:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
      strcpy (base + baselen, ".~1~");
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:272:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (q, p, versionlen + 2);
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:316:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (s, file, filelen + 1);
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:319:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy (s + filelen, simple_backup_suffix, simple_backup_suffix_size);
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:330:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy (s + filelen, simple_backup_suffix,
/home/capstone/Desktop/root/patch-2.7.6/lib/basename.c:51:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (p + 2, base, length);
/home/capstone/Desktop/root/patch-2.7.6/lib/canonicalize-lgpl.c:184:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (rpath, name, prefix_len);
/home/capstone/Desktop/root/patch-2.7.6/lib/canonicalize-lgpl.c:268:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (dest, start, end - start);
/home/capstone/Desktop/root/patch-2.7.6/lib/canonicalize-lgpl.c:333:28:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              name = end = memcpy (extra_buf, buf, n);
/home/capstone/Desktop/root/patch-2.7.6/lib/canonicalize-lgpl.c:340:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy (rpath, buf, pfxlen);
/home/capstone/Desktop/root/patch-2.7.6/lib/chown.c:91:14:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    int fd = open (file, O_RDONLY | open_flags);
/home/capstone/Desktop/root/patch-2.7.6/lib/chown.c:94:27:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
            && 0 <= (fd = open (file, O_WRONLY | open_flags))))
/home/capstone/Desktop/root/patch-2.7.6/lib/dirent-private.h:37:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dir_name_mask[1];
/home/capstone/Desktop/root/patch-2.7.6/lib/dirent.in.h:41:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char d_name[1];
/home/capstone/Desktop/root/patch-2.7.6/lib/dirname-lgpl.c:81:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (dir, file, length);
/home/capstone/Desktop/root/patch-2.7.6/lib/dup2.c:118:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  tempfd = open ("NUL", O_RDONLY);
/home/capstone/Desktop/root/patch-2.7.6/lib/dup2.c:126:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char path[_MAX_PATH];
/home/capstone/Desktop/root/patch-2.7.6/lib/dup2.c:130:14:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      return open(path, O_RDONLY);
/home/capstone/Desktop/root/patch-2.7.6/lib/error.c:180:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char errbuf[1024];
/home/capstone/Desktop/root/patch-2.7.6/lib/euidaccess.c:210:10:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
  mode = atoi (argv[2]);
/home/capstone/Desktop/root/patch-2.7.6/lib/fcntl.c:60:12:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  unsigned char fds_to_close[OPEN_MAX_MAX / CHAR_BIT];
/home/capstone/Desktop/root/patch-2.7.6/lib/fcntl.in.h:111:11:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#   undef open
/home/capstone/Desktop/root/patch-2.7.6/lib/fcntl.in.h:112:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#   define open rpl_open
/home/capstone/Desktop/root/patch-2.7.6/lib/fcntl.in.h:114:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_FUNCDECL_RPL (open, int, (const char *filename, int flags, ...)
/home/capstone/Desktop/root/patch-2.7.6/lib/fcntl.in.h:116:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIAS_RPL (open, int, (const char *filename, int flags, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/fcntl.in.h:118:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIAS_SYS (open, int, (const char *filename, int flags, ...));
/home/capstone/Desktop/root/patch-2.7.6/lib/fcntl.in.h:123:19:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIASWARN (open);
/home/capstone/Desktop/root/patch-2.7.6/lib/fcntl.in.h:126:9:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
# undef open
/home/capstone/Desktop/root/patch-2.7.6/lib/fcntl.in.h:128:18:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_WARN_ON_USE (open, "open is not always POSIX compliant - "
/home/capstone/Desktop/root/patch-2.7.6/lib/filenamecat-lgpl.c:31:47:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
# define mempcpy(D, S, N) ((void *) ((char *) memcpy (D, S, N) + (N)))
/home/capstone/Desktop/root/patch-2.7.6/lib/getcwd-lgpl.c:80:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char tmp[4032];
/home/capstone/Desktop/root/patch-2.7.6/lib/getprogname.c:154:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char filename[50];
/home/capstone/Desktop/root/patch-2.7.6/lib/getprogname.c:157:3:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
  sprintf (filename, "/proc/pinfo/%d", (int) getpid ());
/home/capstone/Desktop/root/patch-2.7.6/lib/getprogname.c:158:8:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  fd = open (filename, O_RDONLY);
/home/capstone/Desktop/root/patch-2.7.6/lib/getprogname.c:174:22:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              return memcpy (namecopy, name, namelen);
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:220:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char msg_ctxt_id[msgctxt_len + msgid_len];
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:222:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[1024];
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:231:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (msg_ctxt_id, msgctxt, msgctxt_len - 1);
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:233:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (msg_ctxt_id + msgctxt_len, msgid, msgid_len);
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:268:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char msg_ctxt_id[msgctxt_len + msgid_len];
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:270:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buf[1024];
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:279:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (msg_ctxt_id, msgctxt, msgctxt_len - 1);
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:281:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (msg_ctxt_id + msgctxt_len, msgid, msgid_len);
/home/capstone/Desktop/root/patch-2.7.6/lib/group-member.c:109:13:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      gid = atoi (argv[i]);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:152:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy (file_name, dir, dir_len);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:155:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy (file_name + dir_len + add_slash, base, base_len + 1);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:175:16:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
          fd = open (file_name,
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:200:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                      char buf1[50+1];
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:201:23:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                      char buf2[50+1];
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:416:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      static char buf[2 + 10 + 1];
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:442:19:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                  memcpy (buf, dot, modifier - dot);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:460:7:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
      sprintf (buf, "CP%u", GetACP ());
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:497:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char buf[2 + 10 + 1];
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:525:7:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
      sprintf (buf, "CP%u", GetACP ());
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:532:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char buf[2 + 10 + 1];
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:563:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (buf, dot, modifier - dot);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:581:11:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
          sprintf (buf, "CP%u", cp[0]);
/home/capstone/Desktop/root/patch-2.7.6/lib/mbrtowc.c:48:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char internal_state[4];
/home/capstone/Desktop/root/patch-2.7.6/lib/mbrtowc.c:72:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[4];
/home/capstone/Desktop/root/patch-2.7.6/lib/mempcpy.c:27:19:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  return (char *) memcpy (dest, src, n) + n;
/home/capstone/Desktop/root/patch-2.7.6/lib/mktime.c:619:38:  [2] (integer) atoi:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      tm.tm_isdst = argc == 3 ? -1 : atoi (argv[3]);
/home/capstone/Desktop/root/patch-2.7.6/lib/mktime.c:630:21:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      time_t from = atol (argv[1]);
/home/capstone/Desktop/root/patch-2.7.6/lib/mktime.c:631:19:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      time_t by = atol (argv[2]);
/home/capstone/Desktop/root/patch-2.7.6/lib/mktime.c:632:19:  [2] (integer) atol:Unless checked, the resulting number can exceed the expected range (CWE-190).  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
      time_t to = atol (argv[3]);
/home/capstone/Desktop/root/patch-2.7.6/lib/nstrftime.c:96:26:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
# define MEMCPY(d, s, n) memcpy (d, s, n)
/home/capstone/Desktop/root/patch-2.7.6/lib/nstrftime.c:882:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char ufmt[5];
/home/capstone/Desktop/root/patch-2.7.6/lib/nstrftime.c:884:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char ubuf[1024]; /* enough for any single format in practice */
/home/capstone/Desktop/root/patch-2.7.6/lib/open.c:33:10:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  return open (filename, flags, mode);
/home/capstone/Desktop/root/patch-2.7.6/lib/open.c:55:1:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
open (const char *filename, int flags, ...)
/home/capstone/Desktop/root/patch-2.7.6/lib/open.c:162:16:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
          fd = open ("/dev/null", flags, mode);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-priv.h:47:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char *openat_proc_name (char buf[OPENAT_BUFFER_SIZE], int fd, char const *file);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-priv.h:47:25:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char *openat_proc_name (char buf[OPENAT_BUFFER_SIZE], int fd, char const *file);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:43:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char *
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:44:19:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
openat_proc_name (char buf[OPENAT_BUFFER_SIZE], int fd, char const *file)
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:76:28:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        int proc_self_fd = open ("/proc/self/fd",
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:87:13:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
            char dotdot_buf[PROC_SELF_FD_DIR_SIZE_BOUND + sizeof "../fd" - 1];
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:112:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char dir[_MAX_PATH];
/home/capstone/Desktop/root/patch-2.7.6/lib/openat.c:225:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    return open (file, flags, mode);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat.c:228:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char buf[OPENAT_BUFFER_SIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/openat.c:232:27:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
        int open_result = open (proc_file, flags, mode);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat.c:269:13:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
      err = open (file, flags, mode);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat.c:296:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  int fd = open ("/", O_SEARCH);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat.c:300:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char buf[OPENAT_BUFFER_SIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/opendir.c:61:14:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    int fd = open (dir_name, O_RDONLY);
/home/capstone/Desktop/root/patch-2.7.6/lib/opendir.c:77:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dir_name_mask[MAX_PATH + 1 + 1 + 1];
/home/capstone/Desktop/root/patch-2.7.6/lib/opendir.c:150:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy (&dirp->entry, &entry, sizeof (WIN32_FIND_DATA));
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:467:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char const *
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:468:31:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
time_zone_str (int time_zone, char time_zone_buf[TIME_ZONE_BUFSIZE])
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:473:8:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
  p += sprintf (time_zone_buf, "%c%02d", sign, hour);
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:547:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char tmp[DBGBUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:567:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char time_zone_buf[TIME_ZONE_BUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:1509:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:1701:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char yymsgbuf[128];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:2974:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char const *
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:2975:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
tm_year_str (int tm_year, char buf[TM_YEAR_BUFSIZE])
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3229:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
          char buff[20];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3347:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char time_zone_buf[TIME_ZONE_BUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3356:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tm_year_buf[TM_YEAR_BUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3387:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tmp[DBGBUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3464:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char time_zone_buf[TIME_ZONE_BUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3465:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char dbg_tm[DBGBUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3473:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char tz1buf[TZBUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3785:15:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
              char tz2buf[sizeof "XXX" - 1 + TIME_ZONE_BUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3814:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char dbg_ord[DBGBUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3956:19:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                  char tm_year_buf[TM_YEAR_BUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:4119:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char buff[BUFSIZ];
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:4139:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
          char tm_year_buf[TM_YEAR_BUFSIZE];
/home/capstone/Desktop/root/patch-2.7.6/lib/printf-parse.c:122:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (memory, a->arg, a->count * sizeof (argument));        \
/home/capstone/Desktop/root/patch-2.7.6/lib/printf-parse.c:599:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy (memory, d->dir, d->count * sizeof (DIRECTIVE));
/home/capstone/Desktop/root/patch-2.7.6/lib/quotearg.c:842:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char slot0[256];
/home/capstone/Desktop/root/patch-2.7.6/lib/save-cwd.c:66:15:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
  cwd->desc = open (".", O_SEARCH | O_CLOEXEC);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:179:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (new_value, name, namelen);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:181:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (&new_value[namelen + 1], value, vallen);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:200:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (new_environ[size], new_value, namelen + 1 + vallen);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:202:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (new_environ[size], name, namelen);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:204:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (&new_environ[size][namelen + 1], value, vallen);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:217:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy ((char *) new_environ, (char *) __environ,
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:247:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (new_value, name, namelen);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:249:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (&new_value[namelen + 1], value, vallen);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:268:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (np, new_value, namelen + 1 + vallen);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:270:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (np, name, namelen);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:272:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (&np[namelen + 1], value, vallen);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:380:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (tmp + 1, value, len + 1);
/home/capstone/Desktop/root/patch-2.7.6/lib/stat-w32.c:192:15:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
              memcpy (&buf->st_ino, &id.FileId, sizeof (ino_t));
/home/capstone/Desktop/root/patch-2.7.6/lib/stat-w32.c:245:15:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
              char fpath[PATH_MAX];
/home/capstone/Desktop/root/patch-2.7.6/lib/stat.c:168:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (malloca_rname, name, rlen);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:283:11:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#   undef fopen
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:284:12:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
#   define fopen rpl_fopen
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:286:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_FUNCDECL_RPL (fopen, FILE *, (const char *filename, const char *mode)
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:288:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIAS_RPL (fopen, FILE *, (const char *filename, const char *mode));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:290:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIAS_SYS (fopen, FILE *, (const char *filename, const char *mode));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:292:19:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_CXXALIASWARN (fopen);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:294:9:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
# undef fopen
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:296:18:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
_GL_WARN_ON_USE (fopen, "fopen on native Windows platforms is not POSIX compliant - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1118:12:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
#   define tmpfile rpl_tmpfile
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1120:19:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
_GL_FUNCDECL_RPL (tmpfile, FILE *, (void));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1121:19:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
_GL_CXXALIAS_RPL (tmpfile, FILE *, (void));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1123:19:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
_GL_CXXALIAS_SYS (tmpfile, FILE *, (void));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1125:19:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
_GL_CXXALIASWARN (tmpfile);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1127:9:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
# undef tmpfile
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:1129:18:  [2] (tmpfile) tmpfile:Function tmpfile() has a security flaw on some systems (e.g., older System V systems) (CWE-377).  
_GL_WARN_ON_USE (tmpfile, "tmpfile is not usable on mingw - "
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:398:12:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
#   define mkstemp rpl_mkstemp
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:400:19:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_FUNCDECL_RPL (mkstemp, int, (char * /*template*/) _GL_ARG_NONNULL ((1)));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:401:19:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_CXXALIAS_RPL (mkstemp, int, (char * /*template*/));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:404:19:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_FUNCDECL_SYS (mkstemp, int, (char * /*template*/) _GL_ARG_NONNULL ((1)));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:406:19:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_CXXALIAS_SYS (mkstemp, int, (char * /*template*/));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:408:19:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_CXXALIASWARN (mkstemp);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:410:9:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
# undef mkstemp
/home/capstone/Desktop/root/patch-2.7.6/lib/stdlib.in.h:412:18:  [2] (tmpfile) mkstemp:Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library (CWE-377).  
_GL_WARN_ON_USE (mkstemp, "mkstemp is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/strdup.c:47:19:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  return (char *) memcpy (new, s, len);
/home/capstone/Desktop/root/patch-2.7.6/lib/strerror.c:39:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  static char buf[STACKBUF_LEN];
/home/capstone/Desktop/root/patch-2.7.6/lib/strerror.c:69:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (buf, msg, len + 1);
/home/capstone/Desktop/root/patch-2.7.6/lib/strndup.c:35:10:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  return memcpy (new, s, len);
/home/capstone/Desktop/root/patch-2.7.6/lib/sys_stat.in.h:788:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
_GL_FUNCDECL_RPL (utimensat, int, (int fd, char const *name,
/home/capstone/Desktop/root/patch-2.7.6/lib/sys_stat.in.h:791:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
_GL_CXXALIAS_RPL (utimensat, int, (int fd, char const *name,
/home/capstone/Desktop/root/patch-2.7.6/lib/sys_stat.in.h:795:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
_GL_FUNCDECL_SYS (utimensat, int, (int fd, char const *name,
/home/capstone/Desktop/root/patch-2.7.6/lib/sys_stat.in.h:799:44:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
_GL_CXXALIAS_SYS (utimensat, int, (int fd, char const *name,
/home/capstone/Desktop/root/patch-2.7.6/lib/tempname.c:70:17:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
# define __open open
/home/capstone/Desktop/root/patch-2.7.6/lib/tempname.c:170:3:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
  sprintf (tmpl, "%.*s/%.*sXXXXXX", (int) dlen, dir, (int) plen, pfx);
/home/capstone/Desktop/root/patch-2.7.6/lib/time-internal.h:30:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char *tzname_copy[2];
/home/capstone/Desktop/root/patch-2.7.6/lib/time-internal.h:48:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char abbrs[FLEXIBLE_ARRAY_MEMBER];
/home/capstone/Desktop/root/patch-2.7.6/lib/time_rz.c:88:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (abbrs, abbr, abbr_size);
/home/capstone/Desktop/root/patch-2.7.6/lib/unlink.c:72:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (short_name, name, len);
/home/capstone/Desktop/root/patch-2.7.6/lib/unlinkat.c:71:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (short_name, name, len);
/home/capstone/Desktop/root/patch-2.7.6/lib/utime.c:33:28:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
_gl_utimens_windows (const char *name, struct timespec ts[2])
/home/capstone/Desktop/root/patch-2.7.6/lib/utime.c:77:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (malloca_rname, name, rlen);
/home/capstone/Desktop/root/patch-2.7.6/lib/utime.in.h:83:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
extern int _gl_utimens_windows (const char *filename, struct timespec ts[2]);
/home/capstone/Desktop/root/patch-2.7.6/lib/utimens.c:171:20:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
fdutimens (int fd, char const *file, struct timespec const timespec[2])
/home/capstone/Desktop/root/patch-2.7.6/lib/utimens.c:506:10:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
utimens (char const *file, struct timespec const timespec[2])
/home/capstone/Desktop/root/patch-2.7.6/lib/utimens.c:516:11:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
lutimens (char const *file, struct timespec const timespec[2])
/home/capstone/Desktop/root/patch-2.7.6/lib/utimens.h:21:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int fdutimens (int, char const *, struct timespec const [2]);
/home/capstone/Desktop/root/patch-2.7.6/lib/utimens.h:22:14:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int utimens (char const *, struct timespec const [2]);
/home/capstone/Desktop/root/patch-2.7.6/lib/utimens.h:23:15:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int lutimens (char const *, struct timespec const [2]);
/home/capstone/Desktop/root/patch-2.7.6/lib/utimens.h:37:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int fdutimensat (int fd, int dir, char const *name, struct timespec const [2],
/home/capstone/Desktop/root/patch-2.7.6/lib/utimens.h:42:22:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
lutimensat (int dir, char const *file, struct timespec const times[2])
/home/capstone/Desktop/root/patch-2.7.6/lib/utimensat.c:42:34:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static int local_utimensat (int, char const *, struct timespec const[2], int);
/home/capstone/Desktop/root/patch-2.7.6/lib/utimensat.c:48:24:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
rpl_utimensat (int fd, char const *file, struct timespec const times[2],
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:151:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
#  define DCHAR_CPY memcpy
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:295:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char pointbuf[5];
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:296:3:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
  sprintf (pointbuf, "%#.0f", 1.0);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:520:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (r_ptr, a_ptr, a_len * sizeof (mp_limb_t));
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:656:11:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
          memcpy (r_ptr, a_ptr, a_len * sizeof (mp_limb_t));
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:2675:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          char cbuf[64]; /* Assume MB_CUR_MAX <= 64.  */
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:2720:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          char cbuf[64]; /* Assume MB_CUR_MAX <= 64.  */
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:2770:25:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                        char cbuf[64]; /* Assume MB_CUR_MAX <= 64.  */
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:2783:25:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                        memcpy (tmpptr, cbuf, count);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:2851:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          char cbuf[64]; /* Assume MB_CUR_MAX <= 64.  */
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:2864:27:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                          memcpy (result + length, cbuf, count);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:2880:27:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                          char cbuf[64]; /* Assume MB_CUR_MAX <= 64.  */
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:2902:27:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                          memcpy (result + length, cbuf, count);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3183:35:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                  sprintf ((char *) p, "%+d", exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3189:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                  char expbuf[6 + 1];
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3191:35:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                  sprintf (expbuf, "%+d", exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3334:35:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                  sprintf ((char *) p, "%+d", exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3340:35:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                  char expbuf[6 + 1];
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3342:35:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                  sprintf (expbuf, "%+d", exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3409:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy (result + length, tmp, count * sizeof (DCHAR_T));
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3794:37:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                    sprintf ((char *) p, "%+.2d", exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3800:37:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                    char expbuf[6 + 1];
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3802:37:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                    sprintf (expbuf, "%+.2d", exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3975:45:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                            sprintf ((char *) p, "%+.2d", exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3981:45:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                            char expbuf[6 + 1];
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3983:45:  [2] (buffer) sprintf:Does not check for buffer overflows (CWE-120).  Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source has a constant maximum length.
                                            sprintf (expbuf, "%+.2d", exponent);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4273:39:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                      char expbuf[6 + 1];
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4466:47:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
                                              char expbuf[6 + 1];
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4592:17:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                memcpy (result + length, tmp, count * sizeof (DCHAR_T));
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4800:29:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                            memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4821:29:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                            memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:5530:21:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
                    memcpy (result + length, tmp, count * sizeof (DCHAR_T));
/home/capstone/Desktop/root/patch-2.7.6/lib/xmalloc.c:113:10:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  return memcpy (xmalloc (s), p, s);
/home/capstone/Desktop/root/patch-2.7.6/lib/xmemdup0.c:41:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (result, p, s);
/home/capstone/Desktop/root/patch-2.7.6/lib/xvasprintf.c:67:7:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
      memcpy (p, next, len);
/home/capstone/Desktop/root/patch-2.7.6/src/inp.c:40:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char *tibuf[2];			/* plan b buffers */
/home/capstone/Desktop/root/patch-2.7.6/src/merge.c:78:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf0[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/merge.c:79:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf1[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/merge.c:139:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf0[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/merge.c:140:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf1[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/merge.c:141:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf2[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/merge.c:158:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char numbuf0[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/merge.c:159:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char numbuf1[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/merge.c:244:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char numbuf0[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/merge.c:245:7:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
      char numbuf1[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:105:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char serrbuf[BUFSIZ];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:116:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char numbuf[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1196:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf0[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1197:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf1[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1223:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char numbuf0[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1224:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char numbuf1[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1239:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char numbuf0[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1240:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char numbuf1[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1357:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf0[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1358:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf1[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1661:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf0[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:1662:2:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	char numbuf1[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:48:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char *p_name[3];			/* filenames in patch headers */
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:49:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char const *invalid_names[2];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:52:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char *p_timestr[2];		/* timestamps as strings */
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:53:8:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
static char *p_sha1[2];			/* SHA1 checksums */
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:123:8:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	pfp = fopen (filename, binary_transput ? "rb" : "r");
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:277:6:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
	    char numbuf[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:360:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (*sha1, start, len);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:583:9:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		      char numbuf[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:763:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char numbuf[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:805:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
		char numbuf[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1131:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char numbuf[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1145:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char numbuf[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1175:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char numbuf0[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1176:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char numbuf1[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1177:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char numbuf2[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1178:5:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char numbuf3[LINENUM_LENGTH_BOUND + 1];
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1255:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
		    strcpy (buf, "  \n");  /* assume blank lines got chopped */
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1416:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
		    strcpy (s, " \n");
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1700:7:  [2] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant string.
		    strcpy (buf, " \n");  /* assume blank lines got chopped */
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:2488:14:  [2] (misc) fopen:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	FILE *ifp = fopen (outname, binary_transput ? "rb" : "r");
/home/capstone/Desktop/root/patch-2.7.6/src/safe.c:394:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy(name, *path, p - *path);
/home/capstone/Desktop/root/patch-2.7.6/src/safe.c:497:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	  memcpy (name, prev, p - prev);
/home/capstone/Desktop/root/patch-2.7.6/src/safe.c:588:12:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
    return open (pathname, flags, mode);
/home/capstone/Desktop/root/patch-2.7.6/src/safe.c:712:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int safe_lutimens (const char *pathname, struct timespec const times[2])
/home/capstone/Desktop/root/patch-2.7.6/src/safe.h:35:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
int safe_lutimens (const char *pathname, struct timespec const times[2]);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:368:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	  memcpy (bakname, p, plen);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:369:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	  memcpy (bakname + plen, t, tlen);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:370:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	  memcpy (bakname + plen + tlen, b, blen);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:371:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	  memcpy (bakname + plen + tlen + blen, o, olen);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:372:4:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
	  memcpy (bakname + plen + tlen + blen + olen, s, slen + 1);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:689:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy (quoted, q, len + 1);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:882:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy (rv, s, size);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:901:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char *
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:902:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
format_linenum (char numbuf[LINENUM_LENGTH_BOUND + 1], lin n)
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1017:11:  [2] (misc) open:Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).  
	       ? open (TTY_DEVICE, O_RDONLY)
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1722:3:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
  char root[prefix_len + 2];
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1727:3:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
  memcpy (root, name, prefix_len);
/home/capstone/Desktop/root/patch-2.7.6/src/util.h:50:1:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
char *format_linenum (char[LINENUM_LENGTH_BOUND + 1], lin);
/home/capstone/Desktop/root/patch-2.7.6/lib/argmatch.c:92:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  arglen = strlen (arg);
/home/capstone/Desktop/root/patch-2.7.6/lib/argmatch.c:99:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          if (strlen (arglist[i]) == arglen)
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:41:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
# define _D_EXACT_NAMLEN(dp) strlen ((dp)->d_name)
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:113:7:  [1] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant character.
      strcpy (base, ".");
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:205:7:  [1] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant character.
      strcpy (base, ".");
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:295:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t filelen = base_offset + strlen (file + base_offset);
/home/capstone/Desktop/root/patch-2.7.6/lib/backupfile.c:302:38:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t simple_backup_suffix_size = strlen (simple_backup_suffix) + 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/basename-lgpl.c:63:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  for (len = strlen (name);  1 < len && ISSLASH (name[len - 1]);  len--)
/home/capstone/Desktop/root/patch-2.7.6/lib/canonicalize-lgpl.c:322:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              len = strlen (end);
/home/capstone/Desktop/root/patch-2.7.6/lib/chdir-long.c:117:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen (dir);
/home/capstone/Desktop/root/patch-2.7.6/lib/chown.c:125:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (file);
/home/capstone/Desktop/root/patch-2.7.6/lib/error.c:211:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (message) + 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/faccessat.c:59:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if (result == 0 && file[strlen (file) - 1] == '/')
/home/capstone/Desktop/root/patch-2.7.6/lib/fchownat.c:100:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen (file);
/home/capstone/Desktop/root/patch-2.7.6/lib/filenamecat-lgpl.c:52:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t baselen = strlen (base);
/home/capstone/Desktop/root/patch-2.7.6/lib/fstatat.c:79:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen (file);
/home/capstone/Desktop/root/patch-2.7.6/lib/getcwd-lgpl.c:119:30:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      result = realloc (buf, strlen (buf) + 1);
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt.c:214:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	&& namelen == strlen (p->name))
/home/capstone/Desktop/root/patch-2.7.6/lib/getopt.c:301:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  d->__nextchar += strlen (d->__nextchar);
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:216:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t msgctxt_len = strlen (msgctxt) + 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:217:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t msgid_len = strlen (msgid) + 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:264:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t msgctxt_len = strlen (msgctxt) + 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/gettext.h:265:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t msgid_len = strlen (msgid) + 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/lchown.c:92:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (file);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:105:9:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
# undef getc
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:106:10:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
# define getc getc_unlocked
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:146:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t dir_len = strlen (dir);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:147:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t base_len = strlen (base);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:205:27:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
                      c = getc (fp);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:214:33:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
                            c = getc (fp);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:221:27:  [1] (buffer) fscanf:It's unclear if the %s limit in the format string is small enough (CWE-120).  Check that the limit is sufficiently small, or use a different input function. 
                      if (fscanf (fp, "%50s %50s", buf1, buf2) < 2)
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:223:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                      l1 = strlen (buf1);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:224:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                      l2 = strlen (buf2);
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:514:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  if (pdot && 2 + strlen (pdot + 1) + 1 <= sizeof (buf))
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:595:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:595:52:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)
/home/capstone/Desktop/root/patch-2.7.6/lib/localcharset.c:599:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        codeset = aliases + strlen (aliases) + 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/lstat.c:80:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      if (S_ISDIR (sbuf->st_mode) || file[strlen (file) - 1] != '/')
/home/capstone/Desktop/root/patch-2.7.6/lib/mkdir.c:55:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (dir);
/home/capstone/Desktop/root/patch-2.7.6/lib/nstrftime.c:97:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
# define STRLEN(s) strlen (s)
/home/capstone/Desktop/root/patch-2.7.6/lib/nstrftime.c:629:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              format_end = f + strlen (f) + 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/nstrftime.c:641:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                    len += strlen (f + len);
/home/capstone/Desktop/root/patch-2.7.6/lib/nstrftime.c:920:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  size_t len = strlen (era->era_name);
/home/capstone/Desktop/root/patch-2.7.6/lib/nstrftime.c:1393:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          cpy (strlen (zone), zone);
/home/capstone/Desktop/root/patch-2.7.6/lib/open.c:118:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (filename);
/home/capstone/Desktop/root/patch-2.7.6/lib/open.c:187:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (filename);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:98:56:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t bufsize = PROC_SELF_FD_DIR_SIZE_BOUND + strlen (file);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:118:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    dirlen = strlen (dir);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat-proc.c:119:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    bufsize = dirlen + 1 + strlen (file) + 1; /* 1 for '/', 1 for null */
/home/capstone/Desktop/root/patch-2.7.6/lib/openat.c:107:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (filename);
/home/capstone/Desktop/root/patch-2.7.6/lib/openat.c:152:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (filename);
/home/capstone/Desktop/root/patch-2.7.6/lib/opendir.c:103:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    p = dir_name_mask + strlen (dir_name_mask);
/home/capstone/Desktop/root/patch-2.7.6/lib/opendir.c:139:15:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            + strlen (dir_name_mask) + 1);
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:1409:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#   define yystrlen strlen
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3083:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  wordlen = strlen (word);
/home/capstone/Desktop/root/patch-2.7.6/lib/parse-datetime.c:3467:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  char const *input_sentinel = p + strlen (p);
/home/capstone/Desktop/root/patch-2.7.6/lib/quotearg.c:370:28:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        quote_string_len = strlen (quote_string);
/home/capstone/Desktop/root/patch-2.7.6/lib/quotearg.c:416:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  ? (argsize = strlen (arg)) : argsize))
/home/capstone/Desktop/root/patch-2.7.6/lib/quotearg.c:627:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                  argsize = strlen (arg);
/home/capstone/Desktop/root/patch-2.7.6/lib/readlink.c:57:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (name);
/home/capstone/Desktop/root/patch-2.7.6/lib/readlinkat.c:34:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t file_len = strlen (file);
/home/capstone/Desktop/root/patch-2.7.6/lib/rename.c:49:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t src_len = strlen (src);
/home/capstone/Desktop/root/patch-2.7.6/lib/rename.c:50:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t dst_len = strlen (dst);
/home/capstone/Desktop/root/patch-2.7.6/lib/rename.c:148:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      src_len = strlen (src_temp);
/home/capstone/Desktop/root/patch-2.7.6/lib/rename.c:282:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t src_len = strlen (src);
/home/capstone/Desktop/root/patch-2.7.6/lib/rename.c:283:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t dst_len = strlen (dst);
/home/capstone/Desktop/root/patch-2.7.6/lib/rename.c:448:17:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      src_len = strlen (src_temp);
/home/capstone/Desktop/root/patch-2.7.6/lib/renameat2.c:127:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  src_len = strlen (src);
/home/capstone/Desktop/root/patch-2.7.6/lib/renameat2.c:128:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  dst_len = strlen (dst);
/home/capstone/Desktop/root/patch-2.7.6/lib/rmdir.c:37:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (dir);
/home/capstone/Desktop/root/patch-2.7.6/lib/safe-read.c:47:13:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
# define rw read
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:118:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  const size_t namelen = strlen (name);
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:119:41:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  const size_t vallen = value != NULL ? strlen (value) + 1 : 0;
/home/capstone/Desktop/root/patch-2.7.6/lib/setenv.c:376:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          size_t len = strlen (value);
/home/capstone/Desktop/root/patch-2.7.6/lib/stat.c:122:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (name);
/home/capstone/Desktop/root/patch-2.7.6/lib/stat.c:417:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          size_t len = strlen (name);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:254:11:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   undef fgetc
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:255:12:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   define fgetc rpl_fgetc
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:257:19:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_FUNCDECL_RPL (fgetc, int, (FILE *stream) _GL_ARG_NONNULL ((1)));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:258:19:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_RPL (fgetc, int, (FILE *stream));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:260:19:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_SYS (fgetc, int, (FILE *stream));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:262:19:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIASWARN (fgetc);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:641:11:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   undef getc
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:642:12:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   define getc rpl_fgetc
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:644:19:  [1] (buffer) fgetc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_FUNCDECL_RPL (fgetc, int, (FILE *stream) _GL_ARG_NONNULL ((1)));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:645:21:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_RPL_1 (getc, rpl_fgetc, int, (FILE *stream));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:647:19:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_SYS (getc, int, (FILE *stream));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:649:19:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIASWARN (getc);
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:655:11:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   undef getchar
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:656:12:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   define getchar rpl_getchar
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:658:19:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_FUNCDECL_RPL (getchar, int, (void));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:659:19:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_RPL (getchar, int, (void));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:661:19:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_SYS (getchar, int, (void));
/home/capstone/Desktop/root/patch-2.7.6/lib/stdio.in.h:663:19:  [1] (buffer) getchar:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIASWARN (getchar);
/home/capstone/Desktop/root/patch-2.7.6/lib/strdup.c:41:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (s) + 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/strerror.c:65:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen (msg);
/home/capstone/Desktop/root/patch-2.7.6/lib/string.in.h:411:11:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
#   undef strncat
/home/capstone/Desktop/root/patch-2.7.6/lib/string.in.h:412:12:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
#   define strncat rpl_strncat
/home/capstone/Desktop/root/patch-2.7.6/lib/string.in.h:414:19:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
_GL_FUNCDECL_RPL (strncat, char *, (char *dest, const char *src, size_t n)
/home/capstone/Desktop/root/patch-2.7.6/lib/string.in.h:416:19:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
_GL_CXXALIAS_RPL (strncat, char *, (char *dest, const char *src, size_t n));
/home/capstone/Desktop/root/patch-2.7.6/lib/string.in.h:418:19:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
_GL_CXXALIAS_SYS (strncat, char *, (char *dest, const char *src, size_t n));
/home/capstone/Desktop/root/patch-2.7.6/lib/string.in.h:420:19:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
_GL_CXXALIASWARN (strncat);
/home/capstone/Desktop/root/patch-2.7.6/lib/string.in.h:422:9:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
# undef strncat
/home/capstone/Desktop/root/patch-2.7.6/lib/string.in.h:424:18:  [1] (buffer) strncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, snprintf, or automatically resizing strings. 
_GL_WARN_ON_USE (strncat, "strncat is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/symlink.c:35:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (name);
/home/capstone/Desktop/root/patch-2.7.6/lib/symlinkat.c:34:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (name);
/home/capstone/Desktop/root/patch-2.7.6/lib/tempname.c:131:14:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      plen = strlen (pfx);
/home/capstone/Desktop/root/patch-2.7.6/lib/tempname.c:159:10:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  dlen = strlen (dir);
/home/capstone/Desktop/root/patch-2.7.6/lib/tempname.c:207:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen (tmpl);
/home/capstone/Desktop/root/patch-2.7.6/lib/time_rz.c:97:29:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t name_size = name ? strlen (name) + 1 : 0;
/home/capstone/Desktop/root/patch-2.7.6/lib/time_rz.c:153:34:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
              size_t zone_size = strlen (zone) + 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/time_rz.c:173:24:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
          zone_copy += strlen (zone_copy) + 1;
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1267:11:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   undef read
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1268:12:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
#   define read rpl_read
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1270:19:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_FUNCDECL_RPL (read, ssize_t, (int fd, void *buf, size_t count)
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1272:19:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_RPL (read, ssize_t, (int fd, void *buf, size_t count));
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1277:24:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIAS_SYS_CAST (read, ssize_t, (int fd, void *buf, size_t count));
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1279:19:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
_GL_CXXALIASWARN (read);
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1592:11:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
#   undef usleep
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1593:12:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
#   define usleep rpl_usleep
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1595:19:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_FUNCDECL_RPL (usleep, int, (useconds_t n));
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1596:19:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_CXXALIAS_RPL (usleep, int, (useconds_t n));
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1599:19:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_FUNCDECL_SYS (usleep, int, (useconds_t n));
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1601:19:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_CXXALIAS_SYS (usleep, int, (useconds_t n));
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1603:19:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_CXXALIASWARN (usleep);
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1605:9:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
# undef usleep
/home/capstone/Desktop/root/patch-2.7.6/lib/unistd.in.h:1607:18:  [1] (obsolete) usleep:This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified (CWE-676).  Use nanosleep(2) or setitimer(2) instead. 
_GL_WARN_ON_USE (usleep, "usleep is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/unlink.c:38:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (name);
/home/capstone/Desktop/root/patch-2.7.6/lib/unlinkat.c:54:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen (name);
/home/capstone/Desktop/root/patch-2.7.6/lib/unsetenv.c:68:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  len = strlen (name);
/home/capstone/Desktop/root/patch-2.7.6/lib/utime.c:45:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (name);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:240:24:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
#  define local_wcslen wcslen
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:1742:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            tmp_length = strlen (arg);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:2574:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                      arg_end = arg + strlen (arg);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3661:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                ndigits = strlen (digits);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3721:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        ndigits = strlen (digits);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3757:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        if (strlen (digits2) == precision + 1)
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3857:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        ndigits = strlen (digits);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:3893:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        if (strlen (digits2) == precision)
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4123:43:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                ndigits = strlen (digits);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4180:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        ndigits = strlen (digits);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4215:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        if (strlen (digits2) == precision + 1)
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4328:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        ndigits = strlen (digits);
/home/capstone/Desktop/root/patch-2.7.6/lib/vasnprintf.c:4363:45:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
                                        if (strlen (digits2) == precision)
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:574:19:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
_GL_FUNCDECL_SYS (wcslen, size_t, (const wchar_t *s) _GL_ATTRIBUTE_PURE);
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:576:19:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
_GL_CXXALIAS_SYS (wcslen, size_t, (const wchar_t *s));
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:577:19:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
_GL_CXXALIASWARN (wcslen);
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:579:9:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
# undef wcslen
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:581:18:  [1] (buffer) wcslen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
_GL_WARN_ON_USE (wcslen, "wcslen is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:639:19:  [1] (buffer) wcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
_GL_FUNCDECL_SYS (wcsncpy, wchar_t *,
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:642:19:  [1] (buffer) wcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
_GL_CXXALIAS_SYS (wcsncpy, wchar_t *,
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:644:19:  [1] (buffer) wcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
_GL_CXXALIASWARN (wcsncpy);
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:646:9:  [1] (buffer) wcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
# undef wcsncpy
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:648:18:  [1] (buffer) wcsncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
_GL_WARN_ON_USE (wcsncpy, "wcsncpy is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:692:19:  [1] (buffer) wcsncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, or automatically resizing strings. 
_GL_FUNCDECL_SYS (wcsncat, wchar_t *,
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:695:19:  [1] (buffer) wcsncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, or automatically resizing strings. 
_GL_CXXALIAS_SYS (wcsncat, wchar_t *,
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:697:19:  [1] (buffer) wcsncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, or automatically resizing strings. 
_GL_CXXALIASWARN (wcsncat);
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:699:9:  [1] (buffer) wcsncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, or automatically resizing strings. 
# undef wcsncat
/home/capstone/Desktop/root/patch-2.7.6/lib/wchar.in.h:701:18:  [1] (buffer) wcsncat:Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned] (CWE-120).  Consider strcat_s, strlcat, or automatically resizing strings. 
_GL_WARN_ON_USE (wcsncat, "wcsncat is unportable - "
/home/capstone/Desktop/root/patch-2.7.6/lib/xmalloc.c:121:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  return xmemdup (string, strlen (string) + 1);
/home/capstone/Desktop/root/patch-2.7.6/lib/xvasprintf.c:47:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      totalsize = xsum (totalsize, strlen (next));
/home/capstone/Desktop/root/patch-2.7.6/lib/xvasprintf.c:66:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t len = strlen (next);
/home/capstone/Desktop/root/patch-2.7.6/src/inp.c:253:12:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	      n = read (ifd, buffer + buffered, size - buffered);
/home/capstone/Desktop/root/patch-2.7.6/src/inp.c:318:23:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      size_t revlen = strlen (rev);
/home/capstone/Desktop/root/patch-2.7.6/src/inp.c:385:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  revlen = rev ? strlen (rev) : 0;
/home/capstone/Desktop/root/patch-2.7.6/src/inp.c:387:15:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  while ((c = getc (ifp)) != EOF)
/home/capstone/Desktop/root/patch-2.7.6/src/inp.c:433:16:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
      if ((c = getc (ifp)) == EOF)
/home/capstone/Desktop/root/patch-2.7.6/src/inp.c:445:13:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	  if ((c = getc (ifp)) == EOF)
/home/capstone/Desktop/root/patch-2.7.6/src/inp.c:492:6:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
		|| read (tifd, tibuf[whichbuf], tibufsize) < 0)
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:532:31:  [1] (buffer) mismatch:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
			|| (backup_if_mismatch && (mismatch | failed));
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:585:27:  [1] (buffer) mismatch:Function does not check the second iterator for over-read conditions (CWE-126).  This function is often discouraged by most C++ coding standards in favor of its safer alternatives provided since C++14. Consider using a form of this function that checks the second iterator before potentially overflowing it. 
			  else if (! force && (mismatch | failed))
/home/capstone/Desktop/root/patch-2.7.6/src/patch.c:638:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		    len = strlen (rej);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:296:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	t = buf + strlen (buf);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1067:11:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	len[i] = strlen (name[i]);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1113:12:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
		if ((c = getc (i)) == EOF)
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1290:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		p_len[p_end] = strlen (buf);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1366:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
		p_len[p_end] = strlen (buf);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1484:7:  [1] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). Risk is low because the source is a constant character.
		    strcpy (s, "\n");
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1679:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	p_len[0] = strlen (buf);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1688:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	p_len[filldst] = strlen (buf);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1835:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	p_len[0] = strlen (buf);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1880:13:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	p_len[i] = strlen (buf);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1975:8:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	  c = getc (fp);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:1997:8:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	  c = getc (fp);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:2006:8:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	  c = getc (fp);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:2031:8:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	  c = getc (fp);
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:2059:7:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  if (getc (fp) == '\\')
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:2061:19:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
      while ((c = getc (fp)) != '\n'  &&  c != EOF)
/home/capstone/Desktop/root/patch-2.7.6/src/pch.c:2492:14:  [1] (buffer) getc:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	while ((c = getc (ifp)) != EOF)
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:354:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  size_t plen = strlen (p);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:355:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  size_t blen = strlen (b);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:356:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  size_t slen = strlen (s);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:357:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  size_t tlen = strlen (t);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:473:16:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
	  while ((i = read (fd, buffer + size, PATH_MAX - size)) > 0)
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:595:15:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
  while ((i = read (fromfd, buf, bufsize)) != 0)
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:686:16:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t len = strlen (q);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:712:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t dirlen = strlen (dir) + 1;
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:714:32:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  size_t maxtrysize = dirlen + strlen (filebase) + maxfixlen + 1;
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:742:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  p += strlen (p);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:751:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  p += strlen (p);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:766:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  p += strlen (p);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:778:9:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	  p += strlen (p);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:890:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  return savebuf (s, strlen (s) + 1);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1031:19:  [1] (buffer) read:Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).  
      while ((r = read (ttyfd, buf + s, bufsize - 1 - s)) == bufsize - 1 - s
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1328:12:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  for (i = strlen (filename);  i != 0;  i--)
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1361:20:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
  u = v = xmalloc (strlen (s));
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1450:25:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      memmove (name, n, strlen (n) + 1);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1529:22:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
	char const *u = t + strlen (t);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1661:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      template = xmalloc (strlen (dirname) + 1 + strlen (basename) + 9);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1661:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      template = xmalloc (strlen (dirname) + 1 + strlen (basename) + 9);
/home/capstone/Desktop/root/patch-2.7.6/src/util.c:1678:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
      template = xmalloc (strlen (tmpdir) + 10);
